import { Authority } from "./Authority";
/**
 * Nonce: OIDC Nonce definition: https://openid.net/specs/openid-connect-core-1_0.html#IDToken
 * State: OAuth Spec: https://tools.ietf.org/html/rfc6749#section-10.12
 * @hidden
 */
export declare class ServerRequestParameters {
    authorityInstance: Authority;
    clientId: string;
    scopes: Array<string>;
    nonce: string;
    state: string;
    xClientVer: string;
    xClientSku: string;
    correlationId: string;
    responseType: string;
    redirectUri: string;
    promptValue: string;
    claimsValue: string;
    queryParameters: string;
    extraQueryParameters: string;
    readonly authority: string;
    /**
     * Constructor
     * @param authority
     * @param clientId
     * @param scope
     * @param responseType
     * @param redirectUri
     * @param state
     */
    constructor(authority: Authority, clientId: string, scope: Array<string>, responseType: string, redirectUri: string, state: string);
    /**
     * generates the URL with QueryString Parameters
     * @param scopes
     */
    createNavigateUrl(scopes: Array<string>): string;
    /**
     * Generate the array of all QueryStringParams to be sent to the server
     * @param scopes
     */
    createNavigationUrlString(scopes: Array<string>): Array<string>;
    /**
     * append the required scopes: https://openid.net/specs/openid-connect-basic-1_0.html#Scopes
     * @param scopes
     */
    translateclientIdUsedInScope(scopes: Array<string>): void;
    /**
     * Parse the scopes into a formatted scopeList
     * @param scopes
     */
    parseScope(scopes: Array<string>): string;
}
