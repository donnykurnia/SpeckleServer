{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Processor.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Processor.vue","mtime":1609071089432},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.replace\";\nimport _typeof from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/typeof\";\nimport _Array$isArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _defineProperty from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/defineProperty\";\nimport _slicedToArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/slicedToArray\";\nimport _Object$entries from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/entries\";\nimport _Promise from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/promise\";\nimport _toConsumableArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport _Object$keys from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport _JSON$stringify from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/json/stringify\";\nimport _Object$assign from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/assign\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport debounce from 'lodash.debounce';\nimport ProcessorBlock from '../components/ProcessorBlock.vue';\nimport DetailDescription from '../components/DetailDescription.vue';\nimport VueJsonPretty from 'vue-json-pretty';\nimport Axios from 'axios';\nexport default {\n  name: 'ProcessorView',\n  components: {\n    ProcessorBlock: ProcessorBlock,\n    DetailDescription: DetailDescription,\n    VueJsonPretty: VueJsonPretty\n  },\n  computed: {\n    lambdas: function lambdas() {\n      return this.$store.state.lambdas.sort(function (x, y) {\n        return x.name > y.name ? 1 : -1;\n      });\n    },\n    shareLink: function shareLink() {\n      var copy = _Object$assign({}, this.processor);\n\n      delete copy._id;\n      delete copy.owner;\n      delete copy.private;\n      delete copy.canRead;\n      delete copy.canWrite;\n      delete copy.anonymousComments;\n      delete copy.comments;\n      return window.location.origin + \"/#/processors/import?processor=\" + btoa(encodeURI(_JSON$stringify(copy)));\n    },\n    successRun: function successRun() {\n      if (this.blockStatus.length > 0 && this.blockStatus.length == this.processor.blocks.length) return this.blockStatus[this.blockStatus.length - 1] == 'success';\n      return false;\n    },\n    responseObject: function responseObject() {\n      if (!this.successRun) return null;\n      if (typeof this.blockOutput[this.blockOutput.length - 1] == 'string') return this.blockOutput[this.blockOutput.length - 1];else if (_Object$keys(this.blockOutput[this.blockOutput.length - 1]).length <= 10) return this.removeArraysRecursive(this.blockOutput[this.blockOutput.length - 1]);else {\n        var bar = {};\n\n        for (var key in this.blockOutput[this.blockOutput.length - 1]) {\n          bar[key] = this.blockOutput[this.blockOutput.length - 1][key];\n          if (_Object$keys(bar).length > 10) break;\n        }\n\n        bar['_hidden'] = \"... (\".concat(_Object$keys(this.blockOutput[this.blockOutput.length - 1]).length - 10, \" more objects)\");\n        return this.removeArraysRecursive(bar);\n      }\n    }\n  },\n  data: function data() {\n    return {\n      initInput: \"\",\n      isRunning: false,\n      id: \"\",\n      processor: null,\n      blockStatus: [],\n      blockOutput: [],\n      toRequest: [],\n      requestBuckets: [],\n      isRequesting: false,\n      pauseRequesting: false,\n      bucketInProgress: false\n    };\n  },\n  mutations: {},\n  methods: {\n    runProcessor: function () {\n      var _runProcessor = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        var blockInput, i, token, params, bucket, maxReq, output, j, result, _result, _result2;\n\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                if (!this.isRunning) {\n                  _context.next = 2;\n                  break;\n                }\n\n                return _context.abrupt(\"return\");\n\n              case 2:\n                this.isRunning = true;\n                blockInput = this.initInput;\n                i = 0;\n\n                if (this.successRun) {\n                  this.blockOutput.splice(0, this.blockOutput.length);\n                  this.blockStatus.splice(0, this.blockStatus.length);\n                } else if (this.blockStatus.length > 0) {\n                  i = this.blockStatus.filter(function (x) {\n                    return x == 'success';\n                  }).length;\n                  if (i > 0) blockInput = this.blockOutput[i - 1];\n                  this.blockOutput.splice(i, this.blockOutput.length - i);\n                  this.blockStatus.splice(i, this.blockStatus.length - i);\n                }\n\n              case 6:\n                if (!(i < this.processor.blocks.length)) {\n                  _context.next = 77;\n                  break;\n                }\n\n                this.blockStatus.push('running');\n                token = this.getToken(this.processor.blocks[i]);\n                params = this.processor.params[i] ? this.processor.params[i] : new Object();\n\n                if (!(this.processor.blocks[i].allowBucketing && blockInput.constructor === Array)) {\n                  _context.next = 57;\n                  break;\n                }\n\n                // Try to chunk the payload if it is an array\n                bucket = [], maxReq = 250; // magic number; maximum objects to request in a bucket\n\n                output = [];\n                j = 0;\n\n              case 14:\n                if (!(j < blockInput.length)) {\n                  _context.next = 35;\n                  break;\n                }\n\n                bucket.push(blockInput[j]);\n\n                if (!(j % maxReq === 0 && j !== 0)) {\n                  _context.next = 32;\n                  break;\n                }\n\n                _context.prev = 17;\n                _context.next = 20;\n                return this.callLambda(this.processor.blocks[i].function, bucket, params, token);\n\n              case 20:\n                result = _context.sent;\n                if (result.data.constructor === Array) output.push.apply(output, _toConsumableArray(result.data));else output.push(result.data);\n                _context.next = 31;\n                break;\n\n              case 24:\n                _context.prev = 24;\n                _context.t0 = _context[\"catch\"](17);\n                this.blockStatus.pop();\n                this.blockStatus.push('error');\n                this.blockOutput.push(_context.t0.response.data);\n                this.isRunning = false;\n                return _context.abrupt(\"return\");\n\n              case 31:\n                bucket = [];\n\n              case 32:\n                j++;\n                _context.next = 14;\n                break;\n\n              case 35:\n                if (!(bucket.length > 0)) {\n                  _context.next = 51;\n                  break;\n                }\n\n                _context.prev = 36;\n                _context.next = 39;\n                return this.callLambda(this.processor.blocks[i].function, bucket, params, token);\n\n              case 39:\n                _result = _context.sent;\n                if (_result.data.constructor === Array) output.push.apply(output, _toConsumableArray(_result.data));else output.push(_result.data);\n                _context.next = 50;\n                break;\n\n              case 43:\n                _context.prev = 43;\n                _context.t1 = _context[\"catch\"](36);\n                this.blockStatus.pop();\n                this.blockStatus.push('error');\n                this.blockOutput.push(_context.t1.response.data);\n                this.isRunning = false;\n                return _context.abrupt(\"return\");\n\n              case 50:\n                bucket = [];\n\n              case 51:\n                this.blockStatus.pop();\n                this.blockStatus.push('success');\n                this.blockOutput.push(output);\n                blockInput = output;\n                _context.next = 74;\n                break;\n\n              case 57:\n                _context.prev = 57;\n                _context.next = 60;\n                return this.callLambda(this.processor.blocks[i].function, blockInput, params, token);\n\n              case 60:\n                _result2 = _context.sent;\n                this.blockStatus.pop();\n                this.blockStatus.push('success');\n                this.blockOutput.push(_result2.data);\n                blockInput = _result2.data;\n                _context.next = 74;\n                break;\n\n              case 67:\n                _context.prev = 67;\n                _context.t2 = _context[\"catch\"](57);\n                this.blockStatus.pop();\n                this.blockStatus.push('error');\n                this.blockOutput.push(_context.t2.response.data);\n                this.isRunning = false;\n                return _context.abrupt(\"return\");\n\n              case 74:\n                i++;\n                _context.next = 6;\n                break;\n\n              case 77:\n                this.isRunning = false;\n\n              case 78:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[17, 24], [36, 43], [57, 67]]);\n      }));\n\n      function runProcessor() {\n        return _runProcessor.apply(this, arguments);\n      }\n\n      return runProcessor;\n    }(),\n    callLambda: function callLambda(func, input, params, token) {\n      var _this = this;\n\n      return new _Promise(function (resolve, reject) {\n        Axios({\n          method: 'POST',\n          url: \".netlify/functions/\".concat(func),\n          baseURL: location.protocol + '//' + location.host,\n          data: {\n            baseUrl: _this.$store.state.server,\n            token: token,\n            input: input,\n            parameters: params\n          }\n        }).then(function (res) {\n          return resolve(res);\n        }).catch(function (err) {\n          return reject(err);\n        });\n      });\n    },\n    rerunBlock: function rerunBlock(index) {\n      if (this.isRunning) return;\n      this.blockOutput.splice(index, this.blockOutput.length - index);\n      this.blockStatus.splice(index, this.blockStatus.length - index);\n      this.runProcessor();\n    },\n    addBlock: function addBlock(sender) {\n      if (sender != null) {\n        this.processor.blocks.push(sender);\n        this.processor.params.push({});\n      }\n\n      this.updateBlock();\n    },\n    removeBlock: function removeBlock(index) {\n      this.blockOutput.splice(index, this.blockOutput.length - index);\n      this.blockStatus.splice(index, this.blockStatus.length - index);\n      this.processor.params.splice(index, 1);\n      this.processor.blocks.splice(index, 1);\n      this.updateBlock();\n    },\n    updateParam: function updateParam(payload) {\n      this.blockOutput.splice(payload.index, this.blockOutput.length - payload.index);\n      this.blockStatus.splice(payload.index, this.blockStatus.length - payload.index);\n      this.processor.params[payload.index] = _Object$assign.apply(Object, [{}].concat(_toConsumableArray(_Object$entries(payload.params).filter(function (_ref) {\n        var _ref2 = _slicedToArray(_ref, 2),\n            k = _ref2[0],\n            v = _ref2[1];\n\n        if (v === null) return false;\n        if (typeof v == 'boolean') return v;\n        return _Object$keys(v).length > 0;\n      }).map(function (_ref3) {\n        var _ref4 = _slicedToArray(_ref3, 2),\n            k = _ref4[0],\n            v = _ref4[1];\n\n        return _defineProperty({}, k, v);\n      }))));\n      this.updateBlock();\n    },\n    updateName: function updateName(args) {\n      this.processor.name = args.text;\n      this.$store.dispatch('updateProcessor', {\n        _id: this.id,\n        name: this.processor.name\n      });\n    },\n    updateTags: debounce(function (e) {\n      this.$store.dispatch('updateProcessor', {\n        _id: this.id,\n        tags: this.processor.tags\n      });\n    }, 1000),\n    updateBlock: function updateBlock() {\n      this.$store.dispatch('updateProcessor', {\n        _id: this.id,\n        blocks: this.processor.blocks,\n        params: this.processor.params\n      });\n    },\n    removeArraysRecursive: function removeArraysRecursive(foo) {\n      var bar = {};\n      if (typeof foo == 'string') return foo;\n\n      for (var key in foo) {\n        if (!foo.hasOwnProperty(key)) continue;\n\n        if (_Array$isArray(foo[key])) {\n          /*DO FUCKALL */\n          if (foo[key].length < 3) bar[key] = foo[key];else {\n            bar[key] = [].concat(_toConsumableArray(foo[key].slice(0, 3)), [\"... (\".concat(foo[key].length - 3, \" more values)\")]);\n          }\n        } else if (_typeof(foo[key]) === 'object' && foo[key] !== null) {\n          bar[key] = this.removeArraysRecursive(foo[key]);\n        } else {\n          bar[key] = foo[key];\n        }\n      }\n\n      return bar;\n    },\n    getToken: function getToken(block) {\n      if (block.msal) {\n        var tokenID = 'msal|' + block.msal.clientId;\n        if (this.$store.state.tokens.hasOwnProperty(tokenID)) return this.$store.state.tokens[tokenID];\n      }\n\n      return Axios.defaults.headers.common['Authorization'];\n    }\n  },\n  activated: function activated() {\n    var _this2 = this;\n\n    this.id = this.$route.params.processorId;\n\n    if (this.id == 'import') {\n      var parsed = null;\n\n      try {\n        console.log(this.$route.query.processor);\n        parsed = JSON.parse(decodeURI(atob(this.$route.query.processor)));\n      } catch (_unused) {\n        console.log('failed to import');\n        this.$router.push(\"/processors/\");\n      }\n\n      if (parsed) {\n        parsed.name = 'Imported: ' + parsed.name;\n        this.$store.dispatch('createProcessor', parsed).then(function (res) {\n          _this2.processor = res;\n          _this2.id = _this2.processor._id;\n\n          _this2.$router.replace(\"\".concat(_this2.id));\n\n          console.log('activated');\n          _this2.isLoading = false;\n        }).catch(function (err) {\n          console.log('failed to import');\n\n          _this2.$router.push(\"/processors/\");\n        });\n      }\n    } else {\n      this.$store.dispatch('getProcessor', {\n        _id: this.id\n      }).then(function (res) {\n        if (res == null) _this2.$router.push(\"/processors/\");\n        _this2.processor = res;\n        console.log('activated');\n      });\n    }\n  },\n  deactivated: function deactivated() {\n    this.processor = null;\n    this.blockStatus.splice(0, this.blockStatus.length);\n    this.blockOutput.splice(0, this.blockOutput.length);\n    console.log('de-activated');\n  }\n};",{"version":3,"sources":["Processor.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-container grid-list-xl>\n    <div style='position: absolute; top:0; left: 0; width: 100%;'>\n      <v-progress-linear :indeterminate=\"true\" v-show='!processor' height='2' class='ma-0'></v-progress-linear>\n    </div>\n    <v-layout row wrap v-if=\"processor\">\n      <v-flex xs12>\n        <v-card class=\"pa-3\">\n          <v-layout row wrap>\n            <v-flex xs12 class='display-1 font-weight-light text-capitalize my-5'>\n              <editable-span :text='processor.name' @update='updateName'></editable-span>\n            </v-flex>\n            <v-flex xs12 class='ma-0 py-0 mb-2'>\n              <v-combobox :menu-props='{\"maxHeight\":0, \"zIndex\":\"0\"}' @input='updateTags' v-model=\"processor.tags\" :items='processor.tags' hint='add or remove tags' solo persistent-hint small-chips deletable-chips multiple tags>\n                <template v-slot:no-data>processor has no tags.</template>\n              </v-combobox>\n            </v-flex>\n          </v-layout>\n          <v-card-actions>\n            <v-dialog\n              max-width=\"500\">\n              <template v-slot:activator=\"{ on }\">\n                <v-btn round small depressed v-on=\"on\">\n                  <v-icon>share</v-icon>\n                  <span class=\"mx-2\">share</span>\n                </v-btn>\n              </template>\n              <v-card>\n                <v-card-title>\n                  <span class='font-weight-light'>\n                    Share link\n                  </span>\n                </v-card-title>\n                <v-card-text>\n                  <v-text-field :readonly=\"true\" v-model=\"shareLink\" class='font-weight-light'></v-text-field>\n                </v-card-text>\n              </v-card>\n            </v-dialog>\n          </v-card-actions>\n        </v-card>\n      </v-flex>\n      <v-flex xs12>\n        <v-card class=\"my-4\">\n          <detail-description :resource='processor'></detail-description>\n        </v-card>\n      </v-flex>\n      <v-flex>\n        <v-card>\n          <v-flex mb-3 class=\"pa-4\">\n            <v-icon class=\"mr-2\">\n              code\n            </v-icon>\n            <span class='title font-weight-light mr-2'>\n              Processor\n            </span>\n          </v-flex>\n        </v-card>\n        <v-flex xs12 v-for='(block, index) in processor.blocks' :key='index'>\n          <processor-block\n            :index='index'\n            :block='block'\n            :output='blockOutput[index]'\n            :status='blockStatus[index]'\n            :params='processor.params[index]'\n            v-on:remove-block=\"removeBlock\"\n            v-on:update-param=\"updateParam\"\n            v-on:rerun-block=\"rerunBlock\"/>\n        </v-flex>\n        <v-flex xs12 mb-3 pa-0 v-if='processor.blocks.length > 0'>\n          <v-card>\n            <v-flex ma-0 pa-3>\n              <v-icon small class=\"mr-2\">\n                receipt\n              </v-icon>\n              <span class='font-weight-light mr-2'>\n                Output\n              </span>\n            </v-flex>\n            <v-divider v-if=\"successRun\"></v-divider>\n            <v-flex v-if=\"successRun\" pa-3>\n              <vue-json-pretty :data='responseObject' :deep='1' highlight-mouseover-node show-length :show-line='false' :show-double-quotes='false'>\n              </vue-json-pretty>\n            </v-flex>\n          </v-card>\n        </v-flex>\n        <v-card>\n          <v-flex xs12>\n            <v-autocomplete\n              return-object\n              :items=\"lambdas\"\n              item-text=\"name\"\n              item-value=\"name\"\n              v-on:input=\"addBlock\"\n              label=\"Add new block\">\n              <template slot=\"selection\">\n                {{null}}\n              </template>\n              <template slot=\"item\" slot-scope=\"lambdas\">\n                <v-icon class=\"mr-2\">\n                  {{lambdas.item.icon ? lambdas.item.icon : 'code'}}\n                </v-icon>\n                {{lambdas.item.name}}\n              </template>\n            </v-autocomplete>\n          </v-flex>\n        </v-card>\n      </v-flex>\n    </v-layout>\n    <v-btn color=\"primary\" dark fixed large bottom right fab @click=\"runProcessor\">\n      <v-progress-circular v-if=\"isRunning\" indeterminate>\n      </v-progress-circular>\n      <v-icon v-else>\n        {{this.successRun ? \"replay\" : \"play_arrow\"}}\n      </v-icon>\n    </v-btn>\n  </v-container>\n</template>\n<script>\n\nimport debounce from 'lodash.debounce'\nimport ProcessorBlock from '../components/ProcessorBlock.vue'\nimport DetailDescription from '../components/DetailDescription.vue'\nimport VueJsonPretty from 'vue-json-pretty'\n\nimport Axios from 'axios'\n\nexport default {\n  name: 'ProcessorView',\n  components: {\n    ProcessorBlock,\n    DetailDescription,\n    VueJsonPretty,\n  },\n  computed: {\n    lambdas( ) {\n      return this.$store.state.lambdas.sort((x, y) => (x.name > y.name) ? 1 : -1)\n    },\n    shareLink( ) {\n      let copy = Object.assign({}, this.processor)\n\n      delete copy._id\n      delete copy.owner\n      delete copy.private\n      delete copy.canRead\n      delete copy.canWrite\n      delete copy.anonymousComments\n      delete copy.comments\n\n      return window.location.origin + \"/#/processors/import?processor=\" + btoa(encodeURI(JSON.stringify(copy)))\n    },\n    successRun( ) {\n      if (this.blockStatus.length > 0 && this.blockStatus.length == this.processor.blocks.length)\n        return this.blockStatus[this.blockStatus.length - 1] == 'success'\n\n      return false\n    },\n    responseObject( ) {\n      if (!this.successRun)\n        return null\n\n      if (typeof this.blockOutput[this.blockOutput.length - 1] == 'string')\n        return this.blockOutput[this.blockOutput.length - 1]\n      else if (Object.keys(this.blockOutput[this.blockOutput.length - 1]).length <= 10)\n        return this.removeArraysRecursive( this.blockOutput[this.blockOutput.length - 1] )\n      else\n      {\n        let bar = {}\n        for ( let key in this.blockOutput[this.blockOutput.length - 1] ) {\n          bar[key] = this.blockOutput[this.blockOutput.length - 1][key]\n\n          if (Object.keys(bar).length > 10)\n            break\n        }\n        bar['_hidden'] = `... (${Object.keys(this.blockOutput[this.blockOutput.length - 1]).length - 10} more objects)`\n        return this.removeArraysRecursive( bar )\n      }\n    }\n  },\n  data( ) {\n    return {\n      initInput: \"\",\n\n      isRunning: false,\n\n      id: \"\",\n      processor: null,\n\n      blockStatus: [ ],\n      blockOutput: [ ],\n      \n      toRequest: [ ],\n      requestBuckets: [ ],\n      isRequesting: false,\n      pauseRequesting: false,\n      bucketInProgress: false,\n    }\n  },\n  mutations: {\n\n  },\n  methods: {\n    async runProcessor ( ) {\n      if (this.isRunning)\n        return\n\n      this.isRunning = true\n      \n      var blockInput = this.initInput\n      var i = 0\n\n      if (this.successRun)\n      {\n        this.blockOutput.splice(0, this.blockOutput.length)\n        this.blockStatus.splice(0, this.blockStatus.length)\n      }\n      else if (this.blockStatus.length > 0)\n      {\n        i = this.blockStatus.filter(x => x == 'success').length\n\n        if (i > 0)\n          blockInput = this.blockOutput[i - 1]\n\n        this.blockOutput.splice(i, this.blockOutput.length - i)\n        this.blockStatus.splice(i, this.blockStatus.length - i)\n      }\n\n      for (; i < this.processor.blocks.length; i++)\n      {\n        this.blockStatus.push('running')\n\n        var token = this.getToken(this.processor.blocks[i])\n\n        var params = this.processor.params[i] ? this.processor.params[i] : new Object\n        \n        if (this.processor.blocks[i].allowBucketing && blockInput.constructor === Array)\n        {\n          // Try to chunk the payload if it is an array\n          var bucket = [ ],\n            maxReq = 250 // magic number; maximum objects to request in a bucket\n\n          var output = [ ]\n\n          for (let j = 0; j < blockInput.length; j++)\n          {\n            bucket.push( blockInput[j] )\n\n            if ( j % maxReq === 0 && j !== 0 ) {\n              try\n              {\n                let result = await this.callLambda( this.processor.blocks[i].function, bucket, params, token )\n                if (result.data.constructor === Array)\n                  output.push(...result.data)\n                else\n                  output.push(result.data)\n              }\n              catch (err)\n              {\n                this.blockStatus.pop()\n                this.blockStatus.push('error')\n                this.blockOutput.push(err.response.data)\n                this.isRunning = false\n                return\n              }\n\n              bucket = [ ]\n            }\n          }\n\n          if ( bucket.length > 0 ) {\n            try\n            {\n              let result = await this.callLambda( this.processor.blocks[i].function, bucket, params, token )\n\n              if (result.data.constructor === Array)\n                output.push(...result.data)\n              else\n                output.push(result.data)\n            }\n            catch (err) \n            {\n              this.blockStatus.pop()\n              this.blockStatus.push('error')\n              this.blockOutput.push(err.response.data)\n              this.isRunning = false\n              return\n            }\n\n            bucket = [ ]\n          }\n\n          this.blockStatus.pop()\n          this.blockStatus.push('success')\n          this.blockOutput.push(output)\n          blockInput = output\n        }\n        else\n        {\n          try\n          {\n            let result = await this.callLambda( this.processor.blocks[i].function, blockInput, params, token )\n            this.blockStatus.pop()\n            this.blockStatus.push('success')\n            this.blockOutput.push(result.data)\n            blockInput = result.data\n          }\n          catch (err) \n          {\n            this.blockStatus.pop()\n            this.blockStatus.push('error')\n            this.blockOutput.push(err.response.data)\n            this.isRunning = false\n            return\n          }\n        }\n      }\n\n      this.isRunning = false\n    },\n\n    callLambda( func, input, params, token ) {\n      return new Promise((resolve, reject) => {\n        Axios({\n          method: 'POST',\n          url: `.netlify/functions/${func}`,\n          baseURL: location.protocol + '//' + location.host,\n          data: {\n            baseUrl: this.$store.state.server,\n            token: token,\n            input: input,\n            parameters: params,\n          },\n        })\n          .then( res => resolve(res) )\n          .catch ( err => reject(err) )\n      })\n    },\n\n    rerunBlock ( index ) {\n      if (this.isRunning)\n        return\n\n      this.blockOutput.splice(index, this.blockOutput.length - index)\n      this.blockStatus.splice(index, this.blockStatus.length - index)\n\n      this.runProcessor()\n    },\n\n    addBlock ( sender ) {\n      if (sender != null)\n      {\n        this.processor.blocks.push( sender )\n        this.processor.params.push({})\n      }\n      this.updateBlock ( )\n    },\n\n    removeBlock ( index ) {\n      this.blockOutput.splice(index, this.blockOutput.length - index)\n      this.blockStatus.splice(index, this.blockStatus.length - index)\n\n      this.processor.params.splice(index, 1)\n      this.processor.blocks.splice(index, 1)\n      this.updateBlock ( )\n    },\n\n    updateParam ( payload ) {\n      this.blockOutput.splice(payload.index, this.blockOutput.length - payload.index)\n      this.blockStatus.splice(payload.index, this.blockStatus.length - payload.index)\n      \n      this.processor.params[payload.index] = Object.assign({}, ...\n        Object.entries(payload.params).filter(([k,v]) => {\n          if (v === null)\n            return false\n\n          if (typeof v == 'boolean')\n            return v\n          \n          return Object.keys(v).length > 0\n        }).map(([k,v]) => ({[k]:v}))\n      )\n      this.updateBlock ( )\n    },\n\n    updateName( args ) {\n      this.processor.name = args.text\n      this.$store.dispatch( 'updateProcessor', { _id: this.id, name: this.processor.name } )\n    },\n\n    updateTags: debounce( function( e ) {\n      this.$store.dispatch( 'updateProcessor', { _id: this.id, tags: this.processor.tags } )\n    }, 1000 ),\n\n    updateBlock ( ) {\n      this.$store.dispatch('updateProcessor',\n        {\n          _id: this.id,\n          blocks: this.processor.blocks,\n          params: this.processor.params,\n        }\n      )\n    },\n    \n    removeArraysRecursive( foo ) {\n      let bar = {}\n\n      if (typeof foo == 'string')\n        return foo\n\n      for ( let key in foo ) {\n        if ( !foo.hasOwnProperty( key ) ) continue\n\n        if ( Array.isArray( foo[ key ] ) ) {\n          /*DO FUCKALL */\n          if( foo[key].length < 3 )\n            bar[key] = foo[key]\n          else {\n            bar[key] = [ ...foo[key].slice(0, 3), `... (${foo[key].length - 3} more values)` ]\n          }\n        } else if ( typeof foo[ key ] === 'object' && foo[ key ] !== null ) {\n          bar[ key ] = this.removeArraysRecursive( foo[ key ] )\n        } else {\n          bar[ key ] = foo[ key ]\n        }\n      }\n      return bar\n    },\n\n    getToken( block ) {\n      if (block.msal)\n      {\n        var tokenID = 'msal|' + block.msal.clientId\n\n        if (this.$store.state.tokens.hasOwnProperty(tokenID))\n          return this.$store.state.tokens[tokenID]\n      }\n\n      return Axios.defaults.headers.common[ 'Authorization' ]\n    }\n  },\n  activated( ) {\n    this.id = this.$route.params.processorId\n\n    if (this.id == 'import')\n    {\n      var parsed = null\n      \n      try\n      {\n        console.log(this.$route.query.processor)\n        parsed = JSON.parse(decodeURI(atob(this.$route.query.processor)))\n      }\n      catch\n      {\n        console.log( 'failed to import' )\n        this.$router.push( `/processors/` )\n      }\n\n      if (parsed)\n      {\n        parsed.name = 'Imported: ' + parsed.name\n        this.$store.dispatch( 'createProcessor', parsed )\n          .then( res => {\n            this.processor = res\n            this.id = this.processor._id\n            this.$router.replace( `${this.id}` )\n\n            console.log( 'activated' )\n            this.isLoading = false\n          })\n          .catch( err => {\n            console.log( 'failed to import' )\n            this.$router.push( `/processors/` )\n          })\n      }\n    }\n    else\n    {\n      this.$store.dispatch('getProcessor', { _id: this.id })\n        .then( res => {\n          if (res == null)\n            this.$router.push( `/processors/` )\n          \n          this.processor = res\n\n          console.log( 'activated' )\n        })\n    }\n  },\n  deactivated( ) {\n    this.processor = null\n\n    this.blockStatus.splice(0, this.blockStatus.length) \n    this.blockOutput.splice(0, this.blockOutput.length) \n    \n    console.log( 'de-activated' )\n  },\n}\n</script>\n<style scoped lang='scss'>\n</style>\n"],"sourceRoot":"src/views"}]}