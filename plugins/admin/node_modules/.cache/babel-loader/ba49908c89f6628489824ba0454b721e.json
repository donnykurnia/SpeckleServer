{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Streams.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Streams.vue","mtime":1609071089436},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.array.find-index\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.sort\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport debounce from 'lodash.debounce';\nimport StreamCard from '../components/StreamCard.vue';\nexport default {\n  name: 'StreamsView',\n  components: {\n    StreamCard: StreamCard\n  },\n  computed: {\n    allTags: function allTags() {\n      return this.$store.getters.allStreamTags;\n    },\n    allJobNumbers: function allJobNumbers() {\n      return this.$store.getters.allJobNumbersStreams;\n    },\n    streams: function streams() {\n      return this.$store.state.streams.filter(function (stream) {\n        return stream.parent == null && stream.deleted === false;\n      }).sort(function (a, b) {\n        return new Date(b.updatedAt) - new Date(a.updatedAt);\n      });\n    },\n    filteredStreams: function filteredStreams() {\n      return this.$store.getters.filteredResources(this.filters);\n    },\n    paginatedStreams: function paginatedStreams() {\n      // return this.filteredStreams.slice( this.startIndex, this.endIndex )\n      return this.filteredStreams.slice(this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * (this.pageNumber + 1));\n    }\n  },\n  data: function data() {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedStreams: [],\n      searchfilter: '',\n      filters: [],\n      defaultPermission: 'private',\n      isSearching: false,\n      searchHint: \"You can restrict your search to the stream's id by prepending id:{your stream id}, similarly for name, tags etc.\"\n    };\n  },\n  watch: {\n    searchfilter: function searchfilter() {\n      this.isSearching = true;\n    },\n    selectedStreams: function selectedStreams() {\n      var priv = 0,\n          pub = 0;\n      this.selectedStreams.forEach(function (s) {\n        if (s.private) priv++;else pub++;\n      });\n      this.defaultPermission = priv > pub ? 'public' : 'private';\n    }\n  },\n  methods: {\n    addSearchQuery: function addSearchQuery(key, tag) {\n      var _this = this;\n\n      this.pageNumber = 0;\n      var tempFilter = \"\".concat(key, \":\").concat(tag);\n      this.searchfilter = tempFilter;\n      setTimeout(function () {\n        _this.isSearching = false;\n      }, 50);\n\n      try {\n        var filters = tempFilter.split(' ').map(function (t) {\n          if (t.includes(':')) return {\n            key: t.split(':')[0],\n            value: t.split(':')[1]\n          };else if (!t.includes('public') && !t.includes('private') && !t.includes('mine') && !t.includes('shared')) // TODO: not elegant\n            return {\n              key: 'name',\n              value: t\n            };else return {\n            key: t,\n            value: null\n          };\n        });\n        this.filters = filters;\n      } catch (_unused) {\n        this.filters = [{\n          key: 'name',\n          value: e\n        }];\n      }\n\n      this.isSearching = false;\n    },\n    createStream: function createStream() {\n      var _this2 = this;\n\n      this.$store.dispatch('createStream', {\n        name: 'A New Speckle Stream',\n        onlineEditable: true\n      }).then(function (res) {\n        _this2.$router.push(\"/streams/\".concat(res.streamId));\n      }).catch(function (err) {\n        console.error(err);\n      });\n    },\n    createProjectFromSelection: function createProjectFromSelection() {\n      var _this3 = this;\n\n      this.$store.dispatch('createProject', {\n        name: 'Speckle Project',\n        streams: this.selectedStreams.map(function (s) {\n          return s.streamId;\n        })\n      }).then(function (res) {\n        _this3.clearSelection();\n\n        _this3.$router.push(\"/projects/\".concat(res._id));\n      });\n    },\n    togglePermissions: function togglePermissions() {\n      var _this4 = this;\n\n      this.selectedStreams.forEach(function (stream) {\n        _this4.$store.dispatch('updateStream', {\n          streamId: stream.streamId,\n          private: _this4.defaultPermission === 'private' ? true : false\n        });\n      });\n      this.defaultPermission = this.defaultPermission === 'private' ? 'public' : 'private';\n    },\n    deleteStreams: function deleteStreams() {\n      var _this5 = this;\n\n      this.selectedStreams.forEach(function (stream) {\n        _this5.$store.dispatch('updateStream', {\n          streamId: stream.streamId,\n          deleted: true\n        });\n      });\n      this.clearSelection();\n    },\n    updateSearch: debounce(function (e) {\n      this.pageNumber = 0;\n      this.isSearching = false;\n      this.searchfilter = e;\n\n      try {\n        var filters = this.searchfilter.split(' ').map(function (t) {\n          if (t.includes(':')) return {\n            key: t.split(':')[0],\n            value: t.split(':')[1]\n          };else if (!t.includes('public') && !t.includes('private') && !t.includes('mine') && !t.includes('shared')) // TODO: not elegant\n            return {\n              key: 'name',\n              value: t\n            };else return {\n            key: t,\n            value: null\n          };\n        });\n        this.filters = filters;\n      } catch (_unused2) {\n        this.filters = [{\n          key: 'name',\n          value: e\n        }];\n      }\n    }, 1000),\n    selectAll: function selectAll() {\n      var _this6 = this;\n\n      this.paginatedStreams.forEach(function (stream) {\n        var index = _this6.selectedStreams.findIndex(function (s) {\n          return s.streamId === stream.streamId;\n        });\n\n        if (index === -1) {\n          bus.$emit('select-stream', stream.streamId);\n        }\n      });\n    },\n    selectThis: function selectThis(stream) {\n      var index = this.selectedStreams.findIndex(function (s) {\n        return s.streamId === stream.streamId;\n      });\n      if (index === -1) this.selectedStreams.unshift(stream);else this.selectedStreams.splice(index, 1);\n    },\n    clearSelection: function clearSelection() {\n      this.defaultPermission = 'private';\n      bus.$emit('unselect-all');\n    },\n    checkSelection: function checkSelection() {\n      this.selectedStreams = this.selectedStreams.filter(function (s) {\n        return !s.deleted;\n      });\n    }\n  },\n  created: function created() {}\n};",{"version":3,"sources":["Streams.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-container grid-list-xl>\n    <!-- Toolbar for stream selection/bulk operations -->\n    <v-toolbar fixed v-if='selectedStreams.length > 0' style='z-index:100'>\n      <v-toolbar-items>\n        <v-btn icon color='primary' class='md-raised md-dense md-primary' @click.native='clearSelection'>\n          <v-icon>close</v-icon>\n        </v-btn>\n        <v-btn flat @click.native='selectAll()'>select all</v-btn>\n      </v-toolbar-items>\n      <v-spacer></v-spacer>\n      <v-toolbar-items>\n        <v-btn flat color='error' @click.native='deleteStreams'>Archive</v-btn>\n        <v-btn flat @click.native='togglePermissions'>Make {{defaultPermission}}</v-btn>\n        <v-btn flat @click.native='createProjectFromSelection'>Create Project</v-btn>\n      </v-toolbar-items>\n    </v-toolbar>\n    <!-- End toolbar -->\n    <v-layout row wrap>\n      <v-flex xs12 py-5 class='headline font-weight-light'>\n        Streams are the channels your design data flows into.\n      </v-flex>\n      <!-- Empty state handler -->\n      <v-flex xs12 v-if='streams.length === 0'>\n        <p class='title font-weight-light'>\n          👋 Hello {{$store.state.user.name}}! It looks like you haven't created any streams yet. Don't forget to check out the <a href='https://speckle.systems/docs/essentials/start' target='_blank'>guide</a>!\n        </p>\n      </v-flex>\n      <v-flex xs12>\n        <v-text-field solo clearable :xxxhint='searchHint' label=\"Search for a stream\" prepend-inner-icon=\"search\" @input=\"updateSearch\" spellcheck=\"false\" v-model='searchfilter' :loading='isSearching' append-icon=\"refresh\" @click:append=\"$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\"></v-text-field>\n        <!--       <p class='caption'>\n          How to search for things?\n        </p> -->\n        <div v-if='searchfilter && searchfilter!==\"\"'>\n          <p class='title font-weight-light my-3 mx-1'>Found {{filteredStreams.length}} streams matching your search criteria.</p>\n        </div>\n        <!--       </v-flex>\n      <v-flex xs12> -->\n        <v-expansion-panel>\n          <v-expansion-panel-content>\n            <template v-slot:header>Search Options</template>\n            <v-card class='pa-3'>\n              <v-expansion-panel>\n                <v-expansion-panel-content>\n                  <template v-slot:header>Tags</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='tag in allTags' :key='tag' small dense @click='addSearchQuery(\"tag\", tag)'>\n                      {{tag}}\n                    </v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n                <!-- <v-expansion-panel> -->\n                <v-expansion-panel-content>\n                  <template v-slot:header>Job Numbers</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='jnumber in allJobNumbers' :key='jnumber' @click='addSearchQuery(\"jn\", jnumber)'>{{jnumber}}</v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n              </v-expansion-panel>\n            </v-card>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n        <!-- {{allTags}} -->\n      </v-flex>\n    </v-layout>\n    <!-- All the stream cards will flow below -->\n    <v-layout row wrap>\n      <!-- Pagination top (TODO: extract to component) -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredStreams.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredStreams.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n      <!-- The actual stream cards -->\n      <v-flex xs12 sm6 v-for='stream in paginatedStreams' :key='stream._id'>\n        <stream-card :stream='stream' v-on:selected='selectThis' v-on:deleted='clearSelection'></stream-card>\n      </v-flex>\n      <!-- Pagination bottom  -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredStreams.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredStreams.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n    </v-layout>\n    <!-- Big fat fab button to create a new stream -->\n    <v-btn color=\"primary\" dark fixed large bottom right fab @click.native='createStream'>\n      <v-icon>add</v-icon>\n    </v-btn>\n  </v-container>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport StreamCard from '../components/StreamCard.vue'\n\nexport default {\n  name: 'StreamsView',\n  components: { StreamCard },\n  computed: {\n    allTags( ) {\n      return this.$store.getters.allStreamTags\n    },\n    allJobNumbers( ) {\n      return this.$store.getters.allJobNumbersStreams\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( stream => stream.parent == null && stream.deleted === false ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    filteredStreams( ) {\n      return this.$store.getters.filteredResources( this.filters )\n    },\n    paginatedStreams( ) {\n      // return this.filteredStreams.slice( this.startIndex, this.endIndex )\n      return this.filteredStreams.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    },\n  },\n  data( ) {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedStreams: [ ],\n      searchfilter: '',\n      filters: [ ],\n      defaultPermission: 'private',\n      isSearching: false,\n      searchHint: `You can restrict your search to the stream's id by prepending id:{your stream id}, similarly for name, tags etc.`\n    }\n  },\n  watch: {\n    searchfilter( ) {\n      this.isSearching = true\n    },\n    selectedStreams( ) {\n      let priv = 0,\n        pub = 0\n      this.selectedStreams.forEach( s => {\n        if ( s.private ) priv++\n        else pub++\n      } )\n      this.defaultPermission = priv > pub ? 'public' : 'private'\n    }\n  },\n  methods: {\n    addSearchQuery( key, tag ) {\n      this.pageNumber = 0\n      let tempFilter = `${key}:${tag}`\n      this.searchfilter = tempFilter\n      setTimeout( ( ) => { this.isSearching = false }, 50 )\n      try {\n        let filters = tempFilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n      this.isSearching = false\n    },\n    createStream( ) {\n      this.$store.dispatch( 'createStream', { name: 'A New Speckle Stream', onlineEditable: true } )\n        .then( res => {\n          this.$router.push( `/streams/${res.streamId}` )\n        } )\n        .catch( err => {\n          console.error( err )\n        } )\n    },\n    createProjectFromSelection( ) {\n      this.$store.dispatch( 'createProject', { name: 'Speckle Project', streams: this.selectedStreams.map( s => s.streamId ) } )\n        .then( res => {\n          this.clearSelection( )\n          this.$router.push( `/projects/${res._id}` )\n        } )\n    },\n    togglePermissions( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, private: this.defaultPermission === 'private' ? true : false } )\n      } )\n      this.defaultPermission = this.defaultPermission === 'private' ? 'public' : 'private'\n    },\n    deleteStreams( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, deleted: true } )\n      } )\n      this.clearSelection( )\n    },\n    updateSearch: debounce( function ( e ) {\n      this.pageNumber = 0\n      this.isSearching = false\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n    selectAll( ) {\n      this.paginatedStreams.forEach( stream => {\n        let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n        if ( index === -1 ) {\n          bus.$emit( 'select-stream', stream.streamId )\n        }\n      } )\n    },\n    selectThis( stream ) {\n      let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n      if ( index === -1 )\n        this.selectedStreams.unshift( stream )\n      else\n        this.selectedStreams.splice( index, 1 )\n    },\n    clearSelection( ) {\n      this.defaultPermission = 'private'\n      bus.$emit( 'unselect-all' )\n    },\n    checkSelection( ) {\n      this.selectedStreams = this.selectedStreams.filter( s => !s.deleted )\n    }\n  },\n  created( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"],"sourceRoot":"src/views"}]}