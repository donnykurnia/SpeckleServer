{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ClientGraph.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ClientGraph.vue","mtime":1609071089406},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/es6.array.sort\";\nimport _Array$isArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/array/is-array\";\nimport _Object$keys from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/keys\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _toConsumableArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.function.name\";\nimport _Set from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/set\";\nimport _Array$from from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/array/from\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport ForceDirectedLayout from \"./ForceDirectedLayout.vue\";\nimport VueSlider from \"vue-slider-component\";\nimport axios from \"axios\";\nimport Vue from \"vue\";\nimport AsyncComputed from \"vue-async-computed\";\nimport svgtopng from \"save-svg-as-png\";\nimport ParCoords from 'parcoord-es';\nVue.use(AsyncComputed);\nexport default {\n  name: \"ClientGraph\",\n  components: {\n    ForceDirectedLayout: ForceDirectedLayout,\n    VueSlider: VueSlider\n  },\n  props: {\n    project: Object\n  },\n  data: function data() {\n    return {\n      edgesdisplay: [{\n        title: \"Line\"\n      }, {\n        title: \"Arc\"\n      }, {\n        title: \"Diagonal Horizontal\"\n      }, {\n        title: \"Diagonal Vertical\"\n      }, {\n        title: \"Diagonal Smart\"\n      }],\n      graphlayout: [{\n        title: \"Free\"\n      }, {\n        title: \"Horizontal\"\n      }, {\n        title: \"Vertical\"\n      }],\n      friends: null,\n      dialog: false,\n      brush: true,\n      switchForce: false,\n      documentLinksForce: -50,\n      toggleFix: false,\n      dates: [],\n      sliderValue: [],\n      linearcs: false,\n      showDocGroups: true,\n      redrawToggle: true,\n      result: null,\n      inspectTimeframe: true,\n      inspectSelectedTags: true,\n      sortedNodesByCreationDate: null,\n      svgHeight: 700,\n      filteredResult: null,\n      filteredTime: null,\n      dateMinMax: [],\n      allStreamTags: [],\n      allStreamTagsJSON: [],\n      allStreamTagsJSON_default: [],\n      isUpdating: false,\n      streamsInTimeFrame: [],\n      taggedStreams: [],\n      focus: false,\n      selectedEdgesDisplay: \"Diagonal Horizontal\",\n      selectedGraphLayout: \"Horizontal\",\n      parcoords: null,\n      all_userInfo: [],\n      all_userCode: [],\n      all_streamTags: [],\n      all_streamCreatedAt: [],\n      all_streamUpdatedAt: [],\n      parcoords_rawData: [],\n      parcoords_permut_data: [],\n      parcoords_selstreams: [],\n      parcoords_nodupdata: []\n    };\n  },\n  computed: {\n    toggle_multiple: function toggle_multiple() {\n      if (this.switchForce) {\n        return [2];\n      }\n\n      if (!this.switchForce) {\n        return [1];\n      } else {\n        return [1, 2];\n      }\n    }\n  },\n  watch: {\n    selectedGraphLayout: function selectedGraphLayout() {\n      if (this.selectedGraphLayout == \"Free\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Smart\";\n      }\n\n      if (this.selectedGraphLayout == \"Horizontal\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Horizontal\";\n      }\n\n      if (this.selectedGraphLayout == \"Vertical\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Vertical\";\n      }\n    },\n    sliderValue: function sliderValue() {\n      this.filteredTime = this.sliderValue.map(function (d) {\n        return new Date(d).toISOString();\n      });\n    },\n    isUpdating: function isUpdating(val) {\n      var _this = this;\n\n      if (val) {\n        setTimeout(function () {\n          return _this.isUpdating = false;\n        }, 3000);\n      }\n    }\n  },\n  methods: {\n    redrawParcoords: function redrawParcoords() {\n      this.$data.parcoords_selstreams = [];\n      var context = this;\n      var parcoords = ParCoords()(\"#example\").data(context.$data.parcoords_nodupdata).render().createAxes().reorderable().brushMode(\"1D-axes-multi\");\n      parcoords.on('brushend', function (brushed, args) {\n        context.$data.parcoords_selstreams = _Array$from(new _Set(brushed.map(function (e) {\n          return e.stream_id;\n        })));\n      });\n    },\n    triggeredTimeFrame: function triggeredTimeFrame(val) {\n      this.streamsInTimeFrame = val;\n    },\n    triggeredTags: function triggeredTags(val) {\n      this.taggedStreams = val;\n    },\n    remove: function remove(item) {\n      var index = this.allStreamTagsJSON_default.indexOf(item.name);\n      if (index >= 0) this.allStreamTagsJSON_default.splice(index, 1);\n    },\n    flatten: function flatten(arr) {\n      var flat = [];\n\n      for (var i = 0; i < arr.length; i++) {\n        flat = flat.concat(arr[i]);\n      }\n\n      return flat;\n    },\n    collapseDocuments: function collapseDocuments() {\n      this.documentLinksForce = this.documentLinksForce - 10;\n    },\n    expandDocuments: function expandDocuments() {\n      this.documentLinksForce = this.documentLinksForce + 10;\n    },\n    getMin: function getMin() {\n      var createdAts = this.sortedNodesByCreationDate.map(function (d) {\n        return d.createdAt;\n      });\n      return createdAts[this.value3[0]];\n    },\n    getMax: function getMax() {\n      var createdAts = this.sortedNodesByCreationDate.map(function (d) {\n        return d.createdAt;\n      });\n      return createdAts[this.value3[1]];\n    },\n    mounted: function mounted() {},\n    saveAsPNG: function saveAsPNG() {\n      svgtopng.saveSvgAsPng(document.getElementById(\"graphLayout\"), \"diagram.png\", {\n        scale: 3\n      });\n    },\n    refocus: function refocus() {\n      this.$data.focus = !this.$data.focus;\n    },\n    refresh: function refresh() {\n      var _this2 = this;\n\n      this.$asyncComputed.myResolvedValue.update();\n      this.$data.redrawToggle = false;\n      setTimeout(function () {\n        _this2.$data.redrawToggle = true;\n      }, 500);\n    },\n    AddResizeListener: function AddResizeListener() {\n      var _this3 = this;\n\n      //redraw the chart 300ms after the window has been resized\n      var context = this;\n      window.addEventListener(\"resize\", function () {\n        _this3.$data.redrawToggle = false;\n        setTimeout(function () {\n          _this3.$data.redrawToggle = true;\n        }, 1500);\n      });\n    }\n  },\n  updated: function updated() {\n    // this.redrawParcoords()\n    this.AddResizeListener();\n  },\n  asyncComputed: {\n    myResolvedValue: function () {\n      var _myResolvedValue = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2() {\n        var _this4 = this;\n\n        var streamLinks, nodes, resProject, allusersSet, allusers, i, user, resOwner, userInfo, userCode, projectStreams, projectPermissions, alltags, _i, streamShortID, stream_id, resStream, resClient, j, client_id, clientOwnerID, _resOwner, _userInfo, clientCanRead, clientCreatedAt, clientUpdatedAt, clientRole, clientDocumentType, clientDocumentName, clientDocumentID, customName, createdAts, _i2, _j, k, l, index_canRead, index_canWrite, index_owner, parcoord_permut, context, parcoords;\n\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.toggleFix = false;\n                streamLinks = [];\n                nodes = [];\n                _context2.prev = 3;\n                _context2.next = 6;\n                return axios.get(\"\".concat(this.$store.state.server, \"/projects/\").concat(this.project._id));\n\n              case 6:\n                resProject = _context2.sent;\n                _context2.next = 13;\n                break;\n\n              case 9:\n                _context2.prev = 9;\n                _context2.t0 = _context2[\"catch\"](3);\n                console.log(_context2.t0);\n                return _context2.abrupt(\"return\");\n\n              case 13:\n                allusersSet = new _Set([resProject.data.resource.owner, resProject.data.resource.canRead, resProject.data.resource.canWrite]);\n                allusers = _toConsumableArray(allusersSet).flat();\n                allusers = _toConsumableArray(new _Set(allusers)); //this.$data.all_userInfo = allusers\n\n                i = 0;\n\n              case 17:\n                if (!(i < allusers.length)) {\n                  _context2.next = 36;\n                  break;\n                }\n\n                user = allusers[i];\n                resOwner = void 0;\n                _context2.prev = 20;\n                _context2.next = 23;\n                return axios.get(\"\".concat(this.$store.state.server, \"/accounts/\").concat(user));\n\n              case 23:\n                resOwner = _context2.sent;\n                _context2.next = 29;\n                break;\n\n              case 26:\n                _context2.prev = 26;\n                _context2.t1 = _context2[\"catch\"](20);\n                console.log(\"Can't access user info\");\n\n              case 29:\n                userInfo = resOwner.data.resource; //console.log(userInfo)\n\n                userCode = \"\".concat(userInfo.name, \" \").concat(userInfo.surname, \" @ \").concat(userInfo.company);\n                this.$data.all_userCode.push(userCode);\n                this.$data.all_userInfo.push(userInfo);\n\n              case 33:\n                i++;\n                _context2.next = 17;\n                break;\n\n              case 36:\n                projectStreams = resProject.data.resource.streams;\n                projectPermissions = resProject.data.resource.permissions;\n                alltags = [];\n                _i = 0;\n\n              case 40:\n                if (!(_i < projectStreams.length)) {\n                  _context2.next = 94;\n                  break;\n                }\n\n                streamShortID = projectStreams[_i];\n                stream_id = void 0;\n                resStream = void 0;\n                _context2.prev = 44;\n                return _context2.delegateYield(\n                /*#__PURE__*/\n                regeneratorRuntime.mark(function _callee() {\n                  var streamOwnerID, resOwner, userInfo, streamCanRead, streamCanWrite, streamCreatedAt, streamUpdatedAt, streamName, streamTags, objectsNumber, units, tolerance, rawData, j;\n                  return regeneratorRuntime.wrap(function _callee$(_context) {\n                    while (1) {\n                      switch (_context.prev = _context.next) {\n                        case 0:\n                          _context.next = 2;\n                          return axios.get(\"\".concat(_this4.$store.state.server, \"/streams/\").concat(streamShortID));\n\n                        case 2:\n                          resStream = _context.sent;\n                          streamOwnerID = resStream.data.resource.owner;\n                          resOwner = void 0;\n                          _context.prev = 5;\n                          _context.next = 8;\n                          return axios.get(\"\".concat(_this4.$store.state.server, \"/accounts/\").concat(streamOwnerID));\n\n                        case 8:\n                          resOwner = _context.sent;\n                          _context.next = 14;\n                          break;\n\n                        case 11:\n                          _context.prev = 11;\n                          _context.t0 = _context[\"catch\"](5);\n                          console.log(\"Can't access user info\");\n\n                        case 14:\n                          userInfo = resOwner.data.resource;\n                          stream_id = resStream.data.resource._id;\n                          streamCanRead = resStream.data.resource.canRead;\n                          streamCanWrite = resStream.data.resource.canWrite;\n                          streamCreatedAt = resStream.data.resource.createdAt;\n                          streamUpdatedAt = resStream.data.resource.updatedAt;\n                          streamName = resStream.data.resource.name;\n                          streamTags = resStream.data.resource.tags;\n                          objectsNumber = resStream.data.resource.objects.length;\n                          units = resStream.data.resource.baseProperties.units;\n                          tolerance = resStream.data.resource.baseProperties.tolerance;\n                          rawData = {\n                            stream_id: stream_id,\n                            canRead: streamCanRead,\n                            canWrite: streamCanWrite,\n                            tags: streamTags,\n                            objNum: objectsNumber,\n                            owner: streamOwnerID,\n                            createdAt: new Date(streamCreatedAt).toLocaleString(\"en-GB\"),\n                            updatedAt: new Date(streamUpdatedAt).toLocaleString(\"en-GB\"),\n                            units: units,\n                            tol: tolerance // handles empty array exception\n\n                          };\n\n                          _Object$keys(rawData).forEach(function (key, i) {\n                            if (_Array$isArray(rawData[key]) && rawData[key].length < 1) {\n                              rawData[key] = [\"undefined\"];\n                            }\n                          });\n\n                          _this4.$data.parcoords_rawData.push(rawData);\n\n                          for (j = 0; j < streamTags.length; j++) {\n                            _this4.$data.allStreamTagsJSON.push({\n                              name: streamTags[j]\n                            });\n                          }\n\n                          alltags.push(streamTags);\n                          nodes.push({\n                            type: \"Stream\",\n                            _id: stream_id,\n                            streamId: streamShortID,\n                            owner: streamOwnerID,\n                            createdAt: streamCreatedAt,\n                            updatedAt: streamUpdatedAt,\n                            size: \"10\",\n                            objectsNumber: objectsNumber,\n                            name: \"\".concat(streamName),\n                            tags: streamTags,\n                            canRead: streamCanRead,\n                            canWrite: streamCanWrite,\n                            units: units,\n                            tolerance: tolerance\n                          });\n\n                        case 31:\n                        case \"end\":\n                          return _context.stop();\n                      }\n                    }\n                  }, _callee, null, [[5, 11]]);\n                })(), \"t2\", 46);\n\n              case 46:\n                _context2.next = 51;\n                break;\n\n              case 48:\n                _context2.prev = 48;\n                _context2.t3 = _context2[\"catch\"](44);\n                console.log(\"Can't access stream: \" + streamShortID);\n\n              case 51:\n                //\n                resClient = void 0;\n                _context2.prev = 52;\n                _context2.next = 55;\n                return axios.get(\"\".concat(this.$store.state.server, \"/streams/\").concat(streamShortID, \"/clients\"));\n\n              case 55:\n                resClient = _context2.sent;\n                j = 0;\n\n              case 57:\n                if (!(j < resClient.data.resources.length)) {\n                  _context2.next = 86;\n                  break;\n                }\n\n                client_id = resClient.data.resources[j]._id;\n                clientOwnerID = resClient.data.resources[j].owner;\n                _resOwner = void 0;\n                _context2.prev = 61;\n                _context2.next = 64;\n                return axios.get(\"\".concat(this.$store.state.server, \"/accounts/\").concat(clientOwnerID));\n\n              case 64:\n                _resOwner = _context2.sent;\n                _context2.next = 70;\n                break;\n\n              case 67:\n                _context2.prev = 67;\n                _context2.t4 = _context2[\"catch\"](61);\n                console.log(\"Can't access user info\");\n\n              case 70:\n                _userInfo = _resOwner.data.resource;\n                clientCanRead = resClient.data.resources[j].canRead;\n                clientCreatedAt = resClient.data.resources[j].createdAt;\n                clientUpdatedAt = resClient.data.resources[j].updatedAt;\n                clientRole = resClient.data.resources[j].role;\n                clientDocumentType = resClient.data.resources[j].documentType;\n                clientDocumentName = resClient.data.resources[j].documentName;\n                clientDocumentID = resClient.data.resources[j].documentGuid;\n                customName = \"\";\n\n                if (clientRole == \"Sender\" || clientRole == \"sender\") {\n                  customName = \"\\uD83D\\uDE80\";\n                }\n\n                if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n                  customName = \"\\uD83D\\uDCE1\";\n                }\n\n                nodes.push({\n                  type: \"Client\",\n                  _id: client_id,\n                  owner: clientOwnerID,\n                  userInfo: _userInfo,\n                  createdAt: clientCreatedAt,\n                  updatedAt: clientUpdatedAt,\n                  role: clientRole,\n                  size: \"10\",\n                  documentType: clientDocumentType,\n                  documentName: clientDocumentName,\n                  documentGuid: clientDocumentID,\n                  name: customName // S or R labels for Senders and Receivers\n\n                });\n\n                if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n                  streamLinks.push({\n                    source: stream_id,\n                    target: client_id,\n                    targetClient: client_id,\n                    targetDoc: clientDocumentID,\n                    action: \"receiving\"\n                  });\n                } else if (clientRole == \"Sender\" || clientRole == \"sender\") {\n                  streamLinks.push({\n                    source: client_id,\n                    target: stream_id,\n                    sourceClient: client_id,\n                    sourceDoc: clientDocumentID,\n                    action: \"sending\"\n                  });\n                }\n\n              case 83:\n                j++;\n                _context2.next = 57;\n                break;\n\n              case 86:\n                _context2.next = 91;\n                break;\n\n              case 88:\n                _context2.prev = 88;\n                _context2.t5 = _context2[\"catch\"](52);\n                console.log(\"Can't access stream's client from \" + streamShortID);\n\n              case 91:\n                _i++;\n                _context2.next = 40;\n                break;\n\n              case 94:\n                this.allStreamTags = this.flatten(alltags);\n                this.sortedNodesByCreationDate = nodes;\n                this.sortedNodesByCreationDate.sort(function (a, b) {\n                  return a.createdAt < b.createdAt ? -1 : a.createdAt > b.createdAt ? 1 : 0;\n                });\n                createdAts = this.sortedNodesByCreationDate.map(function (d) {\n                  return d.createdAt;\n                });\n                this.result = [nodes, streamLinks]; //this.value3 = [0,this.result[0].length-1]\n\n                this.dates = createdAts;\n                this.dates = createdAts.map(function (d) {\n                  return new Date(d).toLocaleString(\"en\");\n                });\n                this.dates = _toConsumableArray(new _Set(this.dates));\n                this.sliderValue = [this.dates[0], this.dates[this.dates.length - 1]]; // find all permutations\n\n                for (_i2 = 0; _i2 < this.$data.parcoords_rawData.length; _i2++) {\n                  for (_j = 0; _j < this.$data.parcoords_rawData[_i2].canRead.length; _j++) {\n                    for (k = 0; k < this.$data.parcoords_rawData[_i2].canWrite.length; k++) {\n                      for (l = 0; l < this.$data.parcoords_rawData[_i2].tags.length; l++) {\n                        index_canRead = this.$data.all_userInfo.map(function (e) {\n                          return e._id;\n                        }).indexOf(this.$data.parcoords_rawData[_i2].canRead[_j]);\n                        index_canWrite = this.$data.all_userInfo.map(function (e) {\n                          return e._id;\n                        }).indexOf(this.$data.parcoords_rawData[_i2].canWrite[k]);\n                        index_owner = this.$data.all_userInfo.map(function (e) {\n                          return e._id;\n                        }).indexOf(this.$data.parcoords_rawData[_i2].owner);\n\n                        if (index_canRead == \"-1\" || index_canWrite == \"-1\") {// HANDLE CASE IF MORE USER PERMISSIONS IN STREAMS\n                        } else {\n                          parcoord_permut = {\n                            stream_id: this.$data.parcoords_rawData[_i2].stream_id,\n                            canRead: this.$data.all_userCode[index_canRead].split('@')[0],\n                            canWrite: this.$data.all_userCode[index_canWrite].split('@')[0],\n                            tags: this.$data.parcoords_rawData[_i2].tags[l],\n                            objNum: this.$data.parcoords_rawData[_i2].objNum,\n                            owner: this.$data.all_userCode[index_owner],\n                            \"owner's company\": this.$data.all_userInfo[index_owner].company,\n                            createdAt: this.$data.parcoords_rawData[_i2].createdAt,\n                            updatedAt: this.$data.parcoords_rawData[_i2].updatedAt,\n                            units: this.$data.parcoords_rawData[_i2].units,\n                            tol: this.$data.parcoords_rawData[_i2].tol\n                          };\n                          this.$data.parcoords_permut_data.push(parcoord_permut);\n                        }\n                      }\n                    }\n                  }\n                }\n\n                this.$data.parcoords_nodupdata = _Array$from(new _Set(this.$data.parcoords_permut_data));\n                context = this;\n                parcoords = ParCoords()(\"#example\").data(context.$data.parcoords_nodupdata).render().createAxes().reorderable().brushMode(\"1D-axes-multi\");\n                parcoords.on('brushend', function (brushed, args) {\n                  context.$data.parcoords_selstreams = _Array$from(new _Set(brushed.map(function (e) {\n                    return e.stream_id;\n                  })));\n                });\n                return _context2.abrupt(\"return\", [nodes, streamLinks]);\n\n              case 109:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 9], [20, 26], [44, 48], [52, 88], [61, 67]]);\n      }));\n\n      function myResolvedValue() {\n        return _myResolvedValue.apply(this, arguments);\n      }\n\n      return myResolvedValue;\n    }()\n  }\n};",{"version":3,"sources":["ClientGraph.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-card class=\"elevation-0\">\n    <v-card-title class='title font-weight-light'>\n      <div align=\"center\">\n      <v-icon small left>import_export</v-icon>&nbsp;\n      <b>SpeckleViz&trade;</b>&nbsp;\n      <v-btn class=\"ml-6\" round href=\"https://speckle.systems/docs/web/speckleviz/\" target=\"_blank\">\n        <v-icon left>help_outline</v-icon>\n        need help? read the docs\n        <v-icon right>arrow_right_alt</v-icon>\n      </v-btn>\n      </div>\n  \n    </v-card-title>\n    <v-container fluid>\n      <v-layout>\n        <v-toolbar>\n          <v-switch class=\"custom-switch\" v-model=\"switchForce\" color=\"blue lighten-2\" hide-details>\n            <template v-slot:label>\n              <v-chip outline>\n                Data flow per&nbsp;\n                <v-icon v-if=\"switchForce\">supervised_user_circle</v-icon>\n                <v-icon v-if=\"!switchForce\">folder</v-icon>\n              </v-chip>\n            </template>\n          </v-switch>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"refresh()\" v-on=\"on\">\n                <v-icon>refresh</v-icon>\n              </v-btn>\n            </template>\n            <span>Refresh</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"saveAsPNG()\" v-on=\"on\">\n                <v-icon>save_alt</v-icon>\n              </v-btn>\n            </template>\n            <span>Save as PNG</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"toggleFix = !toggleFix\" v-on=\"on\" v-model=\"toggleFix\">\n                <v-icon v-if=\"!toggleFix\">center_focus_weak</v-icon>\n                <v-icon v-if=\"toggleFix\">filter_center_focus</v-icon>\n              </v-btn>\n            </template>\n            <span>Fix/Release the graph</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"refocus()\" v-on=\"on\">\n                <v-icon>gps_fixed</v-icon>\n              </v-btn>\n            </template>\n            <span>Recenter focus</span>\n          </v-tooltip>\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn small v-on=\"on\">Edges Display</v-btn>\n            </template>\n            <v-list>\n              <v-list-tile\n                v-for=\"(item, index) in edgesdisplay\"\n                :key=\"index\"\n                @click=\"selectedEdgesDisplay = item.title\"\n              >\n                <v-list-tile-title>\n                  <b v-if=\"item.title==selectedEdgesDisplay\">{{item.title}}</b>\n                  <span v-else class=\"font-weight-light\">{{item.title}}</span>\n                </v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn small v-on=\"on\">Graph Layout</v-btn>\n            </template>\n            <v-list>\n              <v-list-tile\n                v-for=\"(item, index) in graphlayout\"\n                :key=\"index\"\n                @click=\"selectedGraphLayout = item.title; refresh()\"\n              >\n                <v-list-tile-title>\n                  <b v-if=\"item.title==selectedGraphLayout\">{{item.title}}</b>\n                  <span v-else class=\"font-weight-light\">{{item.title}}</span>\n                </v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          <v-slider\n            v-model=\"documentLinksForce\"\n            always-dirty\n            :thumb-size=\"24\"\n            color=\"grey darken-1\"\n            append-icon=\"zoom_out_map\"\n            prepend-icon=\"group_work\"\n            @click:append=\"expandDocuments\"\n            @click:prepend=\"collapseDocuments\"\n            :max=\"300\"\n            :min=\"-50\"\n            hide-details\n            label\n          ></v-slider>\n        </v-toolbar>\n      </v-layout>\n      <v-divider class=\"ml-2\" vertical></v-divider>\n      <br />\n      <br />\n      <vue-slider\n        ref=\"timeSlider\"\n        :data=\"dates\"\n        v-model=\"sliderValue\"\n        process-dragable\n        :piecewise-label=\"dates.length < 5 ? true : false\"\n        xxxwidth=\"100%\"\n        xxxstyle=\"margin-left:10%\"\n        :tooltipStyle=\"{ 'font-size':'11px' }\"\n        v-if=\"dates.length>0\"\n      ></vue-slider>\n      <span\n        class=\"font-weight-light caption\"\n      >Drag this slider to select and highlight a specific timeframe from your project!</span>\n      <v-tooltip bottom>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn icon @click=\"inspectTimeframe = !inspectTimeframe\" v-on=\"on\">\n            <v-badge top>\n              <span slot=\"badge\" v-if=\"streamsInTimeFrame.length\">{{streamsInTimeFrame.length}}</span>\n              <v-icon>360</v-icon>\n            </v-badge>\n          </v-btn>\n        </template>\n        <span>Inspect the timeframe</span>\n      </v-tooltip>\n      <v-autocomplete\n        v-model=\"allStreamTagsJSON_default\"\n        :items=\"allStreamTagsJSON\"\n        filled\n        chips\n        label=\"Select streams by tag(s)\"\n        item-text=\"name\"\n        item-value=\"name\"\n        multiple\n        prepend-icon=\"search\"\n        dense\n        item-color=\"black\"\n      >\n        <template v-slot:selection=\"data\">\n          <v-chip\n            outline\n            :selected=\"data.selected\"\n            close\n            class=\"chip--select-multi\"\n            @input=\"remove(data.item)\"\n          >{{ data.item.name }}</v-chip>\n        </template>\n        <template v-slot:item=\"data\">\n          <template v-if=\"typeof data.item !== 'object'\">\n            <v-list-tile-content v-text=\"data.item.name\"></v-list-tile-content>\n          </template>\n          <template v-else>\n            <v-list-tile-content>\n              <v-list-tile-title v-html=\"data.item.name\"></v-list-tile-title>\n            </v-list-tile-content>\n          </template>\n        </template>\n        <template v-slot:append-outer>\n          <v-slide-x-reverse-transition mode=\"out-in\">\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on }\">\n                <v-btn icon @click=\"inspectSelectedTags = !inspectSelectedTags\" v-on=\"on\">\n                  <v-badge top color=\"cyan\">\n                    <span slot=\"badge\" v-if=\"taggedStreams.length\">{{taggedStreams.length}}</span>\n                    <v-icon>360</v-icon>\n                  </v-badge>\n                </v-btn>\n              </template>\n              <span>Inspect the tagged streams</span>\n            </v-tooltip>\n          </v-slide-x-reverse-transition>\n        </template>\n      </v-autocomplete>\n      \n    </v-container>\n    <!-- END OF TOOLBAR / SVG CANVAS STARTS HERE -->\n    <div id=\"appClientGraph\">\n      <svg v-if=\"!redrawToggle || !result\" width=\"100%\" :height=\"svgHeight\" />\n      <ForceDirectedLayout\n        v-if=\"result && redrawToggle\"\n        :svgHeight=\"svgHeight\"\n        :showDocGroups=\"toggle_multiple\"\n        :clientdata=\"result\"\n        :clientdatafilter=\"filteredResult\"\n        :timeFilter=\"filteredTime\"\n        :toggleFix=\"toggleFix\"\n        :documentLinksForce=\"documentLinksForce\"\n        :switchForce=\"switchForce\"\n        :linearcs=\"linearcs\"\n        :brush=\"brush\"\n        :inspectTimeframe=\"inspectTimeframe\"\n        :inspectSelectedTags=\"inspectSelectedTags\"\n        :streamTags=\"allStreamTagsJSON_default\"\n        :refocus=\"focus\"\n        :selectedEdgesDisplay=\"selectedEdgesDisplay\"\n        :selectedGraphLayout=\"selectedGraphLayout\"\n        @triggeredTimeFrame=\"triggeredTimeFrame\"\n        @triggeredTags=\"triggeredTags\"\n        :parcoords_selstreams=\"parcoords_selstreams\"\n      />\n    </div>\n  </v-card>\n</template>\n\n\n<script>\nimport ForceDirectedLayout from \"./ForceDirectedLayout.vue\"\nimport VueSlider from \"vue-slider-component\"\nimport axios from \"axios\"\nimport Vue from \"vue\"\nimport AsyncComputed from \"vue-async-computed\"\nimport svgtopng from \"save-svg-as-png\"\nimport ParCoords from 'parcoord-es'\n\nVue.use(AsyncComputed)\n\nexport default {\n  name: \"ClientGraph\",\n  components: {\n    ForceDirectedLayout,\n    VueSlider\n  },\n  props: {\n    project: Object\n  },\n  data: () => ({\n    edgesdisplay: [\n      { title: \"Line\" },\n      { title: \"Arc\" },\n      { title: \"Diagonal Horizontal\" },\n      { title: \"Diagonal Vertical\" },\n      { title: \"Diagonal Smart\" }\n    ],\n\n    graphlayout: [\n      { title: \"Free\" },\n      { title: \"Horizontal\" },\n      { title: \"Vertical\" }\n    ],\n\n    friends: null,\n    dialog: false,\n    brush: true,\n    switchForce: false,\n    documentLinksForce: -50,\n    toggleFix: false,\n    dates: [],\n    sliderValue: [],\n    linearcs: false,\n    showDocGroups: true,\n    redrawToggle: true,\n    result: null,\n    inspectTimeframe: true,\n    inspectSelectedTags: true,\n    sortedNodesByCreationDate: null,\n    svgHeight: 700,\n    filteredResult: null,\n    filteredTime: null,\n    dateMinMax: [],\n    allStreamTags: [],\n    allStreamTagsJSON: [],\n    allStreamTagsJSON_default: [],\n    isUpdating: false,\n    streamsInTimeFrame: [],\n    taggedStreams: [],\n    focus: false,\n    selectedEdgesDisplay: \"Diagonal Horizontal\",\n    selectedGraphLayout: \"Horizontal\",\n    parcoords: null,\n    all_userInfo: [],\n    all_userCode: [],\n    all_streamTags: [],\n    all_streamCreatedAt: [],\n    all_streamUpdatedAt: [],\n    parcoords_rawData: [],\n    parcoords_permut_data: [],\n    parcoords_selstreams: [],\n    parcoords_nodupdata: []\n  }),\n  computed: {\n    toggle_multiple: function() {\n      if (this.switchForce) {\n        return [2]\n      }\n      if (!this.switchForce) {\n        return [1]\n      } else {\n        return [1, 2]\n      }\n    }\n  },\n\n  watch: {\n    selectedGraphLayout: function() {\n      if (this.selectedGraphLayout == \"Free\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Smart\"\n      }\n      if (this.selectedGraphLayout == \"Horizontal\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Horizontal\"\n      }\n      if (this.selectedGraphLayout == \"Vertical\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Vertical\"\n      }\n    },\n    sliderValue: function() {\n      \n      this.filteredTime = this.sliderValue.map(d => new Date(d).toISOString())\n    },\n\n    isUpdating(val) {\n      if (val) {\n        setTimeout(() => (this.isUpdating = false), 3000)\n      }\n    }\n  },\n\n  methods: {\n    redrawParcoords(){\n      this.$data.parcoords_selstreams = []\n      let context = this\n      let parcoords = ParCoords()(\"#example\")\n          .data(\n          context.$data.parcoords_nodupdata\n          )\n          .render()\n          .createAxes()\n          .reorderable()\n          .brushMode(\"1D-axes-multi\")\n          parcoords.on('brushend', function(brushed, args){\n          context.$data.parcoords_selstreams = Array.from(new Set(brushed.map(e => e.stream_id)))\n      })\n    },\n    triggeredTimeFrame(val) {\n      this.streamsInTimeFrame = val \n    },\n    triggeredTags(val) {\n      this.taggedStreams = val \n    },\n\n    remove(item) {\n      const index = this.allStreamTagsJSON_default.indexOf(item.name) \n      if (index >= 0) this.allStreamTagsJSON_default.splice(index, 1) \n    },\n\n    flatten(arr) {\n      let flat = [] \n      for (let i = 0; i < arr.length; i++) {\n        flat = flat.concat(arr[i])\n      }\n      return flat\n    },\n    collapseDocuments() {\n      this.documentLinksForce = this.documentLinksForce - 10 \n    },\n    expandDocuments() {\n      this.documentLinksForce = this.documentLinksForce + 10 \n    },\n    getMin() {\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n      return createdAts[this.value3[0]] \n    },\n    getMax() {\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n      return createdAts[this.value3[1]] \n    },\n    mounted() {\n\n      \n\n    },\n    saveAsPNG() {\n      svgtopng.saveSvgAsPng(\n        document.getElementById(\"graphLayout\"),\n        \"diagram.png\",\n        { scale: 3 }\n      ) \n    },\n    refocus() {\n      this.$data.focus = !this.$data.focus \n    },\n    refresh() {\n      this.$asyncComputed.myResolvedValue.update() \n      this.$data.redrawToggle = false \n      setTimeout(() => {\n        this.$data.redrawToggle = true \n      }, 500) \n    },\n    AddResizeListener() {\n      //redraw the chart 300ms after the window has been resized\n      let context = this\n      window.addEventListener(\"resize\", () => {\n        this.$data.redrawToggle = false \n          \n\n        setTimeout(() => {\n          this.$data.redrawToggle = true \n        }, 1500) \n        \n      }) \n    }\n  },\n  updated() {\n    // this.redrawParcoords()\n    this.AddResizeListener()\n  },\n  asyncComputed: {\n    async myResolvedValue() {\n      this.toggleFix = false \n      let streamLinks = [] \n      let nodes = [] \n\n      let resProject \n      try {\n        resProject = await axios.get(\n          `${this.$store.state.server}/projects/${this.project._id}`\n        ) \n      } catch (err) {\n        console.log(err) \n        return \n      }\n      \n      let allusersSet = new Set([resProject.data.resource.owner, resProject.data.resource.canRead, resProject.data.resource.canWrite])\n      let allusers = [...allusersSet].flat()\n      allusers = [...new Set(allusers)]\n      //this.$data.all_userInfo = allusers\n      \n      \n      for (let i = 0; i < allusers.length; i++) {   \n          let user = allusers[i]\n          let resOwner\n          try {\n            resOwner = await axios.get(\n              `${this.$store.state.server}/accounts/${user}`\n            )\n          }catch (error) {\n            console.log(\"Can't access user info\") \n          }\n          let userInfo = resOwner.data.resource \n          //console.log(userInfo)\n\n          let userCode = `${userInfo.name} ${userInfo.surname} @ ${userInfo.company}`\n          this.$data.all_userCode.push(userCode)\n          this.$data.all_userInfo.push(userInfo)\n      }\n\n      let projectStreams = resProject.data.resource.streams \n      let projectPermissions = resProject.data.resource.permissions \n\n      let alltags = [] \n      for (let i = 0; i < projectStreams.length; i++) {\n        let streamShortID = projectStreams[i] \n        let stream_id \n        let resStream \n\n        try {\n          resStream = await axios.get(\n            `${this.$store.state.server}/streams/${streamShortID}`\n          ) \n\n\n          let streamOwnerID = resStream.data.resource.owner \n          let resOwner\n          try {\n            resOwner = await axios.get(\n              `${this.$store.state.server}/accounts/${streamOwnerID}`\n            )\n          }catch (error) {\n            console.log(\"Can't access user info\") \n          }\n          let userInfo = resOwner.data.resource\n\n\n          stream_id = resStream.data.resource._id\n          let streamCanRead = resStream.data.resource.canRead\n          let streamCanWrite = resStream.data.resource.canWrite\n          let streamCreatedAt = resStream.data.resource.createdAt\n          let streamUpdatedAt = resStream.data.resource.updatedAt\n          let streamName = resStream.data.resource.name\n          let streamTags = resStream.data.resource.tags\n          let objectsNumber = resStream.data.resource.objects.length\n          let units = resStream.data.resource.baseProperties.units\n          let tolerance = resStream.data.resource.baseProperties.tolerance\n          \n\n          let rawData = {stream_id: stream_id, canRead: streamCanRead, canWrite: streamCanWrite, tags: streamTags, objNum: objectsNumber, owner: streamOwnerID, createdAt: new Date(streamCreatedAt).toLocaleString(\"en-GB\"), updatedAt: new Date(streamUpdatedAt).toLocaleString(\"en-GB\"), units: units, tol: tolerance}\n\n          // handles empty array exception\n          Object.keys(rawData).forEach((key,i) => \n            {if(Array.isArray(rawData[key]) && (rawData[key].length < 1)){\n              rawData[key] = [\"undefined\"]\n            }\n          })\n\n          this.$data.parcoords_rawData.push(rawData)\n\n          for (let j = 0; j < streamTags.length; j++) {\n            this.$data.allStreamTagsJSON.push({ name: streamTags[j] })\n          }\n          alltags.push(streamTags) \n\n          nodes.push({\n            type: \"Stream\",\n            _id: stream_id,\n            streamId: streamShortID,\n            owner: streamOwnerID,\n            createdAt: streamCreatedAt,\n            updatedAt: streamUpdatedAt,\n            size: \"10\",\n            objectsNumber: objectsNumber,\n            name: `${streamName}`,\n            tags: streamTags,\n            canRead: streamCanRead,\n            canWrite: streamCanWrite,\n            units: units,\n            tolerance: tolerance\n          }) \n        } catch (error) {\n          console.log(\"Can't access stream: \" + streamShortID)\n        }\n\n        //\n        let resClient \n        try {\n          resClient = await axios.get(\n            `${this.$store.state.server}/streams/${streamShortID}/clients`\n          )\n\n          for (let j = 0; j < resClient.data.resources.length; j++) {\n            let client_id = resClient.data.resources[j]._id \n            let clientOwnerID = resClient.data.resources[j].owner \n            \n            let resOwner\n            try {\n              resOwner = await axios.get(\n                `${this.$store.state.server}/accounts/${clientOwnerID}`\n              )\n            }catch (error) {\n              console.log(\"Can't access user info\") \n            }\n\n            \n            let userInfo = resOwner.data.resource\n            let clientCanRead = resClient.data.resources[j].canRead \n            let clientCreatedAt = resClient.data.resources[j].createdAt \n            let clientUpdatedAt = resClient.data.resources[j].updatedAt \n            let clientRole = resClient.data.resources[j].role \n            let clientDocumentType = resClient.data.resources[j].documentType \n            let clientDocumentName = resClient.data.resources[j].documentName \n            let clientDocumentID = resClient.data.resources[j].documentGuid \n            let customName = `` \n\n            if (clientRole == \"Sender\" || clientRole == \"sender\") {\n              customName = `🚀` \n            }\n            if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n              customName = `📡` \n            }\n\n            nodes.push({\n              type: \"Client\",\n              _id: client_id,\n              owner: clientOwnerID,\n              userInfo: userInfo,\n              createdAt: clientCreatedAt,\n              updatedAt: clientUpdatedAt,\n              role: clientRole,\n              size: \"10\",\n              documentType: clientDocumentType,\n              documentName: clientDocumentName,\n              documentGuid: clientDocumentID,\n              name: customName // S or R labels for Senders and Receivers\n            }) \n            \n\n            if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n              streamLinks.push({\n                source: stream_id,\n                target: client_id,\n\n                targetClient: client_id,\n                targetDoc: clientDocumentID,\n                action: \"receiving\"\n              }) \n            } else if (clientRole == \"Sender\" || clientRole == \"sender\") {\n              streamLinks.push({\n                source: client_id,\n                target: stream_id,\n\n                sourceClient: client_id,\n                sourceDoc: clientDocumentID,\n                action: \"sending\"\n              }) \n            }\n          }\n        } catch (error) {\n          console.log(\"Can't access stream's client from \" + streamShortID) \n        }\n      }\n\n\n      this.allStreamTags = this.flatten(alltags) \n      this.sortedNodesByCreationDate = nodes \n      this.sortedNodesByCreationDate.sort(function(a, b) {\n        return a.createdAt < b.createdAt\n          ? -1\n          : a.createdAt > b.createdAt\n          ? 1\n          : 0 \n      }) \n\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n\n      this.result = [nodes, streamLinks] \n      //this.value3 = [0,this.result[0].length-1]\n      this.dates = createdAts \n      this.dates = createdAts.map(d => new Date(d).toLocaleString(\"en\")) \n      this.dates = [...new Set(this.dates)]\n\n      \n      this.sliderValue = [this.dates[0], this.dates[this.dates.length - 1]] \n\n\n      // find all permutations\n      for (let i = 0; i < this.$data.parcoords_rawData.length; i++) {\n        for(let j = 0; j < this.$data.parcoords_rawData[i].canRead.length; j++){\n          for(let k = 0; k < this.$data.parcoords_rawData[i].canWrite.length; k++){\n            for(let l = 0; l < this.$data.parcoords_rawData[i].tags.length; l++){\n              let index_canRead = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].canRead[j]) \n              let index_canWrite = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].canWrite[k]) \n              let index_owner = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].owner) \n              if(index_canRead == \"-1\" || index_canWrite == \"-1\"){\n                  // HANDLE CASE IF MORE USER PERMISSIONS IN STREAMS\n              }else{\n                let parcoord_permut = {stream_id: this.$data.parcoords_rawData[i].stream_id, canRead: this.$data.all_userCode[index_canRead].split('@')[0], canWrite: this.$data.all_userCode[index_canWrite].split('@')[0], tags: this.$data.parcoords_rawData[i].tags[l], objNum: this.$data.parcoords_rawData[i].objNum, owner: this.$data.all_userCode[index_owner], \"owner's company\": this.$data.all_userInfo[index_owner].company, createdAt: this.$data.parcoords_rawData[i].createdAt, updatedAt: this.$data.parcoords_rawData[i].updatedAt, units: this.$data.parcoords_rawData[i].units, tol: this.$data.parcoords_rawData[i].tol} \n                this.$data.parcoords_permut_data.push(parcoord_permut) \n              }\n            }\n          }\n        }\n      }\n      \n      this.$data.parcoords_nodupdata = Array.from(new Set(this.$data.parcoords_permut_data))\n\n      let context = this\n      let parcoords = ParCoords()(\"#example\")\n          .data(\n          context.$data.parcoords_nodupdata\n          )\n          .render()\n          .createAxes()\n          .reorderable()\n          .brushMode(\"1D-axes-multi\")\n          parcoords.on('brushend', function(brushed, args){\n          context.$data.parcoords_selstreams = Array.from(new Set(brushed.map(e => e.stream_id)))\n      })\n      return [nodes, streamLinks] \n    }\n  }\n} \n</script>\n\n<style lang='scss'>\n#appClientGraph {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  margin-top: 30px;\n}\n.vue-slider-piecewise {\n  z-index: 100 !important;\n  pointer-events: none;\n}\n\n.vue-slider-piecewise-item {\n  z-index: 100 !important;\n}\n\n.custom-switch .v-input--selection-controls__input div {\n  color: #f06292;\n}\n// .v-list--dense {\n//   background: transparent !important;\n// }\n\n// .v-select-list {\n//   background: transparent !important;\n// }\n\n// .transparent {\n//    background-color: white!important;\n//    opacity: 0.65;\n//    border-color: transparent!important;\n//  }\n\n</style>\n"],"sourceRoot":"src/components"}]}