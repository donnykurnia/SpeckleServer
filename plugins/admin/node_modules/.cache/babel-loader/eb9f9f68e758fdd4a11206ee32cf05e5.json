{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamLayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamLayer.vue","mtime":1609071089415},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseFloat from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/parse-float\";\nimport \"core-js/modules/es6.regexp.split\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport debounce from 'lodash.debounce';\nexport default {\n  name: 'StreamLayer',\n  props: {\n    layer: Object\n  },\n  watch: {\n    speckledData: function speckledData() {\n      if (this.firstCall) return this.firstCall = false;\n      this.emitUpdate();\n    },\n    layer: function layer(newValue) {\n      this.rawData = this.layer.objects.join(', ');\n    }\n  },\n  computed: {\n    speckledData: function speckledData() {\n      // No need to generate hashes here as the server will generate them for us\n      if (!this.parsedData) return [];\n      var specklObjects = this.parsedData.map(function (val) {\n        if (val === 'the meaning of life') return {\n          type: 'Number',\n          value: 42 // lol\n\n        };\n        if (val === '0') return {\n          type: 'Number',\n          value: 0\n        };\n        if (typeof val === 'boolean') return {\n          type: \"Boolean\",\n          value: val\n        };\n        if (typeof val === 'string') return {\n          type: \"String\",\n          value: val // TODO: Hash it please\n\n        };\n        if (typeof val === 'number') return {\n          type: \"Number\",\n          value: val // TODO: Hash it please\n\n        };\n      });\n      return specklObjects;\n    },\n    parsedData: function parsedData() {\n      if (!this.rawData) return null;\n      var parsedData = [];\n\n      if (this.splitArray) {\n        parsedData = this.rawData.split(',').map(function (s) {\n          return s.trim();\n        }).map(function (s) {\n          var retVal = null;\n          retVal = _parseFloat(s);\n          if (!retVal) retVal = s === 'true' ? true : s === 'false' ? false : s;\n          return retVal;\n        });\n      } else parsedData = [this.rawData];\n\n      return parsedData;\n    }\n  },\n  data: function data() {\n    return {\n      rawData: '',\n      expanded: false,\n      splitArray: true,\n      firstCall: true\n    };\n  },\n  methods: {\n    removeLayer: function removeLayer() {\n      this.$emit(\"remove\", this.layer);\n    },\n    updateName: function updateName(args) {\n      this.layer.name = args.text.trim();\n      this.emitUpdate();\n    },\n    __emitUpdate: function __emitUpdate() {\n      this.$emit('update', {\n        layer: this.layer,\n        objects: this.speckledData\n      });\n    },\n    emitUpdate: debounce(function () {\n      this.$emit('update', {\n        layer: this.layer,\n        objects: this.speckledData\n      });\n    }, 1000)\n  },\n  created: function created() {\n    // console.log('created layer')\n    // console.log(this.layer.objects.join(', '))\n    this.rawData = this.layer.objects.join(', ');\n  }\n};",{"version":3,"sources":["StreamLayer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-layout row wrap align-center class='pa-2 my-5'>\n    <v-flex xs12 md3 mb-3>\n      <v-btn icon @click.native='removeLayer()'>\n        <v-icon>delete_forever</v-icon>\n      </v-btn>\n      <span class='subheading font-weight-lightxxx'>\n        <editable-span :text='layer.name' :data-key='layer.guid' @update='updateName'></editable-span>\n      </span>\n    </v-flex>\n    <v-flex xs12 md9 pl-2>\n      <v-text-field box v-model='rawData' :label='`Layer \"${layer.name}\" data`' hint='values will be separated by commas and parsed into their natural types (strings, numbers, booleans)' />\n    </v-flex>\n    <v-flex xs12>\n      <v-divider></v-divider>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'StreamLayer',\n  props: {\n    layer: Object,\n  },\n  watch: {\n    speckledData( ) {\n      if ( this.firstCall ) return this.firstCall = false\n      this.emitUpdate( )\n    },\n    layer( newValue ) {\n      this.rawData = this.layer.objects.join( ', ' )\n    }\n  },\n  computed: {\n    speckledData( ) {\n      // No need to generate hashes here as the server will generate them for us\n      if ( !this.parsedData ) return [ ]\n      let specklObjects = this.parsedData.map( val => {\n        if ( val === 'the meaning of life' )\n          return { type: 'Number', value: 42 } // lol\n        if ( val === '0' )\n          return { type: 'Number', value: 0 }\n        if ( typeof val === 'boolean' )\n          return { type: \"Boolean\", value: val }\n        if ( typeof val === 'string' )\n          return { type: \"String\", value: val } // TODO: Hash it please\n        if ( typeof val === 'number' )\n          return { type: \"Number\", value: val } // TODO: Hash it please\n      } )\n      return specklObjects\n    },\n    parsedData( ) {\n      if ( !this.rawData ) return null\n      let parsedData = [ ]\n      if ( this.splitArray ) {\n        parsedData = this.rawData.split( ',' ).map( s => s.trim( ) ).map( s => {\n          let retVal = null\n          retVal = parseFloat( s )\n          if ( !retVal )\n            retVal = s === 'true' ? true : ( s === 'false' ? false : s )\n          return retVal\n        } )\n      } else\n        parsedData = [ this.rawData ]\n      return parsedData\n    },\n    // rawData() {\n    //   return this.layer.objects\n    // }\n  },\n  data( ) {\n    return {\n      rawData: '',\n      expanded: false,\n      splitArray: true,\n      firstCall: true,\n    }\n  },\n  methods: {\n    removeLayer( ) {\n      this.$emit( \"remove\", this.layer )\n    },\n    updateName( args ) {\n      this.layer.name = args.text.trim( )\n      this.emitUpdate( )\n    },\n    __emitUpdate( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    },\n    emitUpdate: debounce( function( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    }, 1000 )\n  },\n  created( ) {\n    // console.log('created layer')\n    // console.log(this.layer.objects.join(', '))\n    this.rawData = this.layer.objects.join( ', ' )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\npre {\n  font-size: 12px;\n  line-height: 14px;\n  padding: 5px;\n  box-sizing: border-box;\n  background-color: ghostwhite;\n}\n\n.layer {\n  padding-top: 15px;\n  padding-bottom: 15px;\n  background-color: white;\n  transition: all .3s ease;\n  border-top: 1px solid #E6E6E6;\n}\n\n.layer:hover {\n  background-color: #F4F4F4\n}\n\n</style>\n"],"sourceRoot":"src/components"}]}