{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleRenderer.js","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleRenderer.js","mtime":1609071089423},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import _parseInt from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/parse-int\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport \"core-js/modules/es7.array.includes\";\nimport \"core-js/modules/es6.string.includes\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/es6.typed.uint8-array\";\nimport \"core-js/modules/es6.number.constructor\";\nimport \"core-js/modules/es6.regexp.to-string\";\nimport _getIterator from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport _toConsumableArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find\";\nimport \"core-js/modules/es6.regexp.split\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find-index\";\nimport _Date$now from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/date/now\";\nimport _classCallCheck from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport _possibleConstructorReturn from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/possibleConstructorReturn\";\nimport _getPrototypeOf from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/getPrototypeOf\";\nimport _inherits from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/inherits\";\nimport * as THREE from 'three';\nimport OrbitControls from 'threejs-orbit-controls';\nimport Rainbow from 'rainbowvis.js';\nimport CH from 'color-hash';\nimport TWEEN from '@tweenjs/tween.js';\nimport Axios from 'axios';\nimport EE from 'event-emitter-es6';\nimport flatten from 'flat';\nimport debounce from 'lodash.debounce';\nimport { Converter } from './SpeckleConverter.js';\nimport SelectionBox from './SelectionBox.js';\nimport SelectionHelper from './SelectionHelper.js';\n\nvar SpeckleRenderer =\n/*#__PURE__*/\nfunction (_EE) {\n  _inherits(SpeckleRenderer, _EE);\n\n  function SpeckleRenderer(_ref, viewerSettings) {\n    var _this;\n\n    var domObject = _ref.domObject;\n\n    _classCallCheck(this, SpeckleRenderer);\n\n    _this = _possibleConstructorReturn(this, _getPrototypeOf(SpeckleRenderer).call(this)); // event emitter init\n\n    _this.domObject = domObject;\n    _this.renderer = null;\n    _this.scene = null;\n    _this.camera = null;\n    _this.controls = null;\n    _this.orbitControls = null;\n    _this.hemiLight = null;\n    _this.flashLight = null;\n    _this.shadowLight = null;\n    _this.raycaster = null;\n    _this.mouse = null;\n    _this.mouseDownTime = null;\n    _this.enableKeyobardEvents = false;\n    _this.selectionBox = null;\n    _this.selectionHelper = null;\n    _this.hoveredObject = null;\n    _this.selectedObjects = [];\n    _this.highlightedObjects = [];\n    _this.hoverColor = new THREE.Color('#EEF58F');\n    _this.selectColor = new THREE.Color('#E3E439');\n    _this.sceneBoundingSphere = null;\n    _this.colorHasher = new CH();\n    _this.isSettingColors = false;\n    _this.currentColorByProp = null;\n    _this.colorTable = {};\n    _this.edgesGroup = new THREE.Group();\n    _this.edgesGroup.name = 'displayEdgesGroup';\n    _this.edgesThreshold = null;\n    _this.viewerSettings = viewerSettings;\n\n    _this.initialise();\n\n    return _this;\n  }\n\n  _createClass(SpeckleRenderer, [{\n    key: \"initialise\",\n    value: function initialise() {\n      this.renderer = new THREE.WebGLRenderer({\n        alpha: true,\n        antialias: true,\n        logarithmicDepthBuffer: true\n      });\n      this.renderer.setSize(this.domObject.offsetWidth, this.domObject.offsetHeight); // this.renderer.setClearColor( new THREE.Color(  ), 0.0 )\n\n      this.renderer.shadowMap.enabled = true;\n      this.domObject.appendChild(this.renderer.domElement);\n      this.scene = new THREE.Scene();\n      var axesHelper = new THREE.AxesHelper(10);\n      this.scene.add(axesHelper);\n      var hemiLight = new THREE.HemisphereLight(0xffffff, 0xffffff, 1);\n      hemiLight.color = new THREE.Color('#FFFFFF');\n      hemiLight.groundColor = new THREE.Color('#959595');\n      hemiLight.position.set(0, 500, 0);\n      hemiLight.isCurrent = true;\n      hemiLight.name = 'world lighting';\n      hemiLight.up.set(0, 0, 1);\n      this.scene.add(hemiLight);\n      this.shadowLight = new THREE.DirectionalLight(0xffffff, .5);\n      this.shadowLight.position.set(1, 1, 5);\n      this.shadowLight.castShadow = true;\n      this.shadowLight.visible = false;\n      this.scene.add(this.shadowLight);\n      this.shadowLight.shadow.mapSize.width = 512; // default\n\n      this.shadowLight.shadow.mapSize.height = 512; // default\n\n      this.shadowLight.shadow.camera.near = 0.5; // default\n\n      this.shadowLight.shadow.camera.far = 500;\n      this.camera = new THREE.PerspectiveCamera(75, this.domObject.offsetWidth / this.domObject.offsetHeight, 0.1, 100000);\n      this.camera.up.set(0, 0, 1);\n      this.camera.position.z = 250;\n      this.camera.position.y = 250;\n      this.camera.position.x = 250;\n      this.camera.isCurrent = true;\n      var flashlight = new THREE.PointLight(new THREE.Color('#FFFFFF'), 0.32, 0, 1);\n      flashlight.name = 'camera light';\n      this.camera.add(flashlight);\n      this.controls = new OrbitControls(this.camera, this.renderer.domElement);\n      this.controls.enabled = true;\n      this.controls.screenSpacePanning = true; // this.controls.minPolarAngle = 0;\n      // this.controls.maxPolarAngle = Math.PI / 2;\n\n      this.edgesGroup.visible = false;\n      this.scene.add(this.edgesGroup);\n      this.updateViewerSettings(); // this.controls.enableDamping = true\n      // this.controls.dampingFactor = 0.45\n      // this.controls = new TrackballControls( this.camera, this.renderer.domElement  )\n      // if ( webpackHotUpdate ) {\n\n      window.THREE = THREE; // }\n      // polute the global scope, why not?\n\n      window.Converter = Converter;\n      this.raycaster = new THREE.Raycaster();\n      this.mouse = new THREE.Vector2();\n      this.selectionBox = new SelectionBox(this.camera, this.scene);\n      this.selectionHelper = new SelectionHelper(this.selectionBox, this.renderer, \"selectBox\", this.controls, this.mouse);\n      window.addEventListener('resize', this.resizeCanvas.bind(this), false);\n      this.renderer.domElement.addEventListener('mousemove', this.onTouchMove.bind(this));\n      this.renderer.domElement.addEventListener('touchmove', this.onTouchMove.bind(this));\n      this.renderer.domElement.addEventListener('mousedown', this.mouseDown.bind(this));\n      this.renderer.domElement.addEventListener('mouseup', this.mouseUp.bind(this));\n      this.domObject.addEventListener('mouseover', this.enableEvents.bind(this));\n      this.domObject.addEventListener('mouseout', this.disableEvents.bind(this));\n      window.addEventListener('keydown', this.keydown.bind(this));\n      window.addEventListener('keyup', this.keyup.bind(this)); // this.updateViewerSettings( )\n\n      this.computeSceneBoundingSphere();\n      this.render(); //\n\n      this.controls.addEventListener('change', debounce(function () {\n        this.emit('camera-pos', {\n          target: [this.controls.target.x, this.controls.target.y, this.controls.target.z],\n          position: [this.camera.position.x, this.camera.position.y, this.camera.position.z],\n          rotation: [this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z]\n        });\n        this.setFar();\n      }.bind(this), 200));\n    }\n  }, {\n    key: \"animate\",\n    value: function animate() {\n      requestAnimationFrame(this.animate.bind(this));\n      TWEEN.update();\n      this.setFar();\n      this.controls.update();\n      this.render();\n    }\n  }, {\n    key: \"render\",\n    value: function render() {\n      this.renderer.render(this.scene, this.camera);\n    }\n  }, {\n    key: \"resizeCanvas\",\n    value: function resizeCanvas() {\n      this.camera.aspect = this.domObject.offsetWidth / this.domObject.offsetHeight;\n      this.camera.updateProjectionMatrix();\n      this.renderer.setSize(this.domObject.offsetWidth, this.domObject.offsetHeight);\n    } // called on mouseover the render div - tells us we can actually enable interactions\n    // in the threejs window\n\n  }, {\n    key: \"enableEvents\",\n    value: function enableEvents(e) {\n      this.enableKeyobardEvents = true;\n    } // called on mouseout of the render div - will stop interactions, such as spacebar\n    // for zoom extents, etc. in the threejs window\n\n  }, {\n    key: \"disableEvents\",\n    value: function disableEvents(e) {\n      this.unHighlightObjects();\n      this.enableKeyobardEvents = false;\n    } // HIC SUNT DRACONES:\n    // Selection events and mouse interactions below.\n    // Main thing to note:\n    // - Holding down shift will disable the orbit controls and enable draggin a selection box\n    // - Double clicking on an object will zoom to it\n    // - (TODO) Clicking on an object selects it\n    // - (TODO) Clicking outside any objects/selection box will kill current selection\n\n  }, {\n    key: \"keydown\",\n    value: function keydown(event) {\n      if (!this.enableKeyobardEvents) return;\n\n      switch (event.code) {\n        case 'Space':\n          this.computeSceneBoundingSphere();\n          this.zoomExtents();\n          event.stopPropagation();\n          break;\n\n        case 'ShiftLeft':\n          if (!this.isSpinning) {\n            this.controls.enabled = false;\n            this.domObject.style.cursor = 'copy';\n          }\n\n          break;\n\n        default:\n          break;\n      }\n    }\n  }, {\n    key: \"keyup\",\n    value: function keyup(event) {\n      if (!this.enableKeyobardEvents) return; // console.log( `key: ${event.code}` )\n\n      switch (event.code) {\n        case 'ShiftLeft':\n          this.controls.enabled = true;\n          this.domObject.style.cursor = '';\n          break;\n\n        default:\n          break;\n      }\n    } // we dont' do much on mouse down:\n    // 1) if it's a doubleclick, and we have a hovered object, zoom to it\n    // 2) if the orbit controls are disabled (meaning we're holding down shift for a multiple selection)\n    // then start the selection box point\n\n  }, {\n    key: \"mouseDown\",\n    value: function mouseDown(event) {\n      this.isSpinning = true; // if it's a double click\n\n      if (_Date$now() - this.mouseDownTime < 300 && this.hoveredObject !== null) this.zoomToObject(this.hoveredObject);\n      if (this.controls.enabled === false) this.selectionBox.startPoint.set(this.mouse.x, this.mouse.y, 0.5);\n      this.mouseDownTime = _Date$now();\n    }\n  }, {\n    key: \"mouseUp\",\n    value: function mouseUp(event) {\n      var _this2 = this;\n\n      this.isSpinning = false; // check if it's a single short click (as opposed to a longer difference caused by moving the orbit controls\n      // or dragging the selection box)\n\n      if (_Date$now() - this.mouseDownTime < 300) {\n        if (this.hoveredObject && this.selectedObjects.findIndex(function (x) {\n          return x.userData._id === _this2.hoveredObject.userData._id;\n        }) !== -1) {\n          // Inside the selection -> check if it's a single object deselect\n          if (event.ctrlKey) {\n            this.removeFromSelection([this.hoveredObject]); // this.emit( 'select-remove-objects', [ this.hoveredObject.userData._id ] )\n            // this.hoveredObject.material.color.copy( this.hoveredObject.material.__preSelectColor )\n            // this.hoveredObject.material.__preHoverColor.copy( this.hoveredObject.material.__preSelectColor ) // set the same prehover color as the original color, otherwise on unhover we set the \"selected\" color back\n          }\n        } else if (this.hoveredObject) {\n          // if there is a hovered object...\n          if (event.shiftKey) {\n            console.log('should add to selection');\n            this.addToSelection([this.hoveredObject]);\n          } else if (event.ctrlKey) {\n            console.log('should remove from selection');\n            this.removeFromSelection([this.hoveredObject]);\n          } else {\n            console.log('single selection');\n            this.clearSelection();\n            this.addToSelection([this.hoveredObject]); // this.hoveredObject.material.__preSelectColor = this.hoveredObject.material.color.clone( )\n            // this.hoveredObject.material.__preHoverColor = this.selectColor\n            // this.hoveredObject.material.color.copy( this.selectColor )\n          }\n        } else {\n          // there is no hovered object, so clear selection!?\n          this.clearSelection();\n        }\n      } else {\n        // if the controls were disabled, it means we've been selecting objects with the selection box\n        if (!this.controls.enabled) {\n          this.emit('select-objects', this.selectionBox.collection.map(function (o) {\n            return o.userData._id;\n          }));\n        }\n      }\n    }\n  }, {\n    key: \"onTouchMove\",\n    value: function onTouchMove(event) {\n      var x, y;\n\n      if (event.changedTouches) {\n        x = event.changedTouches[0].pageX;\n        y = event.changedTouches[0].pageY;\n      } else {\n        x = event.clientX;\n        y = event.clientY;\n      }\n\n      var rect = this.domObject.getBoundingClientRect();\n      x -= rect.left;\n      y -= rect.top;\n      this.mouse.x = x / this.domObject.offsetWidth * 2 - 1;\n      this.mouse.y = -(y / this.domObject.offsetHeight) * 2 + 1; // disallow interactions on color sets\n\n      if (this.isSettingColors) return; // check if we're dragging a box selection\n\n      if (this.selectionHelper.isDown && !this.controls.enabled) {\n        this.selectionBox.endPoint.set(this.mouse.x, this.mouse.y, 0.5);\n        var allSelected = this.selectionBox.select();\n        this.addToSelection(allSelected); // for ( var i = 0; i < allSelected.length; i++ ) {\n        //   allSelected[ i ].material.__preSelectColor = allSelected[ i ].material.color.clone( )\n        //   allSelected[ i ].material.color.copy( this.selectColor )\n        // }\n      } // if not, highlight a selected object\n      else if (!this.isSpinning) {\n          this.highlightMouseOverObject();\n        }\n    }\n  }, {\n    key: \"highlightMouseOverObject\",\n    value: function highlightMouseOverObject() {\n      this.raycaster.setFromCamera(this.mouse, this.camera);\n      var intersects = this.raycaster.intersectObjects([this.scene], true);\n\n      if (intersects.length > 0) {\n        if (intersects[0].object !== this.hoveredObject) {\n          if (intersects[0].object.userData.hasOwnProperty('_id')) {\n            this.domObject.style.cursor = 'pointer'; // if there was a pre-exsiting hovered object\n            // unhover it first\n\n            if (this.hoveredObject) {\n              this.hoveredObject.userData.selected ? this.hoveredObject.material.color.copy(this.selectColor) : this.hoveredObject.material.color.copy(this.hoveredObject.material.__preHoverColor);\n              this.hoveredObject.userData.hovered = false;\n            }\n\n            this.hoveredObject = intersects[0].object;\n            this.hoveredObject.userData.hovered = true;\n            this.hoveredObject.material.__preHoverColor = this.hoveredObject.material.color.clone();\n            this.hoveredObject.material.color.copy(this.hoverColor);\n          }\n        }\n      } else {\n        this.domObject.style.cursor = 'default';\n\n        if (this.hoveredObject) {\n          this.hoveredObject.material.color.copy(this.hoveredObject.material.__preHoverColor);\n          this.hoveredObject.userData.hovered = false;\n          this.hoveredObject = null;\n        }\n      }\n    }\n  }, {\n    key: \"addToSelection\",\n    value: function addToSelection(objects) {\n      var _this3 = this;\n\n      var added = [];\n      objects.forEach(function (obj, index) {\n        if (_this3.selectedObjects.findIndex(function (x) {\n          return x.userData._id === obj.userData._id;\n        }) === -1) {\n          obj.userData.selected = true;\n\n          if (!obj.userData.hovered) {\n            obj.material.__preSelectColor = obj.material.color.clone();\n          } else {\n            obj.material.__preSelectColor = obj.material.__preHoverColor.clone();\n\n            obj.material.__preHoverColor.copy(_this3.selectColor);\n          }\n\n          obj.material.color.copy(_this3.selectColor);\n\n          _this3.selectedObjects.push(obj);\n\n          added.push(obj.userData._id);\n        }\n\n        if (index === objects.length - 1) {\n          // TODO: emit added to selection event\n          _this3.emit('select-add-objects', added);\n        }\n      });\n    }\n  }, {\n    key: \"removeFromSelection\",\n    value: function removeFromSelection(objects) {\n      var _this4 = this;\n\n      var removed = [];\n      objects.forEach(function (obj, index) {\n        var myIndex = _this4.selectedObjects.findIndex(function (x) {\n          return x.userData._id === obj.userData._id;\n        });\n\n        if (myIndex !== -1) {\n          obj.userData.selected = false;\n          removed.push(obj.userData._id);\n\n          _this4.selectedObjects.splice(myIndex, 1);\n\n          obj.material.color.copy(obj.material.__preSelectColor);\n\n          obj.material.__preHoverColor.copy(obj.material.__preSelectColor);\n        }\n\n        if (index === objects.length - 1) {\n          // TODO: emit removed from selection event\n          _this4.emit('select-remove-objects', removed);\n        }\n      });\n    }\n  }, {\n    key: \"clearSelection\",\n    value: function clearSelection() {\n      this.selectedObjects.forEach(function (obj) {\n        obj.userData.selected = false;\n        obj.material.color.copy(obj.material.__preSelectColor);\n      });\n      this.emit('select-objects', []);\n      this.selectedObjects = [];\n    } // adds a bunch of speckle objects to the scene. handles conversion and\n    // computes each objects's bounding sphere for faster zoom extents calculation\n    // of the scene bounding sphere.\n\n  }, {\n    key: \"loadObjects\",\n    value: function loadObjects(_ref2) {\n      var _this5 = this;\n\n      var objs = _ref2.objs,\n          zoomExtents = _ref2.zoomExtents;\n      objs.forEach(function (obj, index) {\n        try {\n          var splitType = obj.type.split(\"/\");\n          var convertType = splitType.pop();\n\n          while (splitType.length > 0 & !Converter.hasOwnProperty(convertType)) {\n            convertType = splitType.pop();\n          }\n\n          if (Converter.hasOwnProperty(convertType)) Converter[convertType]({\n            obj: obj\n          }, function (err, threeObj) {\n            threeObj.userData._id = obj._id;\n            threeObj.userData.properties = obj.properties ? flatten(obj.properties, {\n              safe: true\n            }) : null;\n            threeObj.userData.originalColor = threeObj.material.color.clone();\n            threeObj.geometry.computeBoundingSphere();\n            threeObj.castShadow = true;\n            threeObj.receiveShadow = true;\n\n            _this5.drawEdges(threeObj, obj._id);\n\n            _this5.scene.add(threeObj);\n          });\n        } catch (e) {\n          console.warn(\"Something went wrong in the conversion of \".concat(obj._id, \" (\").concat(obj.type, \")\"));\n          console.log(obj);\n          console.log(e);\n          return;\n        }\n\n        if (zoomExtents && index === objs.length - 1) {\n          console.log(_this5.scene.children.length);\n\n          _this5.computeSceneBoundingSphere();\n\n          _this5.zoomExtents();\n        }\n      });\n    }\n  }, {\n    key: \"drawEdges\",\n    value: function drawEdges(threeObj, id) {\n      if (threeObj.type !== 'Mesh') return;\n      var objEdges = new THREE.EdgesGeometry(threeObj.geometry, this.viewerSettings.edgesThreshold);\n      var edgeLines = new THREE.LineSegments(objEdges, new THREE.LineBasicMaterial({\n        color: 0x000000\n      }));\n      edgeLines.userData._id = id;\n      this.edgesGroup.add(edgeLines);\n    }\n  }, {\n    key: \"updateEdges\",\n    value: function updateEdges() {\n      var _this6 = this;\n\n      this.processLargeArray(this.edgesGroup.children, function (obj) {\n        _this6.edgesGroup.remove(obj);\n      });\n      this.processLargeArray(this.scene.children, function (obj) {\n        if (obj.type !== 'Mesh') return;\n\n        _this6.drawEdges(obj, obj.userData._id);\n      });\n    } // removes an array of objects from the scene and recalculates the scene bounding sphere\n\n  }, {\n    key: \"unloadObjects\",\n    value: function unloadObjects(_ref3) {\n      var _this7 = this;\n\n      var objIds = _ref3.objIds;\n      var toRemove = [];\n      this.scene.traverse(function (obj) {\n        if (obj.userData._id) if (objIds.indexOf(obj.userData._id) !== -1) toRemove.push(obj);\n      });\n      toRemove.forEach(function (object, index) {\n        object.parent.remove(object);\n\n        if (index === toRemove.length - 1) {\n          _this7.computeSceneBoundingSphere();\n\n          _this7.zoomExtents();\n        }\n      });\n    } // sets (updates) the properties field of the objects\n    // (useful if you modify the props outside three)\n\n  }, {\n    key: \"updateObjectsProperties\",\n    value: function updateObjectsProperties(_ref4) {\n      var _this8 = this;\n\n      var objects = _ref4.objects;\n      this.processLargeArray(objects, function (obj, index) {\n        var sceneObject = _this8.scene.children.find(function (o) {\n          return o.userData._id === obj._id;\n        });\n\n        if (!sceneObject) return;\n        sceneObject.userData.properties = flatten(obj.properties);\n      });\n    } // entry point for any attempt to color things by their properties in the viewer\n    // depending on the property, it will either call \"colorByNumericProperty\" or\n    // \"colorByStringProperty\" (see below)\n\n  }, {\n    key: \"colorByProperty\",\n    value: function colorByProperty(_ref5) {\n      var propertyName = _ref5.propertyName,\n          propagateLegend = _ref5.propagateLegend,\n          colors = _ref5.colors;\n      console.log(propagateLegend);\n      if (propagateLegend === null || propagateLegend === undefined) propagateLegend = true;\n      var first = this.scene.children.find(function (o) {\n        return o.userData && o.userData.properties && o.userData.properties[propertyName];\n      });\n\n      if (!first) {\n        console.warn(\"no property found (\".concat(propertyName, \") on any scene objects.\"));\n        return;\n      }\n\n      if (this.currentColorByProp === propertyName) return;\n      this.unHighlightObjects();\n      this.currentColorByProp = propertyName;\n      var isNumeric = !isNaN(first.userData.properties[propertyName]);\n      console.log(\"coloring by \".concat(propertyName, \", which is (numeric: \").concat(isNumeric, \")\"));\n      if (isNumeric) this.colorByNumericProperty({\n        propertyName: propertyName,\n        propagateLegend: propagateLegend,\n        colors: colors\n      });else this.colorByStringProperty({\n        propertyName: propertyName,\n        propagateLegend: propagateLegend\n      });\n    } // attempts to color all objects  in the scene by a numeric property, computing its bounds\n    // and generating a gradient from min (blue) to max (pinkish)\n\n  }, {\n    key: \"colorByNumericProperty\",\n    value: function colorByNumericProperty(_ref6) {\n      var _this9 = this;\n\n      var propertyName = _ref6.propertyName,\n          propagateLegend = _ref6.propagateLegend,\n          colors = _ref6.colors;\n      if (propagateLegend === null || propagateLegend === undefined) propagateLegend = true; // compute bounds\n\n      var min = 10e6,\n          max = -10e6,\n          foundObjs = [],\n          toReset = [];\n      this.isSettingColors = true; // TODO: chunkify this loop yo\n\n      var _iteratorNormalCompletion = true;\n      var _didIteratorError = false;\n      var _iteratorError = undefined;\n\n      try {\n        for (var _iterator = _getIterator(this.scene.children), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n          var obj = _step.value;\n\n          if (!(obj.userData && obj.userData.properties && obj.userData.properties[propertyName])) {\n            toReset.push(obj);\n            continue;\n          }\n\n          if (!obj.visible) continue;\n          var value = obj.userData.properties[propertyName];\n          if (value > max) max = value;\n          if (value < min) min = value;\n          foundObjs.push(obj);\n        }\n      } catch (err) {\n        _didIteratorError = true;\n        _iteratorError = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion && _iterator.return != null) {\n            _iterator.return();\n          }\n        } finally {\n          if (_didIteratorError) {\n            throw _iteratorError;\n          }\n        }\n      }\n\n      if (min === max) {\n        min -= 1;\n        max += 1;\n      }\n\n      console.log(\"bounds: \".concat(min, \", \").concat(max, \" \\uD83C\\uDF08\"));\n      if (propagateLegend) this.emit('analysis-legend', {\n        propertyName: propertyName,\n        isNumeric: true,\n        min: min,\n        max: max,\n        objectCount: foundObjs.length\n      }); // gen rainbow 🌈\n\n      var rainbow = new Rainbow();\n      rainbow.setNumberRange(min, max);\n      rainbow.setSpectrum.apply(rainbow, _toConsumableArray(colors));\n      foundObjs.forEach(function (obj, index) {\n        var value = obj.userData.properties[propertyName],\n            color = null;\n        if (!isNaN(value) && !!value) color = new THREE.Color(\"#\".concat(rainbow.colourAt(value)));else color = new THREE.Color('#B3B3B3');\n\n        if (!obj.userData.selected) {\n          obj.material._oldColor = obj.material.color;\n          obj.material.color.copy(color);\n        } else {\n          obj.material.__preSelectColor.copy(color);\n        }\n\n        if (index === foundObjs.length - 1) {\n          _this9.isSettingColors = false;\n        }\n      });\n      var defaultColor = new THREE.Color('#B3B3B3');\n      toReset.forEach(function (obj) {\n        // if ( !obj.userData.selected ) {\n        //   obj.material._oldColor = obj.material.color\n        if (obj.material) obj.material.color.copy(defaultColor); // } else {\n        //   obj.material.__preSelectColor.copy( color )\n        // }\n      });\n    } // attempts to color all objects in the scene by a string property\n    // uses colorHasher to get a hex color out of a string\n\n  }, {\n    key: \"colorByStringProperty\",\n    value: function colorByStringProperty(_ref7) {\n      var _this10 = this;\n\n      var propertyName = _ref7.propertyName,\n          propagateLegend = _ref7.propagateLegend;\n      if (propagateLegend === null || propagateLegend === undefined) propagateLegend = true;\n      var toReset = [],\n          foundCount = 0;\n      this.isSettingColors = true; // TODO: chunkify this loop yo\n\n      this.processLargeArray(this.scene.children, function (obj, index) {\n        if (!(obj.userData && obj.userData.properties && obj.userData.properties[propertyName])) {\n          toReset.push(obj);\n          return;\n        }\n\n        var value = obj.userData.properties[propertyName];\n        var color = null;\n\n        if (!_this10.colorTable.hasOwnProperty(value.toString())) {\n          if (value.toString() === 'no material') {\n            _this10.colorTable[value.toString()] = new THREE.Color('#B3B3B3');\n          } else {\n            _this10.colorTable[value.toString()] = new THREE.Color(_this10.colorHasher.hex(value.toString()));\n          }\n        }\n\n        color = _this10.colorTable[value.toString()];\n\n        if (!obj.userData.selected) {\n          obj.material._oldColor = obj.material.color;\n          obj.material.color.copy(color);\n        } else {\n          obj.material.__preSelectColor.copy(color);\n        }\n\n        foundCount++;\n\n        if (index === _this10.scene.children.length - 1) {\n          _this10.isSettingColors = false;\n          if (propagateLegend) _this10.emit('analysis-legend', {\n            propertyName: propertyName,\n            isNumeric: false,\n            objectCount: foundCount\n          });\n        }\n      }, 5000);\n      var defaultColor = new THREE.Color('#B3B3B3');\n      toReset.forEach(function (obj) {\n        if (obj.material) obj.material.color.copy(defaultColor);\n      });\n    }\n  }, {\n    key: \"colorByVertexArray\",\n    value: function colorByVertexArray(_ref8) {\n      var propertyName = _ref8.propertyName,\n          colors = _ref8.colors;\n      var globalMin = Number.MAX_VALUE,\n          globalMax = -Number.MIN_VALUE,\n          toReset = [],\n          toColour = [];\n      var _iteratorNormalCompletion2 = true;\n      var _didIteratorError2 = false;\n      var _iteratorError2 = undefined;\n\n      try {\n        for (var _iterator2 = _getIterator(this.scene.children), _step2; !(_iteratorNormalCompletion2 = (_step2 = _iterator2.next()).done); _iteratorNormalCompletion2 = true) {\n          var obj = _step2.value;\n\n          if (!(obj.userData && obj.userData.properties && obj.userData.properties[\"structural.result.\".concat(propertyName)])) {\n            toReset.push(obj);\n            continue;\n          }\n\n          var min = Math.min.apply(Math, _toConsumableArray(obj.userData.properties[\"structural.result.\".concat(propertyName)]));\n          var max = Math.max.apply(Math, _toConsumableArray(obj.userData.properties[\"structural.result.\".concat(propertyName)]));\n          if (min < globalMin) globalMin = min;\n          if (max > globalMax) globalMax = max;\n          toColour.push(obj);\n        }\n      } catch (err) {\n        _didIteratorError2 = true;\n        _iteratorError2 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion2 && _iterator2.return != null) {\n            _iterator2.return();\n          }\n        } finally {\n          if (_didIteratorError2) {\n            throw _iteratorError2;\n          }\n        }\n      }\n\n      console.log(\"\\uD83D\\uDC68\\u200D\\uD83C\\uDFA8 ::: prop: \".concat(propertyName, \" ::: min: \").concat(globalMin, \"; max: \").concat(globalMax, \"; objs: \").concat(toColour.length));\n      var rainbow = new Rainbow();\n      rainbow.setNumberRange(globalMin, globalMax);\n      rainbow.setSpectrum.apply(rainbow, _toConsumableArray(colors));\n\n      for (var _i = 0, _toColour = toColour; _i < _toColour.length; _i++) {\n        var _obj = _toColour[_i];\n\n        var _colors = new Uint8Array(_obj.userData.properties[\"structural.result.\".concat(propertyName)].length * 3),\n            k = 0;\n\n        var _iteratorNormalCompletion3 = true;\n        var _didIteratorError3 = false;\n        var _iteratorError3 = undefined;\n\n        try {\n          for (var _iterator3 = _getIterator(_obj.userData.properties[\"structural.result.\".concat(propertyName)]), _step3; !(_iteratorNormalCompletion3 = (_step3 = _iterator3.next()).done); _iteratorNormalCompletion3 = true) {\n            var val = _step3.value;\n            var myColour = hexToRgb(rainbow.colourAt(val));\n            _colors[k++] = myColour.r;\n            _colors[k++] = myColour.g;\n            _colors[k++] = myColour.b;\n          }\n        } catch (err) {\n          _didIteratorError3 = true;\n          _iteratorError3 = err;\n        } finally {\n          try {\n            if (!_iteratorNormalCompletion3 && _iterator3.return != null) {\n              _iterator3.return();\n            }\n          } finally {\n            if (_didIteratorError3) {\n              throw _iteratorError3;\n            }\n          }\n        }\n\n        _obj.geometry.addAttribute('color', new THREE.BufferAttribute(_colors, 3, true));\n\n        _obj.geometry.attributes.color.needsUpdate = true;\n        _obj.geometry.colorsNeedUpdate = true;\n        _obj.material.vertexColors = THREE.VertexColors;\n        this.setMaterialOverrides(_obj);\n      }\n\n      this.emit('analysis-legend', {\n        propertyName: propertyName,\n        isNumeric: false,\n        min: globalMin,\n        max: globalMax,\n        objectCount: toColour.length\n      });\n    }\n  }, {\n    key: \"resetColors\",\n    value: function resetColors(_ref9) {\n      var propagateLegend = _ref9.propagateLegend;\n      if (propagateLegend === null || propagateLegend === undefined) propagateLegend = true;\n      var defaultColor = new THREE.Color('#B3B3B3');\n      var _iteratorNormalCompletion4 = true;\n      var _didIteratorError4 = false;\n      var _iteratorError4 = undefined;\n\n      try {\n        for (var _iterator4 = _getIterator(this.scene.children), _step4; !(_iteratorNormalCompletion4 = (_step4 = _iterator4.next()).done); _iteratorNormalCompletion4 = true) {\n          var obj = _step4.value;\n\n          if (obj.material) {\n            this.setMaterialOverrides(obj);\n            obj.material.vertexColors = THREE.NoColors;\n            obj.material.needsUpdate = true;\n          }\n\n          if (obj.material) obj.material.color.copy(defaultColor);\n          continue;\n          if (!obj.material) continue;\n\n          if (!obj.material._oldColor) {\n            obj.material.color.copy(defaultColor);\n            continue;\n          }\n\n          obj.material.color.copy(obj.material._oldColor);\n        }\n      } catch (err) {\n        _didIteratorError4 = true;\n        _iteratorError4 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion4 && _iterator4.return != null) {\n            _iterator4.return();\n          }\n        } finally {\n          if (_didIteratorError4) {\n            throw _iteratorError4;\n          }\n        }\n      }\n\n      this.currentColorByProp = null;\n      if (propagateLegend) this.emit('clear-analysis-legend');\n    } // TODO\n\n  }, {\n    key: \"ghostObjects\",\n    value: function ghostObjects(objIds) {}\n  }, {\n    key: \"unGhostObjects\",\n    value: function unGhostObjects(objIds) {} // TODO\n\n  }, {\n    key: \"showObjects\",\n    value: function showObjects(objIds) {\n      if (objIds.length !== 0) this.scene.traverse(function (obj) {\n        if (objIds.indexOf(obj.userData._id) !== -1) {\n          if (obj.name !== null) {\n            if (obj.name == 'displayEdgesGroup') return;\n          }\n\n          obj.visible = true;\n        }\n      });else this.scene.traverse(function (obj) {\n        if (obj.name !== null) {\n          if (obj.name == 'displayEdgesGroup') return;\n        }\n\n        obj.visible = true;\n      });\n    }\n  }, {\n    key: \"hideObjects\",\n    value: function hideObjects(objIds) {\n      if (objIds.length !== 0) this.scene.traverse(function (obj) {\n        if (objIds.indexOf(obj.userData._id) !== -1) obj.visible = false;\n      });else this.scene.traverse(function (obj) {\n        return obj.visible = false;\n      });\n    } // leaves only the provided objIds visible\n\n  }, {\n    key: \"isolateObjects\",\n    value: function isolateObjects(objIds) {\n      this.scene.children.forEach(function (obj) {\n        if (!obj.userData._id) return;\n        if (objIds.includes(obj.userData._id)) obj.visible = true;else obj.visible = false;\n      });\n    }\n  }, {\n    key: \"highlightObjects\",\n    value: function highlightObjects(objIds) {\n      var _this11 = this;\n\n      return; // TODO: performance sucks for large object groups\n\n      if (this.isSettingColors) return;\n      this.highlightedObjects = objIds;\n      var objs = this.scene.children.filter(function (o) {\n        return objIds.includes(o.userData._id);\n      });\n      objs.forEach(function (obj) {\n        obj.userData.hovered = true;\n        obj.material.__preHoverColor = obj.material.color.clone();\n        obj.material.color.copy(_this11.hoverColor);\n      });\n    }\n  }, {\n    key: \"unHighlightObjects\",\n    value: function unHighlightObjects(objIds) {\n      return; // TODO: performance sucks for large object groups\n\n      if (!objIds) objIds = this.highlightedObjects;\n      var objs = this.scene.children.filter(function (o) {\n        return objIds.includes(o.userData._id);\n      });\n      objs.forEach(function (obj) {\n        obj.material.color.copy(obj.material.__preHoverColor);\n        obj.userData.hovered = false;\n        obj = null;\n      });\n      this.highlightedObjects = [];\n    }\n  }, {\n    key: \"zoomToObject\",\n    value: function zoomToObject(obj) {\n      if (typeof obj === 'string') {\n        obj = this.scene.children.find(function (o) {\n          return o.userData._id === obj;\n        });\n      }\n\n      if (!obj) return;\n      var bsphere = obj.geometry.boundingSphere;\n      if (bsphere.radius < 1) bsphere.radius = 2; // let r = bsphere.radius\n\n      var offset = bsphere.radius / Math.tan(Math.PI / 180.0 * this.controls.object.fov * 0.5);\n      var vector = new THREE.Vector3(0, 0, 1);\n      var dir = vector.applyQuaternion(this.controls.object.quaternion);\n      var newPos = new THREE.Vector3();\n      dir.multiplyScalar(offset * 1.5);\n      newPos.addVectors(bsphere.center, dir);\n      this.setCamera({\n        position: [newPos.x, newPos.y, newPos.z],\n        rotation: [this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z],\n        target: [bsphere.center.x, bsphere.center.y, bsphere.center.z]\n      }, 600);\n    }\n  }, {\n    key: \"zoomExtents\",\n    value: function zoomExtents() {\n      this.computeSceneBoundingSphere();\n      var offset = this.sceneBoundingSphere.radius / Math.tan(Math.PI / 180.0 * this.controls.object.fov * 0.5);\n      var vector = new THREE.Vector3(0, 0, 1);\n      var dir = vector.applyQuaternion(this.controls.object.quaternion);\n      var newPos = new THREE.Vector3();\n      dir.multiplyScalar(offset * 1.25);\n      newPos.addVectors(this.sceneBoundingSphere.center, dir);\n      this.setCamera({\n        position: [newPos.x, newPos.y, newPos.z],\n        rotation: [this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z],\n        target: [this.sceneBoundingSphere.center.x, this.sceneBoundingSphere.center.y, this.sceneBoundingSphere.center.z]\n      }, 450);\n    }\n  }, {\n    key: \"computeSceneBoundingSphere\",\n    value: function computeSceneBoundingSphere() {\n      var center = null,\n          radius = 0,\n          k = 0;\n      var _iteratorNormalCompletion5 = true;\n      var _didIteratorError5 = false;\n      var _iteratorError5 = undefined;\n\n      try {\n        for (var _iterator5 = _getIterator(this.scene.children), _step5; !(_iteratorNormalCompletion5 = (_step5 = _iterator5.next()).done); _iteratorNormalCompletion5 = true) {\n          var obj = _step5.value;\n          if (!obj.userData._id) continue;\n          if (!obj.geometry) continue;\n\n          if (k === 0) {\n            center = new THREE.Vector3(obj.geometry.boundingSphere.center.x, obj.geometry.boundingSphere.center.y, obj.geometry.boundingSphere.center.z);\n            radius = obj.geometry.boundingSphere.radius;\n            k++;\n            continue;\n          }\n\n          var otherDist = obj.geometry.boundingSphere.radius + center.distanceTo(obj.geometry.boundingSphere.center);\n          if (radius < otherDist) radius = otherDist;\n          center.x += obj.geometry.boundingSphere.center.x;\n          center.y += obj.geometry.boundingSphere.center.y;\n          center.z += obj.geometry.boundingSphere.center.z;\n          center.divideScalar(2);\n          k++;\n        }\n      } catch (err) {\n        _didIteratorError5 = true;\n        _iteratorError5 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion5 && _iterator5.return != null) {\n            _iterator5.return();\n          }\n        } finally {\n          if (_didIteratorError5) {\n            throw _iteratorError5;\n          }\n        }\n      }\n\n      if (!center) {\n        center = new THREE.Vector3(0, 0, 0);\n      }\n\n      this.sceneBoundingSphere = {\n        center: center ? center : new THREE.Vector3(),\n        radius: radius > 1 ? radius * 1.1 : 100\n      };\n    }\n  }, {\n    key: \"setFar\",\n    value: function setFar() {\n      var camDistance = this.camera.position.distanceTo(this.sceneBoundingSphere.center);\n      this.camera.far = 3 * this.sceneBoundingSphere.radius + camDistance * 3; // 3 is lucky\n\n      this.camera.updateProjectionMatrix();\n    }\n  }, {\n    key: \"setCamera\",\n    value: function setCamera(where, time) {\n      var _this12 = this;\n\n      var self = this;\n      var duration = time ? time : 350; //position\n\n      new TWEEN.Tween(self.camera.position).to({\n        x: where.position[0],\n        y: where.position[1],\n        z: where.position[2]\n      }, duration).easing(TWEEN.Easing.Quadratic.InOut).start(); // rotation\n\n      new TWEEN.Tween(self.camera.rotation).to({\n        x: where.rotation[0],\n        y: where.rotation[1],\n        z: where.rotation[2]\n      }, duration).easing(TWEEN.Easing.Quadratic.InOut).start(); // controls center\n\n      new TWEEN.Tween(self.controls.target).to({\n        x: where.target[0],\n        y: where.target[1],\n        z: where.target[2]\n      }, duration).onUpdate(function () {\n        self.controls.update();\n        if (_this12.x === where.target[0]) console.log('camera finished stuff');\n      }).easing(TWEEN.Easing.Quadratic.InOut).start();\n    } //Generic helpers\n\n  }, {\n    key: \"processLargeArray\",\n    value: function processLargeArray(array, fn, chunk, context) {\n      context = context || window;\n      chunk = chunk || 500; // 100 elems at a time\n\n      var index = 0;\n\n      function doChunk() {\n        var count = chunk;\n\n        while (count-- && index < array.length) {\n          fn.call(context, array[index], index, array);\n          ++index;\n        }\n\n        if (index < array.length) setTimeout(doChunk, 1);\n      }\n\n      doChunk();\n    }\n  }, {\n    key: \"processLargeArrayAsync\",\n    value: function processLargeArrayAsync(array, fn, maxTimePerChunk, context) {\n      context = context || window;\n      maxTimePerChunk = maxTimePerChunk || 200;\n      var index = 0;\n\n      function doChunk() {\n        var startTime = _Date$now();\n\n        while (index < array.length && _Date$now() - startTime <= maxTimePerChunk) {\n          // callback called with args (value, index, array)\n          fn.call(context, array[index], index, array);\n          ++index;\n        }\n\n        if (index < array.length) setTimeout(doChunk, 1);\n      }\n\n      doChunk();\n    }\n  }, {\n    key: \"updateViewerSettings\",\n    value: function updateViewerSettings() {\n      this.setDefaultMeshMaterial();\n      this.updateMaterialManager();\n      this.shadowLight.visible = this.viewerSettings.castShadows;\n      this.edgesGroup.visible = this.viewerSettings.showEdges;\n\n      if (this.edgesThreshold != this.viewerSettings.edgesThreshold) {\n        this.updateEdges();\n      }\n\n      this.edgesThreshold = this.viewerSettings.edgesThreshold;\n    }\n  }, {\n    key: \"setDefaultMeshMaterial\",\n    value: function setDefaultMeshMaterial() {\n      var _iteratorNormalCompletion6 = true;\n      var _didIteratorError6 = false;\n      var _iteratorError6 = undefined;\n\n      try {\n        for (var _iterator6 = _getIterator(this.scene.children), _step6; !(_iteratorNormalCompletion6 = (_step6 = _iterator6.next()).done); _iteratorNormalCompletion6 = true) {\n          var obj = _step6.value;\n\n          if (obj.type === 'Mesh') {\n            if (obj.material) {\n              this.setMaterialOverrides(obj);\n            }\n          }\n        }\n      } catch (err) {\n        _didIteratorError6 = true;\n        _iteratorError6 = err;\n      } finally {\n        try {\n          if (!_iteratorNormalCompletion6 && _iterator6.return != null) {\n            _iterator6.return();\n          }\n        } finally {\n          if (_didIteratorError6) {\n            throw _iteratorError6;\n          }\n        }\n      }\n    }\n  }, {\n    key: \"setMaterialOverrides\",\n    value: function setMaterialOverrides(obj) {\n      obj.material.opacity = this.viewerSettings.meshOverrides.opacity / 100;\n      var specColor = new THREE.Color();\n      specColor.setHSL(0, 0, this.viewerSettings.meshOverrides.specular / 100);\n      obj.material.specular = specColor;\n      obj.material.needsUpdate = true;\n    }\n  }, {\n    key: \"updateMaterialManager\",\n    value: function updateMaterialManager() {\n      var specColor = new THREE.Color();\n      specColor.setHSL(0, 0, this.viewerSettings.meshOverrides.specular / 100);\n      Converter.materialManager.defaultMeshMat.specular = specColor;\n      Converter.materialManager.defaultMeshMat.opacity = this.viewerSettings.meshOverrides.opacity / 100;\n    }\n  }]);\n\n  return SpeckleRenderer;\n}(EE); // Helper\n\n\nexport { SpeckleRenderer as default };\n\nfunction hexToRgb(hex) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace(shorthandRegex, function (m, r, g, b) {\n    return r + r + g + g + b + b;\n  });\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec(hex);\n  return result ? {\n    r: _parseInt(result[1], 16),\n    g: _parseInt(result[2], 16),\n    b: _parseInt(result[3], 16)\n  } : null;\n}",{"version":3,"sources":["/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleRenderer.js"],"names":["THREE","OrbitControls","Rainbow","CH","TWEEN","Axios","EE","flatten","debounce","Converter","SelectionBox","SelectionHelper","SpeckleRenderer","viewerSettings","domObject","renderer","scene","camera","controls","orbitControls","hemiLight","flashLight","shadowLight","raycaster","mouse","mouseDownTime","enableKeyobardEvents","selectionBox","selectionHelper","hoveredObject","selectedObjects","highlightedObjects","hoverColor","Color","selectColor","sceneBoundingSphere","colorHasher","isSettingColors","currentColorByProp","colorTable","edgesGroup","Group","name","edgesThreshold","initialise","WebGLRenderer","alpha","antialias","logarithmicDepthBuffer","setSize","offsetWidth","offsetHeight","shadowMap","enabled","appendChild","domElement","Scene","axesHelper","AxesHelper","add","HemisphereLight","color","groundColor","position","set","isCurrent","up","DirectionalLight","castShadow","visible","shadow","mapSize","width","height","near","far","PerspectiveCamera","z","y","x","flashlight","PointLight","screenSpacePanning","updateViewerSettings","window","Raycaster","Vector2","addEventListener","resizeCanvas","bind","onTouchMove","mouseDown","mouseUp","enableEvents","disableEvents","keydown","keyup","computeSceneBoundingSphere","render","emit","target","rotation","setFar","requestAnimationFrame","animate","update","aspect","updateProjectionMatrix","e","unHighlightObjects","event","code","zoomExtents","stopPropagation","isSpinning","style","cursor","zoomToObject","startPoint","findIndex","userData","_id","ctrlKey","removeFromSelection","shiftKey","console","log","addToSelection","clearSelection","collection","map","o","changedTouches","pageX","pageY","clientX","clientY","rect","getBoundingClientRect","left","top","isDown","endPoint","allSelected","select","highlightMouseOverObject","setFromCamera","intersects","intersectObjects","length","object","hasOwnProperty","selected","material","copy","__preHoverColor","hovered","clone","objects","added","forEach","obj","index","__preSelectColor","push","removed","myIndex","splice","objs","splitType","type","split","convertType","pop","err","threeObj","properties","safe","originalColor","geometry","computeBoundingSphere","receiveShadow","drawEdges","warn","children","id","objEdges","EdgesGeometry","edgeLines","LineSegments","LineBasicMaterial","processLargeArray","remove","objIds","toRemove","traverse","indexOf","parent","sceneObject","find","propertyName","propagateLegend","colors","undefined","first","isNumeric","isNaN","colorByNumericProperty","colorByStringProperty","min","max","foundObjs","toReset","value","objectCount","rainbow","setNumberRange","setSpectrum","colourAt","_oldColor","defaultColor","foundCount","toString","hex","globalMin","Number","MAX_VALUE","globalMax","MIN_VALUE","toColour","Math","Uint8Array","k","val","myColour","hexToRgb","r","g","b","addAttribute","BufferAttribute","attributes","needsUpdate","colorsNeedUpdate","vertexColors","VertexColors","setMaterialOverrides","NoColors","includes","filter","bsphere","boundingSphere","radius","offset","tan","PI","fov","vector","Vector3","dir","applyQuaternion","quaternion","newPos","multiplyScalar","addVectors","center","setCamera","otherDist","distanceTo","divideScalar","camDistance","where","time","self","duration","Tween","to","easing","Easing","Quadratic","InOut","start","onUpdate","array","fn","chunk","context","doChunk","count","call","setTimeout","maxTimePerChunk","startTime","setDefaultMeshMaterial","updateMaterialManager","castShadows","showEdges","updateEdges","opacity","meshOverrides","specColor","setHSL","specular","materialManager","defaultMeshMat","shorthandRegex","replace","m","result","exec"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\nimport OrbitControls from 'threejs-orbit-controls'\n\nimport Rainbow from 'rainbowvis.js'\nimport CH from 'color-hash'\nimport TWEEN from '@tweenjs/tween.js'\n\nimport Axios from 'axios'\nimport EE from 'event-emitter-es6'\nimport flatten from 'flat'\nimport debounce from 'lodash.debounce'\n\nimport { Converter } from './SpeckleConverter.js'\nimport SelectionBox from './SelectionBox.js'\nimport SelectionHelper from './SelectionHelper.js'\n\nexport default class SpeckleRenderer extends EE {\n\n  constructor( { domObject }, viewerSettings ) {\n    super( ) // event emitter init\n    this.domObject = domObject\n    this.renderer = null\n    this.scene = null\n    this.camera = null\n    this.controls = null\n    this.orbitControls = null\n    this.hemiLight = null\n    this.flashLight = null\n    this.shadowLight = null\n\n    this.raycaster = null\n    this.mouse = null\n    this.mouseDownTime = null\n    this.enableKeyobardEvents = false\n\n    this.selectionBox = null\n    this.selectionHelper = null\n\n    this.hoveredObject = null\n    this.selectedObjects = [ ]\n    this.highlightedObjects = [ ]\n\n    this.hoverColor = new THREE.Color( '#EEF58F' )\n    this.selectColor = new THREE.Color( '#E3E439' )\n\n    this.sceneBoundingSphere = null\n\n    this.colorHasher = new CH( )\n\n    this.isSettingColors = false\n    this.currentColorByProp = null\n    this.colorTable = {}\n\n    this.edgesGroup = new THREE.Group( )\n    this.edgesGroup.name = 'displayEdgesGroup'\n    this.edgesThreshold = null\n\n    this.viewerSettings = viewerSettings\n\n    this.initialise( )\n  }\n\n  initialise( ) {\n    this.renderer = new THREE.WebGLRenderer( { alpha: true, antialias: true, logarithmicDepthBuffer: true } )\n    this.renderer.setSize( this.domObject.offsetWidth, this.domObject.offsetHeight )\n    // this.renderer.setClearColor( new THREE.Color(  ), 0.0 )\n    this.renderer.shadowMap.enabled = true\n    this.domObject.appendChild( this.renderer.domElement )\n\n    this.scene = new THREE.Scene( )\n\n    let axesHelper = new THREE.AxesHelper( 10 )\n    this.scene.add( axesHelper )\n\n    let hemiLight = new THREE.HemisphereLight( 0xffffff, 0xffffff, 1 )\n    hemiLight.color = new THREE.Color( '#FFFFFF' )\n    hemiLight.groundColor = new THREE.Color( '#959595' )\n    hemiLight.position.set( 0, 500, 0 )\n    hemiLight.isCurrent = true\n    hemiLight.name = 'world lighting'\n    hemiLight.up.set( 0, 0, 1 )\n    this.scene.add( hemiLight )\n\n    this.shadowLight = new THREE.DirectionalLight( 0xffffff, .5 )\n    this.shadowLight.position.set( 1, 1, 5 )\n    this.shadowLight.castShadow = true;\n    this.shadowLight.visible = false\n    this.scene.add( this.shadowLight )\n    this.shadowLight.shadow.mapSize.width = 512; // default\n    this.shadowLight.shadow.mapSize.height = 512; // default\n    this.shadowLight.shadow.camera.near = 0.5; // default\n    this.shadowLight.shadow.camera.far = 500;\n\n    this.camera = new THREE.PerspectiveCamera( 75, this.domObject.offsetWidth / this.domObject.offsetHeight, 0.1, 100000 );\n    this.camera.up.set( 0, 0, 1 )\n    this.camera.position.z = 250\n    this.camera.position.y = 250\n    this.camera.position.x = 250\n\n    this.camera.isCurrent = true\n\n    let flashlight = new THREE.PointLight( new THREE.Color( '#FFFFFF' ), 0.32, 0, 1 )\n    flashlight.name = 'camera light'\n    this.camera.add( flashlight )\n\n    this.controls = new OrbitControls( this.camera, this.renderer.domElement )\n    this.controls.enabled = true\n    this.controls.screenSpacePanning = true\n\n    // this.controls.minPolarAngle = 0;\n    // this.controls.maxPolarAngle = Math.PI / 2;\n\n    this.edgesGroup.visible = false\n    this.scene.add( this.edgesGroup )\n\n    this.updateViewerSettings( )\n    // this.controls.enableDamping = true\n    // this.controls.dampingFactor = 0.45\n    // this.controls = new TrackballControls( this.camera, this.renderer.domElement  )\n\n    // if ( webpackHotUpdate ) {\n    window.THREE = THREE\n    // }\n    // polute the global scope, why not?\n    window.Converter = Converter\n\n    this.raycaster = new THREE.Raycaster( )\n    this.mouse = new THREE.Vector2( )\n\n    this.selectionBox = new SelectionBox( this.camera, this.scene )\n    this.selectionHelper = new SelectionHelper( this.selectionBox, this.renderer, \"selectBox\", this.controls, this.mouse )\n\n\n    window.addEventListener( 'resize', this.resizeCanvas.bind( this ), false )\n    this.renderer.domElement.addEventListener( 'mousemove', this.onTouchMove.bind( this ) )\n    this.renderer.domElement.addEventListener( 'touchmove', this.onTouchMove.bind( this ) )\n\n    this.renderer.domElement.addEventListener( 'mousedown', this.mouseDown.bind( this ) )\n    this.renderer.domElement.addEventListener( 'mouseup', this.mouseUp.bind( this ) )\n\n    this.domObject.addEventListener( 'mouseover', this.enableEvents.bind( this ) )\n    this.domObject.addEventListener( 'mouseout', this.disableEvents.bind( this ) )\n\n    window.addEventListener( 'keydown', this.keydown.bind( this ) )\n    window.addEventListener( 'keyup', this.keyup.bind( this ) )\n\n    // this.updateViewerSettings( )\n    this.computeSceneBoundingSphere( )\n    this.render( )\n\n    //\n    this.controls.addEventListener( 'change', debounce( function ( ) {\n      this.emit( 'camera-pos', {\n        target: [ this.controls.target.x, this.controls.target.y, this.controls.target.z ],\n        position: [ this.camera.position.x, this.camera.position.y, this.camera.position.z ],\n        rotation: [ this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z ]\n      } )\n      this.setFar()\n    }.bind( this ), 200 ) )\n  }\n\n\n\n  animate( ) {\n    requestAnimationFrame( this.animate.bind( this ) );\n    TWEEN.update( )\n    this.setFar( )\n    this.controls.update( )\n    this.render( )\n  }\n\n  render( ) {\n    this.renderer.render( this.scene, this.camera );\n  }\n\n  resizeCanvas( ) {\n    this.camera.aspect = this.domObject.offsetWidth / this.domObject.offsetHeight\n    this.camera.updateProjectionMatrix( )\n    this.renderer.setSize( this.domObject.offsetWidth, this.domObject.offsetHeight )\n  }\n\n  // called on mouseover the render div - tells us we can actually enable interactions\n  // in the threejs window\n  enableEvents( e ) {\n    this.enableKeyobardEvents = true\n  }\n\n  // called on mouseout of the render div - will stop interactions, such as spacebar\n  // for zoom extents, etc. in the threejs window\n  disableEvents( e ) {\n    this.unHighlightObjects( )\n    this.enableKeyobardEvents = false\n  }\n\n  // HIC SUNT DRACONES:\n  // Selection events and mouse interactions below.\n  // Main thing to note:\n  // - Holding down shift will disable the orbit controls and enable draggin a selection box\n  // - Double clicking on an object will zoom to it\n  // - (TODO) Clicking on an object selects it\n  // - (TODO) Clicking outside any objects/selection box will kill current selection\n\n  keydown( event ) {\n    if ( !this.enableKeyobardEvents ) return\n    switch ( event.code ) {\n      case 'Space':\n        this.computeSceneBoundingSphere( )\n        this.zoomExtents( )\n        event.stopPropagation( )\n        break\n      case 'ShiftLeft':\n        if ( !this.isSpinning ) {\n          this.controls.enabled = false\n          this.domObject.style.cursor = 'copy'\n        }\n        break\n      default:\n        break\n    }\n  }\n\n  keyup( event ) {\n    if ( !this.enableKeyobardEvents ) return\n    // console.log( `key: ${event.code}` )\n    switch ( event.code ) {\n      case 'ShiftLeft':\n        this.controls.enabled = true\n        this.domObject.style.cursor = ''\n        break\n      default:\n        break\n    }\n  }\n\n  // we dont' do much on mouse down:\n  // 1) if it's a doubleclick, and we have a hovered object, zoom to it\n  // 2) if the orbit controls are disabled (meaning we're holding down shift for a multiple selection)\n  // then start the selection box point\n  mouseDown( event ) {\n    this.isSpinning = true\n    // if it's a double click\n    if ( Date.now( ) - this.mouseDownTime < 300 && this.hoveredObject !== null )\n      this.zoomToObject( this.hoveredObject )\n\n    if ( this.controls.enabled === false )\n      this.selectionBox.startPoint.set( this.mouse.x, this.mouse.y, 0.5 )\n\n    this.mouseDownTime = Date.now( )\n  }\n\n  mouseUp( event ) {\n    this.isSpinning = false\n    // check if it's a single short click (as opposed to a longer difference caused by moving the orbit controls\n    // or dragging the selection box)\n    if ( Date.now( ) - this.mouseDownTime < 300 ) {\n      if ( this.hoveredObject && this.selectedObjects.findIndex( x => x.userData._id === this.hoveredObject.userData._id ) !== -1 ) {\n        // Inside the selection -> check if it's a single object deselect\n        if ( event.ctrlKey ) {\n          this.removeFromSelection( [ this.hoveredObject ] )\n          // this.emit( 'select-remove-objects', [ this.hoveredObject.userData._id ] )\n          // this.hoveredObject.material.color.copy( this.hoveredObject.material.__preSelectColor )\n          // this.hoveredObject.material.__preHoverColor.copy( this.hoveredObject.material.__preSelectColor ) // set the same prehover color as the original color, otherwise on unhover we set the \"selected\" color back\n        }\n      } else if ( this.hoveredObject ) { // if there is a hovered object...\n        if ( event.shiftKey ) {\n          console.log( 'should add to selection' )\n          this.addToSelection( [ this.hoveredObject ] )\n        } else if ( event.ctrlKey ) {\n          console.log( 'should remove from selection' )\n          this.removeFromSelection( [ this.hoveredObject ] )\n        } else {\n          console.log( 'single selection' )\n          this.clearSelection( )\n          this.addToSelection( [ this.hoveredObject ] )\n          // this.hoveredObject.material.__preSelectColor = this.hoveredObject.material.color.clone( )\n          // this.hoveredObject.material.__preHoverColor = this.selectColor\n          // this.hoveredObject.material.color.copy( this.selectColor )\n\n        }\n      } else { // there is no hovered object, so clear selection!?\n        this.clearSelection( )\n      }\n    } else {\n      // if the controls were disabled, it means we've been selecting objects with the selection box\n      if ( !this.controls.enabled ) {\n        this.emit( 'select-objects', this.selectionBox.collection.map( o => o.userData._id ) )\n      }\n    }\n  }\n\n  onTouchMove( event ) {\n    let x, y\n    if ( event.changedTouches ) {\n      x = event.changedTouches[ 0 ].pageX\n      y = event.changedTouches[ 0 ].pageY\n    } else {\n      x = event.clientX\n      y = event.clientY\n    }\n    let rect = this.domObject.getBoundingClientRect( )\n    x -= rect.left\n    y -= rect.top\n    this.mouse.x = ( x / this.domObject.offsetWidth ) * 2 - 1\n    this.mouse.y = -( y / this.domObject.offsetHeight ) * 2 + 1\n\n    // disallow interactions on color sets\n    if ( this.isSettingColors ) return\n\n    // check if we're dragging a box selection\n    if ( this.selectionHelper.isDown && !this.controls.enabled ) {\n\n      this.selectionBox.endPoint.set( this.mouse.x, this.mouse.y, 0.5 );\n      var allSelected = this.selectionBox.select( )\n      this.addToSelection( allSelected )\n      // for ( var i = 0; i < allSelected.length; i++ ) {\n      //   allSelected[ i ].material.__preSelectColor = allSelected[ i ].material.color.clone( )\n      //   allSelected[ i ].material.color.copy( this.selectColor )\n      // }\n    }\n    // if not, highlight a selected object\n    else if ( !this.isSpinning ) {\n      this.highlightMouseOverObject( )\n    }\n  }\n\n  highlightMouseOverObject( ) {\n    this.raycaster.setFromCamera( this.mouse, this.camera )\n    let intersects = this.raycaster.intersectObjects( [ this.scene ], true )\n    if ( intersects.length > 0 ) {\n      if ( intersects[ 0 ].object !== this.hoveredObject ) {\n        if ( intersects[ 0 ].object.userData.hasOwnProperty( '_id' ) ) {\n          this.domObject.style.cursor = 'pointer'\n          // if there was a pre-exsiting hovered object\n          // unhover it first\n          if ( this.hoveredObject ) {\n            this.hoveredObject.userData.selected ?\n              this.hoveredObject.material.color.copy( this.selectColor ) :\n              this.hoveredObject.material.color.copy( this.hoveredObject.material.__preHoverColor )\n\n            this.hoveredObject.userData.hovered = false\n          }\n          this.hoveredObject = intersects[ 0 ].object\n          this.hoveredObject.userData.hovered = true\n          this.hoveredObject.material.__preHoverColor = this.hoveredObject.material.color.clone( )\n          this.hoveredObject.material.color.copy( this.hoverColor )\n        }\n      }\n    } else {\n      this.domObject.style.cursor = 'default'\n      if ( this.hoveredObject ) {\n        this.hoveredObject.material.color.copy( this.hoveredObject.material.__preHoverColor )\n        this.hoveredObject.userData.hovered = false\n        this.hoveredObject = null\n      }\n    }\n  }\n\n  addToSelection( objects ) {\n    let added = [ ]\n    objects.forEach( ( obj, index ) => {\n      if ( this.selectedObjects.findIndex( x => x.userData._id === obj.userData._id ) === -1 ) {\n        obj.userData.selected = true\n        if ( !obj.userData.hovered ) {\n          obj.material.__preSelectColor = obj.material.color.clone( )\n        } else {\n          obj.material.__preSelectColor = obj.material.__preHoverColor.clone( )\n          obj.material.__preHoverColor.copy( this.selectColor )\n        }\n\n        obj.material.color.copy( this.selectColor )\n        this.selectedObjects.push( obj )\n        added.push( obj.userData._id )\n      }\n      if ( index === objects.length - 1 ) {\n        // TODO: emit added to selection event\n        this.emit( 'select-add-objects', added )\n      }\n    } )\n  }\n\n  removeFromSelection( objects ) {\n    let removed = [ ]\n    objects.forEach( ( obj, index ) => {\n      let myIndex = this.selectedObjects.findIndex( x => x.userData._id === obj.userData._id )\n      if ( myIndex !== -1 ) {\n        obj.userData.selected = false\n        removed.push( obj.userData._id )\n        this.selectedObjects.splice( myIndex, 1 )\n        obj.material.color.copy( obj.material.__preSelectColor )\n        obj.material.__preHoverColor.copy( obj.material.__preSelectColor )\n      }\n      if ( index === objects.length - 1 ) {\n        // TODO: emit removed from selection event\n        this.emit( 'select-remove-objects', removed )\n      }\n    } )\n  }\n\n  clearSelection( ) {\n    this.selectedObjects.forEach( obj => {\n      obj.userData.selected = false\n      obj.material.color.copy( obj.material.__preSelectColor )\n    } )\n    this.emit( 'select-objects', [ ] )\n    this.selectedObjects = [ ]\n  }\n\n  // adds a bunch of speckle objects to the scene. handles conversion and\n  // computes each objects's bounding sphere for faster zoom extents calculation\n  // of the scene bounding sphere.\n  loadObjects( { objs, zoomExtents } ) {\n    objs.forEach( ( obj, index ) => {\n      try {\n        let splitType = obj.type.split( \"/\" )\n        let convertType = splitType.pop( )\n        while ( splitType.length > 0 & !Converter.hasOwnProperty( convertType ) )\n          convertType = splitType.pop( )\n        if ( Converter.hasOwnProperty( convertType ) )\n          Converter[ convertType ]( { obj: obj }, ( err, threeObj ) => {\n            threeObj.userData._id = obj._id\n            threeObj.userData.properties = obj.properties ? flatten( obj.properties, { safe: true } ) : null\n            threeObj.userData.originalColor = threeObj.material.color.clone( )\n            threeObj.geometry.computeBoundingSphere( )\n            threeObj.castShadow = true\n            threeObj.receiveShadow = true\n            this.drawEdges( threeObj, obj._id )\n            this.scene.add( threeObj )\n          } )\n      } catch ( e ) {\n        console.warn( `Something went wrong in the conversion of ${obj._id} (${obj.type})` )\n        console.log( obj )\n        console.log( e )\n        return\n      }\n\n      if ( zoomExtents && ( index === objs.length - 1 ) ) {\n        console.log( this.scene.children.length )\n        this.computeSceneBoundingSphere( )\n        this.zoomExtents( )\n      }\n    } )\n  }\n\n  drawEdges( threeObj, id ) {\n    if ( threeObj.type !== 'Mesh' ) return\n    var objEdges = new THREE.EdgesGeometry( threeObj.geometry, this.viewerSettings.edgesThreshold )\n    var edgeLines = new THREE.LineSegments( objEdges, new THREE.LineBasicMaterial( { color: 0x000000 } ) )\n    edgeLines.userData._id = id\n    this.edgesGroup.add( edgeLines )\n  }\n\n  updateEdges( ) {\n    this.processLargeArray( this.edgesGroup.children, ( obj ) => {\n      this.edgesGroup.remove( obj )\n    } )\n    this.processLargeArray( this.scene.children, ( obj ) => {\n      if ( obj.type !== 'Mesh' ) return\n      this.drawEdges( obj, obj.userData._id )\n    } )\n  }\n\n  // removes an array of objects from the scene and recalculates the scene bounding sphere\n  unloadObjects( { objIds } ) {\n    let toRemove = [ ]\n\n    this.scene.traverse( obj => {\n      if ( obj.userData._id )\n        if ( objIds.indexOf( obj.userData._id ) !== -1 ) toRemove.push( obj )\n    } )\n\n    toRemove.forEach( ( object, index ) => {\n      object.parent.remove( object )\n      if ( index === toRemove.length - 1 ) {\n        this.computeSceneBoundingSphere( )\n        this.zoomExtents( )\n      }\n    } )\n  }\n\n  // sets (updates) the properties field of the objects\n  // (useful if you modify the props outside three)\n  updateObjectsProperties( { objects } ) {\n    this.processLargeArray( objects, ( obj, index ) => {\n      let sceneObject = this.scene.children.find( o => o.userData._id === obj._id )\n      if ( !sceneObject ) return\n      sceneObject.userData.properties = flatten( obj.properties )\n    } )\n  }\n\n  // entry point for any attempt to color things by their properties in the viewer\n  // depending on the property, it will either call \"colorByNumericProperty\" or\n  // \"colorByStringProperty\" (see below)\n  colorByProperty( { propertyName, propagateLegend, colors } ) {\n    console.log( propagateLegend )\n    if ( propagateLegend === null || propagateLegend === undefined )\n      propagateLegend = true\n\n    let first = this.scene.children.find( o => o.userData && o.userData.properties && o.userData.properties[ propertyName ] )\n    if ( !first ) {\n      console.warn( `no property found (${propertyName}) on any scene objects.` )\n      return\n    }\n    if ( this.currentColorByProp === propertyName ) return\n    this.unHighlightObjects( )\n    this.currentColorByProp = propertyName\n\n    let isNumeric = !isNaN( first.userData.properties[ propertyName ] )\n    console.log( `coloring by ${propertyName}, which is (numeric: ${isNumeric})` )\n\n    if ( isNumeric ) this.colorByNumericProperty( { propertyName: propertyName, propagateLegend: propagateLegend, colors } )\n    else this.colorByStringProperty( { propertyName: propertyName, propagateLegend: propagateLegend } )\n  }\n\n  // attempts to color all objects  in the scene by a numeric property, computing its bounds\n  // and generating a gradient from min (blue) to max (pinkish)\n  colorByNumericProperty( { propertyName, propagateLegend, colors } ) {\n    if ( propagateLegend === null || propagateLegend === undefined )\n      propagateLegend = true\n    // compute bounds\n    let min = 10e6,\n      max = -10e6,\n      foundObjs = [ ],\n      toReset = [ ]\n\n    this.isSettingColors = true\n    // TODO: chunkify this loop yo\n    for ( let obj of this.scene.children ) {\n      if ( !( obj.userData && obj.userData.properties && obj.userData.properties[ propertyName ] ) ) {\n        toReset.push( obj )\n        continue\n      }\n      if ( !obj.visible ) continue\n\n      let value = obj.userData.properties[ propertyName ]\n      if ( value > max ) max = value\n      if ( value < min ) min = value\n      foundObjs.push( obj )\n    }\n\n    if ( min === max ) {\n      min -= 1\n      max += 1\n    }\n\n    console.log( `bounds: ${min}, ${max} 🌈` )\n    if ( propagateLegend )\n      this.emit( 'analysis-legend', { propertyName: propertyName, isNumeric: true, min: min, max: max, objectCount: foundObjs.length } )\n    // gen rainbow 🌈\n    let rainbow = new Rainbow( )\n    rainbow.setNumberRange( min, max )\n    rainbow.setSpectrum( ...colors )\n\n    foundObjs.forEach( ( obj, index ) => {\n      let value = obj.userData.properties[ propertyName ],\n        color = null\n\n      if ( !isNaN( value ) && !!value )\n        color = new THREE.Color( `#${rainbow.colourAt( value )}` )\n      else\n        color = new THREE.Color( '#B3B3B3' )\n\n      if ( !obj.userData.selected ) {\n        obj.material._oldColor = obj.material.color\n        obj.material.color.copy( color )\n      } else {\n        obj.material.__preSelectColor.copy( color )\n      }\n\n      if ( index === foundObjs.length - 1 ) {\n        this.isSettingColors = false\n      }\n    } )\n\n    let defaultColor = new THREE.Color( '#B3B3B3' )\n    toReset.forEach( obj => {\n      // if ( !obj.userData.selected ) {\n      //   obj.material._oldColor = obj.material.color\n      if ( obj.material )\n        obj.material.color.copy( defaultColor )\n      // } else {\n      //   obj.material.__preSelectColor.copy( color )\n      // }\n    } )\n  }\n\n  // attempts to color all objects in the scene by a string property\n  // uses colorHasher to get a hex color out of a string\n  colorByStringProperty( { propertyName, propagateLegend } ) {\n    if ( propagateLegend === null || propagateLegend === undefined )\n      propagateLegend = true\n    let toReset = [ ],\n      foundCount = 0\n\n    this.isSettingColors = true\n    // TODO: chunkify this loop yo\n    this.processLargeArray( this.scene.children, ( obj, index ) => {\n      if ( !( obj.userData && obj.userData.properties && obj.userData.properties[ propertyName ] ) ) {\n        toReset.push( obj )\n        return\n      }\n      let value = obj.userData.properties[ propertyName ]\n      let color = null\n      if ( !this.colorTable.hasOwnProperty( value.toString( ) ) ) {\n        if ( value.toString( ) === 'no material' ) {\n          this.colorTable[ value.toString( ) ] = new THREE.Color( '#B3B3B3' )\n        } else {\n          this.colorTable[ value.toString( ) ] = new THREE.Color( this.colorHasher.hex( value.toString( ) ) )\n        }\n      }\n      color = this.colorTable[ value.toString( ) ]\n\n      if ( !obj.userData.selected ) {\n        obj.material._oldColor = obj.material.color\n        obj.material.color.copy( color )\n      } else {\n        obj.material.__preSelectColor.copy( color )\n      }\n\n      foundCount++\n      if ( index === this.scene.children.length - 1 ) {\n        this.isSettingColors = false\n        if ( propagateLegend )\n          this.emit( 'analysis-legend', { propertyName: propertyName, isNumeric: false, objectCount: foundCount } )\n      }\n    }, 5000 )\n\n    let defaultColor = new THREE.Color( '#B3B3B3' )\n    toReset.forEach( obj => {\n      if ( obj.material )\n        obj.material.color.copy( defaultColor )\n    } )\n  }\n\n  colorByVertexArray( { propertyName, colors } ) {\n    let globalMin = Number.MAX_VALUE,\n      globalMax = -Number.MIN_VALUE,\n      toReset = [ ],\n      toColour = [ ]\n\n    for ( let obj of this.scene.children ) {\n      if ( !( obj.userData && obj.userData.properties && obj.userData.properties[ `structural.result.${propertyName}` ] ) ) {\n        toReset.push( obj )\n        continue\n      }\n      let min = Math.min( ...obj.userData.properties[ `structural.result.${propertyName}` ] )\n      let max = Math.max( ...obj.userData.properties[ `structural.result.${propertyName}` ] )\n      if ( min < globalMin ) globalMin = min\n      if ( max > globalMax ) globalMax = max\n      toColour.push( obj )\n    }\n\n    console.log( `👨‍🎨 ::: prop: ${propertyName} ::: min: ${globalMin}; max: ${globalMax}; objs: ${toColour.length}` )\n\n    let rainbow = new Rainbow( )\n    rainbow.setNumberRange( globalMin, globalMax )\n    rainbow.setSpectrum( ...colors )\n\n    for ( let obj of toColour ) {\n      let colors = new Uint8Array( obj.userData.properties[ `structural.result.${propertyName}` ].length * 3 ),\n        k = 0\n\n      for ( let val of obj.userData.properties[ `structural.result.${propertyName}` ] ) {\n        let myColour = hexToRgb( rainbow.colourAt( val ) )\n        colors[ k++ ] = myColour.r\n        colors[ k++ ] = myColour.g\n        colors[ k++ ] = myColour.b\n      }\n      obj.geometry.addAttribute( 'color', new THREE.BufferAttribute( colors, 3, true ) )\n      obj.geometry.attributes.color.needsUpdate = true\n      obj.geometry.colorsNeedUpdate = true\n      obj.material.vertexColors = THREE.VertexColors\n      this.setMaterialOverrides( obj )\n    }\n    this.emit( 'analysis-legend', { propertyName: propertyName, isNumeric: false, min: globalMin, max: globalMax, objectCount: toColour.length } )\n  }\n\n  resetColors( { propagateLegend } ) {\n    if ( propagateLegend === null || propagateLegend === undefined )\n      propagateLegend = true\n\n    let defaultColor = new THREE.Color( '#B3B3B3' )\n\n    for ( let obj of this.scene.children ) {\n      if ( obj.material ) {\n        this.setMaterialOverrides( obj )\n        obj.material.vertexColors = THREE.NoColors\n        obj.material.needsUpdate = true\n      }\n      if ( obj.material ) obj.material.color.copy( defaultColor )\n      continue\n      if ( !obj.material ) continue\n      if ( !( obj.material._oldColor ) ) {\n        obj.material.color.copy( defaultColor )\n        continue\n      }\n\n      obj.material.color.copy( obj.material._oldColor )\n    }\n    this.currentColorByProp = null\n    if ( propagateLegend ) this.emit( 'clear-analysis-legend' )\n  }\n\n  // TODO\n  ghostObjects( objIds ) {}\n  unGhostObjects( objIds ) {}\n\n  // TODO\n  showObjects( objIds ) {\n    if ( objIds.length !== 0 )\n      this.scene.traverse( obj => {\n        if ( objIds.indexOf( obj.userData._id ) !== -1 ) {\n          if ( obj.name !== null ) {\n            if ( obj.name == 'displayEdgesGroup' ) return\n          }\n          obj.visible = true\n        }\n      } )\n    else\n      this.scene.traverse( obj => {\n        if ( obj.name !== null ) {\n          if ( obj.name == 'displayEdgesGroup' ) return\n        }\n        obj.visible = true\n      } )\n  }\n\n  hideObjects( objIds ) {\n    if ( objIds.length !== 0 )\n      this.scene.traverse( obj => {\n        if ( objIds.indexOf( obj.userData._id ) !== -1 )\n          obj.visible = false\n      } )\n    else\n      this.scene.traverse( obj => obj.visible = false )\n  }\n  // leaves only the provided objIds visible\n  isolateObjects( objIds ) {\n    this.scene.children.forEach( obj => {\n      if ( !obj.userData._id ) return\n      if ( objIds.includes( obj.userData._id ) ) obj.visible = true\n      else obj.visible = false\n    } )\n  }\n\n\n  highlightObjects( objIds ) {\n    return // TODO: performance sucks for large object groups\n    if ( this.isSettingColors ) return\n    this.highlightedObjects = objIds\n    let objs = this.scene.children.filter( o => objIds.includes( o.userData._id ) )\n    objs.forEach( obj => {\n      obj.userData.hovered = true\n      obj.material.__preHoverColor = obj.material.color.clone( )\n      obj.material.color.copy( this.hoverColor )\n    } )\n  }\n  unHighlightObjects( objIds ) {\n    return // TODO: performance sucks for large object groups\n    if ( !objIds )\n      objIds = this.highlightedObjects\n\n    let objs = this.scene.children.filter( o => objIds.includes( o.userData._id ) )\n    objs.forEach( obj => {\n      obj.material.color.copy( obj.material.__preHoverColor )\n      obj.userData.hovered = false\n      obj = null\n    } )\n    this.highlightedObjects = [ ]\n  }\n\n  zoomToObject( obj ) {\n    if ( typeof obj === 'string' ) {\n      obj = this.scene.children.find( o => o.userData._id === obj )\n    }\n    if ( !obj ) return\n    let bsphere = obj.geometry.boundingSphere\n    if ( bsphere.radius < 1 ) bsphere.radius = 2\n    // let r = bsphere.radius\n\n    let offset = bsphere.radius / Math.tan( Math.PI / 180.0 * this.controls.object.fov * 0.5 )\n    let vector = new THREE.Vector3( 0, 0, 1 )\n    let dir = vector.applyQuaternion( this.controls.object.quaternion );\n    let newPos = new THREE.Vector3( )\n    dir.multiplyScalar( offset * 1.5 )\n    newPos.addVectors( bsphere.center, dir )\n    this.setCamera( {\n      position: [ newPos.x, newPos.y, newPos.z ],\n      rotation: [ this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z ],\n      target: [ bsphere.center.x, bsphere.center.y, bsphere.center.z ]\n    }, 600 )\n  }\n\n  zoomExtents( ) {\n    this.computeSceneBoundingSphere( )\n    let offset = this.sceneBoundingSphere.radius / Math.tan( Math.PI / 180.0 * this.controls.object.fov * 0.5 )\n    let vector = new THREE.Vector3( 0, 0, 1 )\n    let dir = vector.applyQuaternion( this.controls.object.quaternion );\n    let newPos = new THREE.Vector3( )\n    dir.multiplyScalar( offset * 1.25 )\n    newPos.addVectors( this.sceneBoundingSphere.center, dir )\n    this.setCamera( {\n      position: [ newPos.x, newPos.y, newPos.z ],\n      rotation: [ this.camera.rotation.x, this.camera.rotation.y, this.camera.rotation.z ],\n      target: [ this.sceneBoundingSphere.center.x, this.sceneBoundingSphere.center.y, this.sceneBoundingSphere.center.z ]\n    }, 450 )\n  }\n\n  computeSceneBoundingSphere( ) {\n    let center = null,\n      radius = 0,\n      k = 0\n\n    for ( let obj of this.scene.children ) {\n      if ( !obj.userData._id ) continue\n      if ( !obj.geometry ) continue\n\n      if ( k === 0 ) {\n        center = new THREE.Vector3( obj.geometry.boundingSphere.center.x, obj.geometry.boundingSphere.center.y, obj.geometry.boundingSphere.center.z )\n        radius = obj.geometry.boundingSphere.radius\n        k++\n        continue\n      }\n\n      let otherDist = obj.geometry.boundingSphere.radius + center.distanceTo( obj.geometry.boundingSphere.center )\n      if ( radius < otherDist )\n        radius = otherDist\n\n      center.x += obj.geometry.boundingSphere.center.x\n      center.y += obj.geometry.boundingSphere.center.y\n      center.z += obj.geometry.boundingSphere.center.z\n      center.divideScalar( 2 )\n\n      k++\n    }\n\n    if ( !center ) {\n      center = new THREE.Vector3( 0, 0, 0 )\n    }\n\n    this.sceneBoundingSphere = { center: center ? center : new THREE.Vector3( ), radius: radius > 1 ? radius * 1.1 : 100 }\n  }\n\n  setFar( ) {\n    let camDistance = this.camera.position.distanceTo( this.sceneBoundingSphere.center )\n    this.camera.far = 3 * this.sceneBoundingSphere.radius + camDistance * 3 // 3 is lucky\n    this.camera.updateProjectionMatrix( )\n  }\n\n  setCamera( where, time ) {\n    let self = this\n    let duration = time ? time : 350\n    //position\n    new TWEEN.Tween( self.camera.position ).to( { x: where.position[ 0 ], y: where.position[ 1 ], z: where.position[ 2 ] }, duration ).easing( TWEEN.Easing.Quadratic.InOut ).start( )\n    // rotation\n    new TWEEN.Tween( self.camera.rotation ).to( { x: where.rotation[ 0 ], y: where.rotation[ 1 ], z: where.rotation[ 2 ] }, duration ).easing( TWEEN.Easing.Quadratic.InOut ).start( )\n    // controls center\n    new TWEEN.Tween( self.controls.target ).to( { x: where.target[ 0 ], y: where.target[ 1 ], z: where.target[ 2 ] }, duration ).onUpdate( ( ) => {\n      self.controls.update( );\n      if ( this.x === where.target[ 0 ] )\n        console.log( 'camera finished stuff' )\n    } ).easing( TWEEN.Easing.Quadratic.InOut ).start( )\n  }\n\n  //Generic helpers\n  processLargeArray( array, fn, chunk, context ) {\n    context = context || window\n    chunk = chunk || 500 // 100 elems at a time\n    let index = 0\n\n    function doChunk( ) {\n      let count = chunk\n      while ( count-- && index < array.length ) {\n        fn.call( context, array[ index ], index, array )\n          ++index\n      }\n      if ( index < array.length )\n        setTimeout( doChunk, 1 )\n    }\n    doChunk( )\n  }\n\n  processLargeArrayAsync( array, fn, maxTimePerChunk, context ) {\n    context = context || window\n    maxTimePerChunk = maxTimePerChunk || 200\n    let index = 0\n\n    function doChunk( ) {\n      let startTime = Date.now( )\n      while ( index < array.length && ( Date.now( ) - startTime ) <= maxTimePerChunk ) {\n        // callback called with args (value, index, array)\n        fn.call( context, array[ index ], index, array )\n          ++index\n      }\n      if ( index < array.length ) setTimeout( doChunk, 1 )\n    }\n    doChunk( )\n  }\n\n  updateViewerSettings( ) {\n    this.setDefaultMeshMaterial( )\n    this.updateMaterialManager( )\n    this.shadowLight.visible = this.viewerSettings.castShadows\n    this.edgesGroup.visible = this.viewerSettings.showEdges\n    if ( this.edgesThreshold != this.viewerSettings.edgesThreshold ) {\n      this.updateEdges( )\n    }\n    this.edgesThreshold = this.viewerSettings.edgesThreshold\n  }\n\n  setDefaultMeshMaterial( ) {\n    for ( let obj of this.scene.children ) {\n      if ( obj.type === 'Mesh' ) {\n        if ( obj.material ) {\n          this.setMaterialOverrides( obj )\n        }\n      }\n    }\n  }\n\n  setMaterialOverrides( obj ) {\n    obj.material.opacity = this.viewerSettings.meshOverrides.opacity / 100\n    let specColor = new THREE.Color( )\n    specColor.setHSL( 0, 0, this.viewerSettings.meshOverrides.specular / 100 )\n    obj.material.specular = specColor\n    obj.material.needsUpdate = true\n  }\n\n  updateMaterialManager( ) {\n    let specColor = new THREE.Color( )\n    specColor.setHSL( 0, 0, this.viewerSettings.meshOverrides.specular / 100 )\n    Converter.materialManager.defaultMeshMat.specular = specColor\n    Converter.materialManager.defaultMeshMat.opacity = this.viewerSettings.meshOverrides.opacity / 100\n  }\n}\n\n\n// Helper\nfunction hexToRgb( hex ) {\n  // Expand shorthand form (e.g. \"03F\") to full form (e.g. \"0033FF\")\n  var shorthandRegex = /^#?([a-f\\d])([a-f\\d])([a-f\\d])$/i;\n  hex = hex.replace( shorthandRegex, function ( m, r, g, b ) {\n    return r + r + g + g + b + b;\n  } );\n\n  var result = /^#?([a-f\\d]{2})([a-f\\d]{2})([a-f\\d]{2})$/i.exec( hex );\n  return result ? {\n    r: parseInt( result[ 1 ], 16 ),\n    g: parseInt( result[ 2 ], 16 ),\n    b: parseInt( result[ 3 ], 16 )\n  } : null;\n}\n"]}]}