{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleConverter.js","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleConverter.js","mtime":1609071089422},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.to-string\";\nimport _Object$values from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/values\";\nimport \"core-js/modules/web.dom.iterable\";\nimport _construct from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/construct\";\nimport _toConsumableArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport _classCallCheck from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/classCallCheck\";\nimport _createClass from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/createClass\";\nimport * as THREE from 'three';\n\nvar MaterialManager =\n/*#__PURE__*/\nfunction () {\n  function MaterialManager() {\n    _classCallCheck(this, MaterialManager);\n\n    this.meshMaterialTable = [];\n    this.lineMaterialTable = [];\n    this.pointMaterialTable = [];\n    this.meshVertexMat = null;\n    this.lineVertexMat = null;\n    this.pointVertexMat = null;\n    this.meshGhostMat = null;\n    this.lineGhostMat = null;\n    this.pointGhostMat = null;\n    this.meshHighlightMat = null;\n    this.lineHighlightMat = null;\n    this.pointHighlightMat = null;\n    this.defaultMeshMat = new THREE.MeshPhongMaterial({\n      color: new THREE.Color('#A9A9A9'),\n      specular: new THREE.Color('#C8FFE7'),\n      shininess: 30,\n      side: THREE.DoubleSide,\n      transparent: true,\n      wireframe: false,\n      opacity: 0.84\n    });\n    this.defaultLineMat = {};\n    this.defaultPointsMat = {};\n  } // TODO: ghost materials\n\n\n  _createClass(MaterialManager, [{\n    key: \"getMeshGhostMat\",\n    value: function getMeshGhostMat() {\n      if (this.meshGhostMat) return this.meshGhostMat;\n      this.meshGhostMat = new THREE.MeshPhongMaterial({\n        color: new THREE.Color('#E6E6E6'),\n        specular: new THREE.Color('#FFECB3'),\n        shininess: 30,\n        side: THREE.DoubleSide,\n        transparent: true,\n        wireframe: false,\n        opacity: 0.1,\n        vertexColors: THREE.VertexColors\n      });\n      return this.meshGhostMat;\n    }\n  }, {\n    key: \"getMeshMaterial\",\n    value: function getMeshMaterial(color) {\n      var c = colourNameToHex(color.hex);\n      if (c !== false) color.hex = c;\n      var myMat = this.defaultMeshMat.clone();\n      myMat.color = new THREE.Color(color.hex);\n      return myMat;\n    }\n  }, {\n    key: \"getLineMaterial\",\n    value: function getLineMaterial(color) {\n      var c = colourNameToHex(color.hex);\n      if (c !== false) color.hex = c;\n      return new THREE.LineBasicMaterial({\n        color: new THREE.Color(color.hex),\n        linewidth: 1,\n        opacity: color.a,\n        transparent: true\n      });\n    }\n  }, {\n    key: \"getPointsMaterial\",\n    value: function getPointsMaterial(color) {\n      var c = colourNameToHex(color.hex);\n      if (c !== false) color.hex = c;\n      return new THREE.PointsMaterial({\n        color: new THREE.Color(color.hex),\n        sizeAttenuation: false,\n        transparent: true,\n        size: 5,\n        opacity: color.a\n      });\n    }\n  }]);\n\n  return MaterialManager;\n}(); // the conversion logic; needs cleanup\n\n\nvar Converter = {\n  materialManager: new MaterialManager(),\n  defaultColor: new THREE.Color('#909090'),\n  // https://stackoverflow.com/a/1568551/3446736\n  getSignedVolumeOfTriangle: function getSignedVolumeOfTriangle(p1x, p1y, p1z, p2x, p2y, p2z, p3x, p3y, p3z) {\n    var v321 = p3x * p2y * p1z;\n    var v231 = p2x * p3y * p1z;\n    var v312 = p3x * p1y * p2z;\n    var v132 = p1x * p3y * p2z;\n    var v213 = p2x * p1y * p3z;\n    var v123 = p1x * p2y * p3z;\n    return 1.0 / 6.0 * (-v321 + v231 + v312 - v132 - v213 + v123);\n  },\n  getMeshVolume: function getMeshVolume(obj) {\n    if (!(obj instanceof THREE.Mesh)) return 0; // TODO: Check for V+F-E = 2 (ie is closed mesh) https://gamedev.stackexchange.com/a/119368\n\n    var buffGeom = obj.geometry;\n    var volumes = [];\n\n    for (var i = 0; i < buffGeom.index.count; i += 3) {\n      var A = buffGeom.index.array[i],\n          B = buffGeom.index.array[i + 1],\n          C = buffGeom.index.array[i + 2];\n      volumes.push(this.getSignedVolumeOfTriangle(buffGeom.attributes.position.array[A * 3 + 0], buffGeom.attributes.position.array[A * 3 + 1], buffGeom.attributes.position.array[A * 3 + 2], buffGeom.attributes.position.array[B * 3 + 0], buffGeom.attributes.position.array[B * 3 + 1], buffGeom.attributes.position.array[B * 3 + 2], buffGeom.attributes.position.array[C * 3 + 0], buffGeom.attributes.position.array[C * 3 + 1], buffGeom.attributes.position.array[C * 3 + 2]));\n    }\n\n    var sum = volumes.reduce(function (a, b) {\n      return a + b;\n    }, 0);\n    console.log(sum);\n    return sum > 0 ? sum : null;\n  },\n  Point: function Point(args, cb) {\n    var _this = this;\n\n    var geometry = new THREE.Geometry();\n    geometry.vertices.push(_construct(THREE.Vector3, _toConsumableArray(args.obj.value)));\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this.defaultColor);\n    });\n    var point = new THREE.Points(geometry, this.materialManager.getPointsMaterial(args.obj.color));\n    cb(null, point);\n  },\n  Vector: function Vector(args, cb) {\n    var _this2 = this;\n\n    var v = _construct(THREE.Vector3, _toConsumableArray(args.obj.value)); //if there's an origin in object.properties, render the vector as a line\n\n\n    if (args.obj.properties) {\n      if (args.obj.properties.origin) {\n        origin = _construct(THREE.Vector3, _toConsumableArray(args.obj.origin));\n        var geometry = new THREE.Geometry();\n        geometry.vertices.push(v);\n        geometry.vertices.push(origin);\n        geometry.vertices.forEach(function (v, i) {\n          geometry.colors.push(_this2.defaultColor);\n        });\n        var line = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n        line.hash = args.obj.hash;\n        cb(null, line);\n      }\n    } //otherwise warn the user\n\n\n    console.warn(\"Can't render vectors without an origin point\");\n  },\n  Plane: function Plane(args, cb) {\n    var _this3 = this,\n        _ref;\n\n    //make planeSize a setting in the viewer\n    var planeSize = 20;\n    var v1 = new THREE.Vector3(0, 0, 1);\n\n    var v2 = _construct(THREE.Vector3, _toConsumableArray(args.obj.Normal.value));\n\n    var q = new THREE.Quaternion();\n    q.setFromUnitVectors(v1, v2);\n    var geometry = new THREE.PlaneGeometry(planeSize, planeSize);\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this3.defaultColor);\n    });\n    var plane = new THREE.Mesh(geometry, this.materialManager.getMeshMaterial(args.obj.color));\n    plane.geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(q));\n    plane.geometry.applyMatrix((_ref = new THREE.Matrix4()).makeTranslation.apply(_ref, _toConsumableArray(args.obj.Origin.value)));\n    plane.hash = args.obj.hash;\n    cb(null, plane);\n  },\n  Line: function Line(args, cb) {\n    var _this4 = this;\n\n    var geometry = new THREE.Geometry();\n    geometry.vertices.push(new THREE.Vector3(args.obj.value[0], args.obj.value[1], args.obj.value[2]));\n    geometry.vertices.push(new THREE.Vector3(args.obj.value[3], args.obj.value[4], args.obj.value[5])); // prepare for potential coloring!\n\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this4.defaultColor);\n    });\n    var line = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n    line.hash = args.obj.hash;\n    cb(null, line);\n  },\n  Rectangle: function Rectangle(obj, cb) {\n    console.warn('TODO', args.obj.type);\n  },\n  Circle: function Circle(args, cb) {\n    var _this5 = this,\n        _ref2;\n\n    var origin = args.obj.center.value;\n    var radius = args.obj.radius;\n    var v1 = new THREE.Vector3(0, 0, 1);\n\n    var v2 = _construct(THREE.Vector3, _toConsumableArray(args.obj.normal.value));\n\n    var q = new THREE.Quaternion();\n    q.setFromUnitVectors(v1, v2);\n    var curve = new THREE.EllipseCurve(0, 0, radius, radius, 0, 2 * Math.PI, false, 0);\n    var points = curve.getPoints(50);\n    var geometry = new THREE.Geometry().setFromPoints(points); // prepare for potential coloring!\n\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this5.defaultColor);\n    });\n    var circle = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n    circle.geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(q));\n    circle.geometry.applyMatrix((_ref2 = new THREE.Matrix4()).makeTranslation.apply(_ref2, _toConsumableArray(origin)));\n    circle.hash = args.obj.hash;\n    cb(null, circle);\n  },\n  Arc: function Arc(args, cb) {\n    var _this6 = this,\n        _ref3;\n\n    var radius = args.obj.radius;\n    var startAngle = args.obj.startAngle;\n    var endAngle = args.obj.endAngle;\n    var v1 = new THREE.Vector3(0, 0, 1);\n\n    var v2 = _construct(THREE.Vector3, _toConsumableArray(args.obj.plane.normal.value));\n\n    var q = new THREE.Quaternion();\n    q.setFromUnitVectors(v1, v2);\n    var curve = new THREE.EllipseCurve(0, 0, radius, radius, startAngle, endAngle, false, 0);\n    var points = curve.getPoints(50);\n    var geometry = new THREE.Geometry().setFromPoints(points); // prepare for potential coloring!\n\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this6.defaultColor);\n    });\n    var arc = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n    arc.geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(q));\n    arc.geometry.applyMatrix((_ref3 = new THREE.Matrix4()).makeTranslation.apply(_ref3, _toConsumableArray(args.obj.plane.origin.value)));\n    arc.hash = args.obj.hash;\n    cb(null, arc);\n  },\n  Ellipse: function Ellipse(args, cb) {\n    var _this7 = this,\n        _ref4;\n\n    var xRadius = args.obj.firstRadius;\n    var yRadius = args.obj.secondRadius;\n    var startAngle = args.obj.startAngle;\n    var endAngle = args.obj.endAngle;\n    var v1 = new THREE.Vector3(0, 0, 1);\n\n    var v2 = _construct(THREE.Vector3, _toConsumableArray(args.obj.plane.Normal.value));\n\n    var q = new THREE.Quaternion();\n    q.setFromUnitVectors(v1, v2);\n    var curve = new THREE.EllipseCurve(0, 0, radius, radius, startAngle, endAngle, false, 0);\n    var points = curve.getPoints(50);\n    var geometry = new THREE.Geometry().setFromPoints(points); // prepare for potential coloring!\n\n    geometry.vertices.forEach(function (v, i) {\n      geometry.colors.push(_this7.defaultColor);\n    });\n    var arc = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n    arc.geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(q));\n    arc.geometry.applyMatrix((_ref4 = new THREE.Matrix4()).makeTranslation.apply(_ref4, _toConsumableArray(args.obj.plane.Origin.value)));\n    arc.hash = args.obj.hash;\n    cb(null, arc);\n  },\n  Extrusion: function Extrusion(args, cb) {\n    var _this8 = this;\n\n    var m = new THREE.Matrix4();\n    var mInverse = new THREE.Matrix4();\n\n    var xform = _Object$values(args.obj.profileTransformation);\n\n    m.fromArray(xform.slice(0, 16));\n    m.transpose();\n    mInverse = m.clone();\n    mInverse.getInverse(m);\n    var type = args.obj.profile.type;\n    var pts = [];\n    args.obj.profile.color = args.obj.color;\n    this[args.obj.profile.type]({\n      obj: args.obj.profile,\n      layer: args.layer\n    }, function (err, obj) {\n      obj.geometry.applyMatrix(mInverse);\n      var values = obj.geometry.vertices;\n\n      for (var i = 0, l = values.length; i < l; ++i) {\n        pts.push(new THREE.Vector2(values[i].x, values[i].y));\n      }\n    });\n    var shape = new THREE.Shape(pts);\n\n    var _loop = function _loop() {\n      var holeProfile = null;\n      var holePts = [];\n      args.obj.profiles[i].color = args.obj.color;\n\n      _this8[args.obj.profiles[i].type]({\n        obj: args.obj.profiles[i],\n        layer: args.layer\n      }, function (err, obj) {\n        holeProfile = obj;\n      });\n\n      holeProfile.geometry.applyMatrix(mInverse);\n      holeProfile.geometry.vertices.forEach(function (vertex) {\n        holePts.push(new THREE.Vector2(vertex.x, vertex.y));\n      });\n      var holePath = new THREE.Path(holePts);\n      shape.holes.push(holePath);\n    };\n\n    for (var i = 1; i < args.obj.profiles.length; i++) {\n      _loop();\n    }\n\n    var path = new THREE.LineCurve(args.obj.pathStart, args.obj.pathEnd);\n    var extrudePath = new THREE.CurvePath();\n    extrudePath.add(path);\n    var extrudeSettings = {\n      depth: args.obj.length,\n      bevelEnabled: false\n    };\n    var geometry = new THREE.ExtrudeBufferGeometry(shape, extrudeSettings);\n    geometry.applyMatrix(m);\n    var extrusion = new THREE.Mesh(geometry, this.materialManager.getMeshMaterial(args.obj.color));\n    extrusion.hash = args.obj.hash;\n    cb(null, extrusion);\n  },\n  Box: function Box(args, cb) {\n    var _ref5;\n\n    // console.log(args.obj)\n    var width = args.obj.xSize.end - args.obj.xSize.start;\n    var height = args.obj.ySize.end - args.obj.ySize.start;\n    var depth = args.obj.zSize.end - args.obj.zSize.start;\n    var origin = args.obj.basePlane.origin.value;\n    var v1 = new THREE.Vector3(0, 0, 1);\n\n    var v2 = _construct(THREE.Vector3, _toConsumableArray(args.obj.basePlane.normal.value));\n\n    var q = new THREE.Quaternion();\n    q.setFromUnitVectors(v1, v2);\n    var geometry = new THREE.BoxBufferGeometry(width, height, depth);\n    var box = new THREE.Mesh(geometry, this.materialManager.getMeshMaterial(args.obj.color));\n    box.geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(q));\n    box.geometry.applyMatrix((_ref5 = new THREE.Matrix4()).makeTranslation.apply(_ref5, _toConsumableArray(origin)));\n    box.geometry.verticesNeedUpdate = true;\n    box.hash = args.obj.hash;\n    cb(null, box);\n  },\n  Structural1DElementPolyline: function Structural1DElementPolyline(args, cb) {\n    if (args.obj.properties.structural.resultVertices !== undefined) args.obj.value = args.obj.properties.structural.resultVertices;\n    this.Polyline({\n      obj: args.obj\n    }, function (err, obj) {\n      if (err) return cb(err, null);\n      return cb(null, obj);\n    });\n  },\n  Structural1DElement: function Structural1DElement(args, cb) {\n    if (args.obj.properties.structural.resultVertices !== undefined) args.obj.value = args.obj.properties.structural.resultVertices;\n    this.Polyline({\n      obj: args.obj\n    }, function (err, obj) {\n      if (err) return cb(err, null);\n      return cb(null, obj);\n    });\n  },\n  Polyline: function Polyline(args, cb) {\n    var geometry = new THREE.BufferGeometry();\n    if (args.obj.closed) args.obj.value.push(args.obj.value[0], args.obj.value[1], args.obj.value[2]);\n    geometry.addAttribute('position', new THREE.Float32BufferAttribute(args.obj.value, 3));\n    geometry.computeBoundingSphere();\n    var polyline = new THREE.Line(geometry, this.materialManager.getLineMaterial(args.obj.color));\n    polyline.hash = args.obj.hash;\n    cb(null, polyline);\n  },\n  Polycurve: function Polycurve(args, cb) {\n    for (var i in args.obj.segments) {\n      var segment = args.obj.segments[i];\n      segment.color = args.obj.color;\n      this[segment.type]({\n        obj: segment,\n        layer: args.layer\n      }, function (err, poly) {\n        if (err) return cb(err);\n        return cb(null, poly);\n      });\n    }\n  },\n  Annotation: function Annotation(args, cb) {\n    console.warn('TODO', args.obj.type);\n  },\n  Curve: function Curve(args, cb) {\n    args.obj.displayValue.color = args.obj.color;\n    this.Polyline({\n      obj: args.obj.displayValue,\n      layer: args.layer\n    }, function (err, poly) {\n      if (err) return cb(err);\n      return cb(null, poly);\n    });\n  },\n  Mesh: function Mesh(args, cb) {\n    var obj = args.obj;\n    var geometry = new THREE.BufferGeometry();\n    var vertices = [];\n    var indices = [];\n    var k = 0;\n\n    while (k < obj.faces.length) {\n      // QUAD FACE\n      if (obj.faces[k] === 1) {\n        indices.push(obj.faces[k + 1], obj.faces[k + 2], obj.faces[k + 3]);\n        indices.push(obj.faces[k + 1], obj.faces[k + 3], obj.faces[k + 4]);\n        k += 5;\n      } // TRIANGLE FACE\n      else if (obj.faces[k] === 0) {\n          indices.push(obj.faces[k + 1], obj.faces[k + 2], obj.faces[k + 3]);\n          k += 4;\n        }\n    }\n\n    geometry.setIndex(indices);\n    geometry.addAttribute('position', new THREE.Float32BufferAttribute(obj.vertices, 3));\n    geometry.computeFaceNormals();\n    geometry.computeVertexNormals();\n    var mesh = new THREE.Mesh(geometry, this.materialManager.getMeshMaterial(args.obj.color)); // NOTE: needed to rematch with face arr colors\n\n    mesh.userData.originalFaceArray = obj.faces;\n    return cb(null, mesh);\n  },\n  Brep: function Brep(args, cb) {\n    args.obj.displayValue.color = args.obj.color;\n    this.Mesh({\n      obj: args.obj.displayValue\n    }, function (err, obj) {\n      if (err) return cb(err, null);\n      return cb(null, obj);\n    });\n  }\n}; // export\n\nexport { Converter }; // Helper functions below\n\nvar worldXY = {\n  origin: {\n    value: [0, 0, 0]\n  },\n  xdir: {\n    value: [1, 0, 0]\n  },\n  ydir: {\n    value: [0, 1, 0]\n  },\n  normal: {\n    value: [0, 0, 1]\n  }\n};\n\nfunction planeToPlane(geometry, plane1, plane2) {\n  var qX = new THREE.Quaternion();\n  var qY = new THREE.Quaternion();\n  var qZ = new THREE.Quaternion(); // console.log(\"plane1:\", plane1)\n  // console.log(\"plane2:\", plane2)\n\n  qX.setFromUnitVectors(_construct(THREE.Vector3, _toConsumableArray(plane1.xdir.value)), _construct(THREE.Vector3, _toConsumableArray(plane2.xdir.value)));\n  qY.setFromUnitVectors(_construct(THREE.Vector3, _toConsumableArray(plane1.ydir.value)), _construct(THREE.Vector3, _toConsumableArray(plane2.ydir.value)));\n  qZ.setFromUnitVectors(_construct(THREE.Vector3, _toConsumableArray(plane1.normal.value)), _construct(THREE.Vector3, _toConsumableArray(plane2.normal.value)));\n  var translateVector = [plane2.origin.value[0] - plane1.origin.value[0], plane2.origin.value[1] - plane1.origin.value[1], plane2.origin.value[2] - plane1.origin.value[2]];\n  geometry.applyMatrix(new THREE.Matrix4().makeRotationFromQuaternion(qX)); // geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( qY ) )\n  // geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( qZ ) )\n\n  geometry.translate.apply(geometry, translateVector);\n} // (c) https://stackoverflow.com/a/1573141/3446736\n\n\nfunction colourNameToHex(colour) {\n  var colours = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred \": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgrey\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370d8\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#d87093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\"\n  };\n  if (typeof colours[colour.toLowerCase()] != 'undefined') return colours[colour.toLowerCase()];\n  return false;\n}\n\nfunction argbToRGB(color) {\n  return '#' + ('000000' + (color & 0xFFFFFF).toString(16)).slice(-6);\n}",{"version":3,"sources":["/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/renderer/SpeckleConverter.js"],"names":["THREE","MaterialManager","meshMaterialTable","lineMaterialTable","pointMaterialTable","meshVertexMat","lineVertexMat","pointVertexMat","meshGhostMat","lineGhostMat","pointGhostMat","meshHighlightMat","lineHighlightMat","pointHighlightMat","defaultMeshMat","MeshPhongMaterial","color","Color","specular","shininess","side","DoubleSide","transparent","wireframe","opacity","defaultLineMat","defaultPointsMat","vertexColors","VertexColors","c","colourNameToHex","hex","myMat","clone","LineBasicMaterial","linewidth","a","PointsMaterial","sizeAttenuation","size","Converter","materialManager","defaultColor","getSignedVolumeOfTriangle","p1x","p1y","p1z","p2x","p2y","p2z","p3x","p3y","p3z","v321","v231","v312","v132","v213","v123","getMeshVolume","obj","Mesh","buffGeom","geometry","volumes","i","index","count","A","array","B","C","push","attributes","position","sum","reduce","b","console","log","Point","args","cb","Geometry","vertices","Vector3","value","forEach","v","colors","point","Points","getPointsMaterial","Vector","properties","origin","line","Line","getLineMaterial","hash","warn","Plane","planeSize","v1","v2","Normal","q","Quaternion","setFromUnitVectors","PlaneGeometry","plane","getMeshMaterial","applyMatrix","Matrix4","makeRotationFromQuaternion","makeTranslation","Origin","Rectangle","type","Circle","center","radius","normal","curve","EllipseCurve","Math","PI","points","getPoints","setFromPoints","circle","Arc","startAngle","endAngle","arc","Ellipse","xRadius","firstRadius","yRadius","secondRadius","Extrusion","m","mInverse","xform","profileTransformation","fromArray","slice","transpose","getInverse","profile","pts","layer","err","values","l","length","Vector2","x","y","shape","Shape","holeProfile","holePts","profiles","vertex","holePath","Path","holes","path","LineCurve","pathStart","pathEnd","extrudePath","CurvePath","add","extrudeSettings","depth","bevelEnabled","ExtrudeBufferGeometry","extrusion","Box","width","xSize","end","start","height","ySize","zSize","basePlane","BoxBufferGeometry","box","verticesNeedUpdate","Structural1DElementPolyline","structural","resultVertices","undefined","Polyline","Structural1DElement","BufferGeometry","closed","addAttribute","Float32BufferAttribute","computeBoundingSphere","polyline","Polycurve","segments","segment","poly","Annotation","Curve","displayValue","indices","k","faces","setIndex","computeFaceNormals","computeVertexNormals","mesh","userData","originalFaceArray","Brep","worldXY","xdir","ydir","planeToPlane","plane1","plane2","qX","qY","qZ","translateVector","translate","colour","colours","toLowerCase","argbToRGB","toString"],"mappings":"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","sourcesContent":["import * as THREE from 'three'\n\nclass MaterialManager {\n  constructor( ) {\n    this.meshMaterialTable = [ ]\n    this.lineMaterialTable = [ ]\n    this.pointMaterialTable = [ ]\n    this.meshVertexMat = null\n    this.lineVertexMat = null\n    this.pointVertexMat = null\n    this.meshGhostMat = null\n    this.lineGhostMat = null\n    this.pointGhostMat = null\n    this.meshHighlightMat = null\n    this.lineHighlightMat = null\n    this.pointHighlightMat = null\n\n    this.defaultMeshMat = new THREE.MeshPhongMaterial( {\n      color: new THREE.Color( '#A9A9A9' ),\n      specular: new THREE.Color( '#C8FFE7' ),\n      shininess: 30,\n      side: THREE.DoubleSide,\n      transparent: true,\n      wireframe: false,\n      opacity: 0.84\n    } )\n\n    this.defaultLineMat = {}\n    this.defaultPointsMat = {}\n\n  }\n\n  // TODO: ghost materials\n  getMeshGhostMat( ) {\n    if ( this.meshGhostMat ) return this.meshGhostMat\n    this.meshGhostMat = new THREE.MeshPhongMaterial( {\n      color: new THREE.Color( '#E6E6E6' ),\n      specular: new THREE.Color( '#FFECB3' ),\n      shininess: 30,\n      side: THREE.DoubleSide,\n      transparent: true,\n      wireframe: false,\n      opacity: 0.1,\n      vertexColors: THREE.VertexColors\n    } )\n    return this.meshGhostMat\n  }\n\n  getMeshMaterial( color ) {\n    let c = colourNameToHex( color.hex )\n    if ( c !== false ) color.hex = c\n\n    let myMat = this.defaultMeshMat.clone( )\n    myMat.color = new THREE.Color( color.hex )\n    return myMat\n  }\n\n  getLineMaterial( color ) {\n    let c = colourNameToHex( color.hex )\n    if ( c !== false ) color.hex = c\n    return new THREE.LineBasicMaterial( {\n      color: new THREE.Color( color.hex ),\n      linewidth: 1,\n      opacity: color.a,\n      transparent: true\n    } )\n  }\n\n  getPointsMaterial( color ) {\n    let c = colourNameToHex( color.hex )\n    if ( c !== false ) color.hex = c\n    return new THREE.PointsMaterial( {\n      color: new THREE.Color( color.hex ),\n      sizeAttenuation: false,\n      transparent: true,\n      size: 5,\n      opacity: color.a\n    } )\n  }\n}\n\n// the conversion logic; needs cleanup\nlet Converter = {\n  materialManager: new MaterialManager( ),\n  defaultColor: new THREE.Color( '#909090' ),\n\n  // https://stackoverflow.com/a/1568551/3446736\n  getSignedVolumeOfTriangle( p1x, p1y, p1z, p2x, p2y, p2z, p3x, p3y, p3z ) {\n    let v321 = p3x * p2y * p1z\n    let v231 = p2x * p3y * p1z\n    let v312 = p3x * p1y * p2z\n    let v132 = p1x * p3y * p2z\n    let v213 = p2x * p1y * p3z\n    let v123 = p1x * p2y * p3z\n    return ( 1.0 / 6.0 ) * ( -v321 + v231 + v312 - v132 - v213 + v123 )\n  },\n  getMeshVolume( obj ) {\n    if ( !( obj instanceof THREE.Mesh ) ) return 0\n\n    // TODO: Check for V+F-E = 2 (ie is closed mesh) https://gamedev.stackexchange.com/a/119368\n    let buffGeom = obj.geometry\n    let volumes = [ ]\n    for ( let i = 0; i < buffGeom.index.count; i += 3 ) {\n      let A = buffGeom.index.array[ i ],\n        B = buffGeom.index.array[ i + 1 ],\n        C = buffGeom.index.array[ i + 2 ]\n\n      volumes.push( this.getSignedVolumeOfTriangle(\n        buffGeom.attributes.position.array[ A * 3 + 0 ], buffGeom.attributes.position.array[ A * 3 + 1 ], buffGeom.attributes.position.array[ A * 3 + 2 ],\n        buffGeom.attributes.position.array[ B * 3 + 0 ], buffGeom.attributes.position.array[ B * 3 + 1 ], buffGeom.attributes.position.array[ B * 3 + 2 ],\n        buffGeom.attributes.position.array[ C * 3 + 0 ], buffGeom.attributes.position.array[ C * 3 + 1 ], buffGeom.attributes.position.array[ C * 3 + 2 ],\n      ) )\n    }\n    let sum = volumes.reduce( ( a, b ) => a + b, 0 )\n    console.log( sum )\n    return sum > 0 ? sum : null\n  },\n\n  Point( args, cb ) {\n    let geometry = new THREE.Geometry( )\n    geometry.vertices.push( new THREE.Vector3( ...args.obj.value ) )\n\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let point = new THREE.Points( geometry, this.materialManager.getPointsMaterial( args.obj.color ) )\n    cb( null, point )\n  },\n\n  Vector( args, cb ) {\n    let v = new THREE.Vector3( ...args.obj.value )\n    //if there's an origin in object.properties, render the vector as a line\n    if ( args.obj.properties ) {\n      if ( args.obj.properties.origin ) {\n        origin = new THREE.Vector3( ...args.obj.origin )\n        let geometry = new THREE.Geometry( )\n        geometry.vertices.push( v )\n        geometry.vertices.push( origin )\n        geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n        let line = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n        line.hash = args.obj.hash\n        cb( null, line )\n      }\n    }\n    //otherwise warn the user\n    console.warn( \"Can't render vectors without an origin point\" )\n  },\n\n  Plane( args, cb ) {\n    //make planeSize a setting in the viewer\n    let planeSize = 20\n    let v1 = new THREE.Vector3( 0, 0, 1 )\n    let v2 = new THREE.Vector3( ...args.obj.Normal.value )\n    let q = new THREE.Quaternion( )\n    q.setFromUnitVectors( v1, v2 )\n    let geometry = new THREE.PlaneGeometry( planeSize, planeSize )\n\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let plane = new THREE.Mesh( geometry, this.materialManager.getMeshMaterial( args.obj.color ) )\n    plane.geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( q ) );\n    plane.geometry.applyMatrix( new THREE.Matrix4( ).makeTranslation( ...args.obj.Origin.value ) );\n    plane.hash = args.obj.hash\n    cb( null, plane )\n  },\n\n  Line( args, cb ) {\n    let geometry = new THREE.Geometry( )\n    geometry.vertices.push( new THREE.Vector3( args.obj.value[ 0 ], args.obj.value[ 1 ], args.obj.value[ 2 ] ) )\n    geometry.vertices.push( new THREE.Vector3( args.obj.value[ 3 ], args.obj.value[ 4 ], args.obj.value[ 5 ] ) )\n\n    // prepare for potential coloring!\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let line = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n    line.hash = args.obj.hash\n    cb( null, line )\n  },\n\n  Rectangle( obj, cb ) {\n    console.warn( 'TODO', args.obj.type )\n  },\n\n  Circle( args, cb ) {\n    let origin = args.obj.center.value\n    let radius = args.obj.radius\n    let v1 = new THREE.Vector3( 0, 0, 1 )\n    let v2 = new THREE.Vector3( ...args.obj.normal.value )\n    let q = new THREE.Quaternion( )\n    q.setFromUnitVectors( v1, v2 )\n    let curve = new THREE.EllipseCurve( 0, 0, radius, radius, 0, 2 * Math.PI, false, 0 )\n    let points = curve.getPoints( 50 )\n    let geometry = new THREE.Geometry( ).setFromPoints( points )\n\n    // prepare for potential coloring!\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let circle = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n    circle.geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( q ) );\n    circle.geometry.applyMatrix( new THREE.Matrix4( ).makeTranslation( ...origin ) );\n    circle.hash = args.obj.hash\n    cb( null, circle )\n  },\n\n  Arc( args, cb ) {\n    let radius = args.obj.radius\n    let startAngle = args.obj.startAngle\n    let endAngle = args.obj.endAngle\n    let v1 = new THREE.Vector3( 0, 0, 1 )\n    let v2 = new THREE.Vector3( ...args.obj.plane.normal.value )\n    let q = new THREE.Quaternion( )\n    q.setFromUnitVectors( v1, v2 )\n    let curve = new THREE.EllipseCurve( 0, 0, radius, radius, startAngle, endAngle, false, 0 )\n    let points = curve.getPoints( 50 )\n    let geometry = new THREE.Geometry( ).setFromPoints( points )\n\n    // prepare for potential coloring!\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let arc = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n    arc.geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( q ) );\n    arc.geometry.applyMatrix( new THREE.Matrix4( ).makeTranslation( ...args.obj.plane.origin.value ) );\n    arc.hash = args.obj.hash\n    cb( null, arc )\n  },\n\n  Ellipse( args, cb ) {\n    let xRadius = args.obj.firstRadius\n    let yRadius = args.obj.secondRadius\n    let startAngle = args.obj.startAngle\n    let endAngle = args.obj.endAngle\n    let v1 = new THREE.Vector3( 0, 0, 1 )\n    let v2 = new THREE.Vector3( ...args.obj.plane.Normal.value )\n    let q = new THREE.Quaternion( )\n    q.setFromUnitVectors( v1, v2 )\n    let curve = new THREE.EllipseCurve( 0, 0, radius, radius, startAngle, endAngle, false, 0 )\n    let points = curve.getPoints( 50 )\n    let geometry = new THREE.Geometry( ).setFromPoints( points )\n\n    // prepare for potential coloring!\n    geometry.vertices.forEach( ( v, i ) => { geometry.colors.push( this.defaultColor ) } )\n\n    let arc = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n    arc.geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( q ) );\n    arc.geometry.applyMatrix( new THREE.Matrix4( ).makeTranslation( ...args.obj.plane.Origin.value ) );\n    arc.hash = args.obj.hash\n    cb( null, arc )\n  },\n\n  Extrusion( args, cb ) {\n    let m = new THREE.Matrix4( )\n    let mInverse = new THREE.Matrix4( )\n    let xform = Object.values( args.obj.profileTransformation )\n    m.fromArray( xform.slice( 0, 16 ) )\n    m.transpose( )\n    mInverse = m.clone( )\n    mInverse.getInverse( m )\n    let type = args.obj.profile.type\n    let pts = [ ]\n\n    args.obj.profile.color = args.obj.color\n    this[ args.obj.profile.type ]( { obj: args.obj.profile, layer: args.layer }, ( err, obj ) => {\n      obj.geometry.applyMatrix( mInverse )\n      let values = obj.geometry.vertices\n      for ( var i = 0, l = values.length; i < l; ++i ) {\n        pts.push( new THREE.Vector2( values[ i ].x, values[ i ].y ) )\n      }\n    } )\n\n    let shape = new THREE.Shape( pts )\n    for ( var i = 1; i < args.obj.profiles.length; i++ ) {\n      let holeProfile = null\n      let holePts = [ ]\n      args.obj.profiles[ i ].color = args.obj.color\n      this[ args.obj.profiles[ i ].type ]( { obj: args.obj.profiles[ i ], layer: args.layer }, ( err, obj ) => {\n        holeProfile = obj\n      } )\n\n      holeProfile.geometry.applyMatrix( mInverse )\n      holeProfile.geometry.vertices.forEach( function ( vertex ) {\n        holePts.push( new THREE.Vector2( vertex.x, vertex.y ) )\n      } )\n      let holePath = new THREE.Path( holePts )\n      shape.holes.push( holePath )\n    }\n\n    let path = new THREE.LineCurve( args.obj.pathStart, args.obj.pathEnd )\n    let extrudePath = new THREE.CurvePath( )\n    extrudePath.add( path )\n    let extrudeSettings = {\n      depth: args.obj.length,\n      bevelEnabled: false,\n    }\n    let geometry = new THREE.ExtrudeBufferGeometry( shape, extrudeSettings )\n\n    geometry.applyMatrix( m )\n    let extrusion = new THREE.Mesh( geometry, this.materialManager.getMeshMaterial( args.obj.color ) )\n    extrusion.hash = args.obj.hash\n\n    cb( null, extrusion )\n  },\n\n  Box( args, cb ) {\n    // console.log(args.obj)\n    let width = args.obj.xSize.end - args.obj.xSize.start\n    let height = args.obj.ySize.end - args.obj.ySize.start\n    let depth = args.obj.zSize.end - args.obj.zSize.start\n    let origin = args.obj.basePlane.origin.value\n    let v1 = new THREE.Vector3( 0, 0, 1 )\n    let v2 = new THREE.Vector3( ...args.obj.basePlane.normal.value )\n    let q = new THREE.Quaternion( )\n    q.setFromUnitVectors( v1, v2 )\n    let geometry = new THREE.BoxBufferGeometry( width, height, depth )\n    let box = new THREE.Mesh( geometry, this.materialManager.getMeshMaterial( args.obj.color ) )\n    box.geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( q ) )\n    box.geometry.applyMatrix( new THREE.Matrix4( ).makeTranslation( ...origin ) )\n    box.geometry.verticesNeedUpdate = true\n\n    box.hash = args.obj.hash\n    cb( null, box )\n  },\n\n  Structural1DElementPolyline( args, cb ) {\n    if (args.obj.properties.structural.resultVertices !== undefined)\n      args.obj.value = args.obj.properties.structural.resultVertices\n\n    this.Polyline( { obj: args.obj }, ( err, obj ) => {\n      if ( err ) return cb( err, null )\n      return cb( null, obj )\n    } )\n  },\n\n  Structural1DElement( args, cb ) {\n    if (args.obj.properties.structural.resultVertices !== undefined)\n      args.obj.value = args.obj.properties.structural.resultVertices\n\n    this.Polyline( { obj: args.obj }, ( err, obj ) => {\n      if ( err ) return cb( err, null )\n      return cb( null, obj )\n    } )\n  },\n\n  Polyline( args, cb ) {\n    let geometry = new THREE.BufferGeometry( )\n\n    if ( args.obj.closed )\n      args.obj.value.push( args.obj.value[ 0 ], args.obj.value[ 1 ], args.obj.value[ 2 ] )\n\n    geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( args.obj.value, 3 ) )\n    geometry.computeBoundingSphere( )\n\n    let polyline = new THREE.Line( geometry, this.materialManager.getLineMaterial( args.obj.color ) )\n    polyline.hash = args.obj.hash\n    cb( null, polyline )\n  },\n\n  Polycurve( args, cb ) {\n    for ( let i in args.obj.segments ) {\n      let segment = args.obj.segments[ i ]\n      segment.color = args.obj.color\n      this[ segment.type ]( { obj: segment, layer: args.layer }, ( err, poly ) => {\n        if ( err ) return cb( err )\n        return cb( null, poly )\n      } )\n    }\n  },\n\n  Annotation( args, cb ) {\n    console.warn( 'TODO', args.obj.type )\n  },\n\n  Curve( args, cb ) {\n    args.obj.displayValue.color = args.obj.color\n    this.Polyline( { obj: args.obj.displayValue, layer: args.layer }, ( err, poly ) => {\n      if ( err ) return cb( err )\n      return cb( null, poly )\n    } )\n  },\n\n  Mesh( args, cb ) {\n    let obj = args.obj\n    let geometry = new THREE.BufferGeometry( )\n\n    let vertices = [ ]\n    let indices = [ ]\n\n    let k = 0\n    while ( k < obj.faces.length ) {\n      // QUAD FACE\n      if ( obj.faces[ k ] === 1 ) {\n        indices.push( obj.faces[ k + 1 ], obj.faces[ k + 2 ], obj.faces[ k + 3 ] )\n        indices.push( obj.faces[ k + 1 ], obj.faces[ k + 3 ], obj.faces[ k + 4 ] )\n        k += 5\n      }\n      // TRIANGLE FACE\n      else if ( obj.faces[ k ] === 0 ) {\n        indices.push( obj.faces[ k + 1 ], obj.faces[ k + 2 ], obj.faces[ k + 3 ] )\n        k += 4\n      }\n    }\n    geometry.setIndex( indices )\n    geometry.addAttribute( 'position', new THREE.Float32BufferAttribute( obj.vertices, 3 ) )\n    geometry.computeFaceNormals( )\n    geometry.computeVertexNormals( )\n\n    let mesh = new THREE.Mesh( geometry, this.materialManager.getMeshMaterial( args.obj.color ) )\n\n    // NOTE: needed to rematch with face arr colors\n    mesh.userData.originalFaceArray = obj.faces\n\n    return cb( null, mesh )\n  },\n\n  Brep( args, cb ) {\n    args.obj.displayValue.color = args.obj.color\n    this.Mesh( { obj: args.obj.displayValue }, ( err, obj ) => {\n      if ( err ) return cb( err, null )\n      return cb( null, obj )\n    } )\n  }\n}\n\n// export\nexport { Converter }\n\n// Helper functions below\nlet worldXY = {\n  origin: { value: [ 0, 0, 0 ] },\n  xdir: { value: [ 1, 0, 0 ] },\n  ydir: { value: [ 0, 1, 0 ] },\n  normal: { value: [ 0, 0, 1 ] }\n}\n\nfunction planeToPlane( geometry, plane1, plane2 ) {\n  let qX = new THREE.Quaternion( )\n  let qY = new THREE.Quaternion( )\n  let qZ = new THREE.Quaternion( )\n  // console.log(\"plane1:\", plane1)\n  // console.log(\"plane2:\", plane2)\n  qX.setFromUnitVectors( new THREE.Vector3( ...plane1.xdir.value ), new THREE.Vector3( ...plane2.xdir.value ) )\n  qY.setFromUnitVectors( new THREE.Vector3( ...plane1.ydir.value ), new THREE.Vector3( ...plane2.ydir.value ) )\n  qZ.setFromUnitVectors( new THREE.Vector3( ...plane1.normal.value ), new THREE.Vector3( ...plane2.normal.value ) )\n  let translateVector = [ ( plane2.origin.value[ 0 ] - plane1.origin.value[ 0 ] ), ( plane2.origin.value[ 1 ] - plane1.origin.value[ 1 ] ), ( plane2.origin.value[ 2 ] - plane1.origin.value[ 2 ] ) ]\n  geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( qX ) )\n  // geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( qY ) )\n  // geometry.applyMatrix( new THREE.Matrix4( ).makeRotationFromQuaternion( qZ ) )\n  geometry.translate( ...translateVector )\n}\n\n// (c) https://stackoverflow.com/a/1573141/3446736\nfunction colourNameToHex( colour ) {\n  let colours = {\n    \"aliceblue\": \"#f0f8ff\",\n    \"antiquewhite\": \"#faebd7\",\n    \"aqua\": \"#00ffff\",\n    \"aquamarine\": \"#7fffd4\",\n    \"azure\": \"#f0ffff\",\n    \"beige\": \"#f5f5dc\",\n    \"bisque\": \"#ffe4c4\",\n    \"black\": \"#000000\",\n    \"blanchedalmond\": \"#ffebcd\",\n    \"blue\": \"#0000ff\",\n    \"blueviolet\": \"#8a2be2\",\n    \"brown\": \"#a52a2a\",\n    \"burlywood\": \"#deb887\",\n    \"cadetblue\": \"#5f9ea0\",\n    \"chartreuse\": \"#7fff00\",\n    \"chocolate\": \"#d2691e\",\n    \"coral\": \"#ff7f50\",\n    \"cornflowerblue\": \"#6495ed\",\n    \"cornsilk\": \"#fff8dc\",\n    \"crimson\": \"#dc143c\",\n    \"cyan\": \"#00ffff\",\n    \"darkblue\": \"#00008b\",\n    \"darkcyan\": \"#008b8b\",\n    \"darkgoldenrod\": \"#b8860b\",\n    \"darkgray\": \"#a9a9a9\",\n    \"darkgreen\": \"#006400\",\n    \"darkkhaki\": \"#bdb76b\",\n    \"darkmagenta\": \"#8b008b\",\n    \"darkolivegreen\": \"#556b2f\",\n    \"darkorange\": \"#ff8c00\",\n    \"darkorchid\": \"#9932cc\",\n    \"darkred\": \"#8b0000\",\n    \"darksalmon\": \"#e9967a\",\n    \"darkseagreen\": \"#8fbc8f\",\n    \"darkslateblue\": \"#483d8b\",\n    \"darkslategray\": \"#2f4f4f\",\n    \"darkturquoise\": \"#00ced1\",\n    \"darkviolet\": \"#9400d3\",\n    \"deeppink\": \"#ff1493\",\n    \"deepskyblue\": \"#00bfff\",\n    \"dimgray\": \"#696969\",\n    \"dodgerblue\": \"#1e90ff\",\n    \"firebrick\": \"#b22222\",\n    \"floralwhite\": \"#fffaf0\",\n    \"forestgreen\": \"#228b22\",\n    \"fuchsia\": \"#ff00ff\",\n    \"gainsboro\": \"#dcdcdc\",\n    \"ghostwhite\": \"#f8f8ff\",\n    \"gold\": \"#ffd700\",\n    \"goldenrod\": \"#daa520\",\n    \"gray\": \"#808080\",\n    \"green\": \"#008000\",\n    \"greenyellow\": \"#adff2f\",\n    \"honeydew\": \"#f0fff0\",\n    \"hotpink\": \"#ff69b4\",\n    \"indianred \": \"#cd5c5c\",\n    \"indigo\": \"#4b0082\",\n    \"ivory\": \"#fffff0\",\n    \"khaki\": \"#f0e68c\",\n    \"lavender\": \"#e6e6fa\",\n    \"lavenderblush\": \"#fff0f5\",\n    \"lawngreen\": \"#7cfc00\",\n    \"lemonchiffon\": \"#fffacd\",\n    \"lightblue\": \"#add8e6\",\n    \"lightcoral\": \"#f08080\",\n    \"lightcyan\": \"#e0ffff\",\n    \"lightgoldenrodyellow\": \"#fafad2\",\n    \"lightgrey\": \"#d3d3d3\",\n    \"lightgreen\": \"#90ee90\",\n    \"lightpink\": \"#ffb6c1\",\n    \"lightsalmon\": \"#ffa07a\",\n    \"lightseagreen\": \"#20b2aa\",\n    \"lightskyblue\": \"#87cefa\",\n    \"lightslategray\": \"#778899\",\n    \"lightsteelblue\": \"#b0c4de\",\n    \"lightyellow\": \"#ffffe0\",\n    \"lime\": \"#00ff00\",\n    \"limegreen\": \"#32cd32\",\n    \"linen\": \"#faf0e6\",\n    \"magenta\": \"#ff00ff\",\n    \"maroon\": \"#800000\",\n    \"mediumaquamarine\": \"#66cdaa\",\n    \"mediumblue\": \"#0000cd\",\n    \"mediumorchid\": \"#ba55d3\",\n    \"mediumpurple\": \"#9370d8\",\n    \"mediumseagreen\": \"#3cb371\",\n    \"mediumslateblue\": \"#7b68ee\",\n    \"mediumspringgreen\": \"#00fa9a\",\n    \"mediumturquoise\": \"#48d1cc\",\n    \"mediumvioletred\": \"#c71585\",\n    \"midnightblue\": \"#191970\",\n    \"mintcream\": \"#f5fffa\",\n    \"mistyrose\": \"#ffe4e1\",\n    \"moccasin\": \"#ffe4b5\",\n    \"navajowhite\": \"#ffdead\",\n    \"navy\": \"#000080\",\n    \"oldlace\": \"#fdf5e6\",\n    \"olive\": \"#808000\",\n    \"olivedrab\": \"#6b8e23\",\n    \"orange\": \"#ffa500\",\n    \"orangered\": \"#ff4500\",\n    \"orchid\": \"#da70d6\",\n    \"palegoldenrod\": \"#eee8aa\",\n    \"palegreen\": \"#98fb98\",\n    \"paleturquoise\": \"#afeeee\",\n    \"palevioletred\": \"#d87093\",\n    \"papayawhip\": \"#ffefd5\",\n    \"peachpuff\": \"#ffdab9\",\n    \"peru\": \"#cd853f\",\n    \"pink\": \"#ffc0cb\",\n    \"plum\": \"#dda0dd\",\n    \"powderblue\": \"#b0e0e6\",\n    \"purple\": \"#800080\",\n    \"rebeccapurple\": \"#663399\",\n    \"red\": \"#ff0000\",\n    \"rosybrown\": \"#bc8f8f\",\n    \"royalblue\": \"#4169e1\",\n    \"saddlebrown\": \"#8b4513\",\n    \"salmon\": \"#fa8072\",\n    \"sandybrown\": \"#f4a460\",\n    \"seagreen\": \"#2e8b57\",\n    \"seashell\": \"#fff5ee\",\n    \"sienna\": \"#a0522d\",\n    \"silver\": \"#c0c0c0\",\n    \"skyblue\": \"#87ceeb\",\n    \"slateblue\": \"#6a5acd\",\n    \"slategray\": \"#708090\",\n    \"snow\": \"#fffafa\",\n    \"springgreen\": \"#00ff7f\",\n    \"steelblue\": \"#4682b4\",\n    \"tan\": \"#d2b48c\",\n    \"teal\": \"#008080\",\n    \"thistle\": \"#d8bfd8\",\n    \"tomato\": \"#ff6347\",\n    \"turquoise\": \"#40e0d0\",\n    \"violet\": \"#ee82ee\",\n    \"wheat\": \"#f5deb3\",\n    \"white\": \"#ffffff\",\n    \"whitesmoke\": \"#f5f5f5\",\n    \"yellow\": \"#ffff00\",\n    \"yellowgreen\": \"#9acd32\"\n  }\n  if ( typeof colours[ colour.toLowerCase( ) ] != 'undefined' )\n    return colours[ colour.toLowerCase( ) ];\n  return false;\n}\n\nfunction argbToRGB( color ) {\n  return '#' + ( '000000' + ( color & 0xFFFFFF ).toString( 16 ) ).slice( -6 )\n}\n"]}]}