{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js??ref--0-0!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Viewer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Viewer.vue","mtime":1609071089437},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/thread-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["import \"core-js/modules/es6.regexp.split\";\nimport _Object$freeze from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/object/freeze\";\nimport _getIterator from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/core-js/get-iterator\";\nimport \"core-js/modules/es6.function.name\";\nimport \"core-js/modules/web.dom.iterable\";\nimport \"core-js/modules/es6.array.find\";\nimport _toConsumableArray from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/toConsumableArray\";\nimport \"core-js/modules/es6.array.find-index\";\nimport \"regenerator-runtime/runtime\";\nimport _asyncToGenerator from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/asyncToGenerator\";\nimport \"core-js/modules/es6.regexp.replace\";\nimport _objectSpread from \"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/@babel/runtime-corejs2/helpers/esm/objectSpread\";\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\nimport debounce from 'lodash.debounce';\nimport StreamCard from '@/components/ViewerLoadedStreamsCard.vue';\nimport StreamSearch from '@/components/StreamSearch.vue';\nimport ObjectGroups from '@/components/ViewerObjectGroups.vue';\nimport SelectedObjects from '@/components/ViewerSelectedObjects.vue';\nimport Settings from '@/components/ViewerSettings.vue';\nimport SpeckleRenderer from '@/renderer/SpeckleRenderer.js';\nexport default {\n  name: 'ViewerView',\n  components: {\n    StreamSearch: StreamSearch,\n    StreamCard: StreamCard,\n    ObjectGroups: ObjectGroups,\n    SelectedObjects: SelectedObjects,\n    Settings: Settings\n  },\n  computed: {\n    loadedStreamIds: function loadedStreamIds() {\n      return this.$store.state.loadedStreamIds;\n    },\n    loadedStreams: function loadedStreams() {\n      var _this = this;\n\n      return this.$store.state.streams.filter(function (str) {\n        return _this.loadedStreamIds.indexOf(str.streamId) !== -1;\n      });\n    },\n    streams: function streams() {\n      var _this2 = this;\n\n      return this.$store.state.streams.filter(function (s) {\n        return _this2.streamIds.indexOf(s.streamId) !== -1;\n      });\n    },\n    streamIds: function streamIds() {\n      return this.$store.state.loadedStreamIds;\n    }\n  },\n  data: function data() {\n    return {\n      customStreamId: null,\n      showStreamIdDialog: false,\n      customDialogErr: false,\n      showLoading: false,\n      looadingProgress: 0,\n      loadingIsDeterminate: false,\n      toRequest: [],\n      requestBuckets: [],\n      isRequesting: false,\n      pauseRequesting: false,\n      bucketInProgress: false,\n      removeInterval: null,\n      streamsToRemove: [],\n      selectedFilter: null,\n      showTheThing: true,\n      cameraPos: null,\n      cameraPosToSet: null,\n      groupKeyToSet: null,\n      activeTab: 0\n    };\n  },\n  watch: {\n    showLoading: function showLoading(newVal, oldVal) {\n      console.log(\"showLoading is now \".concat(newVal));\n      if (this.cameraPosToSet === null && this.groupKeyToSet === null) return;\n\n      if (newVal === false) {\n        if (this.cameraPosToSet) {\n          this.renderer.computeSceneBoundingSphere();\n          this.renderer.setFar();\n          this.renderer.setCamera(_objectSpread({}, this.cameraPosToSet), 1600);\n          this.cameraPosToSet = null;\n        }\n\n        if (this.groupKeyToSet) {\n          this.selectedFilter = this.groupKeyToSet;\n          this.groupKeyToSet = null;\n          this.activeTab = 1;\n        }\n      }\n    }\n  },\n  methods: {\n    appendStreamsToRoute: function appendStreamsToRoute(streamId) {\n      // NOTE: this functionality is disabled because o\n      var streams = this.$store.state.loadedStreamIds.join(',');\n      if (streams !== '') this.$router.replace({\n        name: 'viewer',\n        params: {\n          streamIds: streams\n        },\n        query: _objectSpread({}, this.$route.query)\n      });else this.$router.replace({\n        name: 'viewer',\n        query: _objectSpread({}, this.$route.query)\n      });\n    },\n    directAddStream: function () {\n      var _directAddStream = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee() {\n        return regeneratorRuntime.wrap(function _callee$(_context) {\n          while (1) {\n            switch (_context.prev = _context.next) {\n              case 0:\n                _context.prev = 0;\n                _context.next = 3;\n                return this.$store.dispatch('getStream', {\n                  streamId: this.customStreamId\n                });\n\n              case 3:\n                this.addStream(this.customStreamId);\n                this.customStreamId = null;\n                this.showStreamIdDialog = false;\n                _context.next = 12;\n                break;\n\n              case 8:\n                _context.prev = 8;\n                _context.t0 = _context[\"catch\"](0);\n                this.customStreamId = null;\n                this.customDialogErr = true; // this.showStreamIdDialog = false\n\n              case 12:\n              case \"end\":\n                return _context.stop();\n            }\n          }\n        }, _callee, this, [[0, 8]]);\n      }));\n\n      function directAddStream() {\n        return _directAddStream.apply(this, arguments);\n      }\n\n      return directAddStream;\n    }(),\n    addStream: function () {\n      var _addStream = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee2(streamId) {\n        var _this3 = this;\n\n        var objectIds, toRequest, toUpdate, bucket, maxReq, i;\n        return regeneratorRuntime.wrap(function _callee2$(_context2) {\n          while (1) {\n            switch (_context2.prev = _context2.next) {\n              case 0:\n                this.showLoading = true;\n                this.$store.commit('ADD_LOADED_STREAMID', streamId);\n                this.appendStreamsToRoute();\n                _context2.prev = 3;\n                _context2.next = 6;\n                return this.$store.dispatch('getStreamObjects', streamId);\n\n              case 6:\n                objectIds = _context2.sent;\n\n                if (!(objectIds.length === 0)) {\n                  _context2.next = 10;\n                  break;\n                }\n\n                this.showLoading = false;\n                return _context2.abrupt(\"return\");\n\n              case 10:\n                // loaded already?\n                toRequest = objectIds.filter(function (id) {\n                  return _this3.$store.state.objects.findIndex(function (o) {\n                    return o._id === id;\n                  }) === -1;\n                });\n                toUpdate = objectIds.filter(function (id) {\n                  return _this3.$store.state.objects.findIndex(function (o) {\n                    return o._id === id;\n                  }) !== -1;\n                });\n                this.$store.commit('UPDATE_OBJECTS_STREAMS', {\n                  objIds: toUpdate,\n                  streamToAdd: streamId\n                });\n                bucket = [], maxReq = 50; // magic number; maximum objects to request in a bucket\n\n                for (i = 0; i < toRequest.length; i++) {\n                  bucket.push(toRequest[i]);\n\n                  if (i % maxReq === 0 && i !== 0) {\n                    this.requestBuckets.push({\n                      objectIds: _toConsumableArray(bucket),\n                      streamId: streamId\n                    });\n                    bucket = [];\n                    if (!this.isRequesting) this.bucketProcessor();\n                  }\n                } // last one\n\n\n                if (bucket.length !== 0) {\n                  this.requestBuckets.push({\n                    objectIds: _toConsumableArray(bucket),\n                    streamId: streamId\n                  });\n                  if (!this.isRequesting) this.bucketProcessor();\n                }\n\n                _context2.next = 21;\n                break;\n\n              case 18:\n                _context2.prev = 18;\n                _context2.t0 = _context2[\"catch\"](3);\n                this.showLoading = false;\n\n              case 21:\n              case \"end\":\n                return _context2.stop();\n            }\n          }\n        }, _callee2, this, [[3, 18]]);\n      }));\n\n      function addStream(_x) {\n        return _addStream.apply(this, arguments);\n      }\n\n      return addStream;\n    }(),\n    // Goes through all the request buckets and requests them from the server,\n    // then plops them in the renderer as they go\n    bucketProcessor: function () {\n      var _bucketProcessor = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee3() {\n        var _this4 = this,\n            _this$objectAccumulat;\n\n        var objs, stream;\n        return regeneratorRuntime.wrap(function _callee3$(_context3) {\n          while (1) {\n            switch (_context3.prev = _context3.next) {\n              case 0:\n                if (!this.pauseRequesting) {\n                  _context3.next = 2;\n                  break;\n                }\n\n                return _context3.abrupt(\"return\");\n\n              case 2:\n                if (!(this.requestBuckets.length === 0)) {\n                  _context3.next = 11;\n                  break;\n                }\n\n                this.isRequesting = false; // as we don't want to flood the vue store with a lotta add objects calls,\n                // we store all objects in an accumulator and commit that once we're done\n\n                if (this.objectAccumulator.length > 0) this.$store.commit('ADD_OBJECTS', this.objectAccumulator);\n                this.objectAccumulator = [];\n                console.log(\"done processing buckets!\");\n                this.showLoading = false;\n                if (this.cameraPosToSet === null) this.renderer.zoomExtents();\n                bus.$emit('loading-done');\n                return _context3.abrupt(\"return\");\n\n              case 11:\n                this.isRequesting = true;\n                this.bucketInProgress = true;\n                _context3.next = 15;\n                return this.$store.dispatch('getObjects', this.requestBuckets[0].objectIds);\n\n              case 15:\n                objs = _context3.sent;\n                stream = this.$store.state.streams.find(function (s) {\n                  return s.streamId === _this4.requestBuckets[0].streamId;\n                });\n                objs.forEach(function (o, index) {\n                  if (!o.properties) o.properties = {};\n                  o.properties.id = o._id ? o._id : 'no id';\n                  o.properties.hash = o.hash ? o.hash : 'no hash';\n                  o.properties.speckle_type = o.type;\n                  var objIndexInStream = stream.objects.indexOf(o._id);\n                  o.properties.objIndexInStream = objIndexInStream;\n                  var layer = null;\n                  var _iteratorNormalCompletion = true;\n                  var _didIteratorError = false;\n                  var _iteratorError = undefined;\n\n                  try {\n                    for (var _iterator = _getIterator(stream.layers), _step; !(_iteratorNormalCompletion = (_step = _iterator.next()).done); _iteratorNormalCompletion = true) {\n                      var ll = _step.value;\n                      if (objIndexInStream >= ll.startIndex) if (objIndexInStream < ll.startIndex + ll.objectCount) layer = ll;\n                    }\n                  } catch (err) {\n                    _didIteratorError = true;\n                    _iteratorError = err;\n                  } finally {\n                    try {\n                      if (!_iteratorNormalCompletion && _iterator.return != null) {\n                        _iterator.return();\n                      }\n                    } finally {\n                      if (_didIteratorError) {\n                        throw _iteratorError;\n                      }\n                    }\n                  }\n\n                  o.streams = [_this4.requestBuckets[0].streamId];\n\n                  if (layer && layer.properties) {\n                    o.color = {\n                      hex: '#909090',\n                      a: 0.65\n                    };\n                    o.properties.layer_guid = layer.guid ? layer.guid : 'no layer guid';\n                    o.properties.layer_name = layer.name;\n                  } else if (layer) {\n                    o.properties.layer_guid = layer.guid;\n                    o.properties.layer_name = layer.name;\n                    o.color = {\n                      hex: '#909090',\n                      a: 0.65\n                    };\n                  } else {\n                    o.properties.layer_name = 'no layer';\n                    o.color = {\n                      hex: '#909090',\n                      a: 0.65\n                    };\n                  }\n                });\n\n                (_this$objectAccumulat = this.objectAccumulator).push.apply(_this$objectAccumulat, _toConsumableArray(objs.map(function (obj) {\n                  return _Object$freeze({\n                    type: obj.type,\n                    properties: obj.properties ? obj.properties : null,\n                    streams: obj.streams,\n                    _id: obj._id,\n                    hash: obj.hash\n                  });\n                }))); // No freezing as we're modifying the props; mem footprint seems ok still\n                // this.objectAccumulator.push( ...objs.map( obj => { return { type: obj.type, properties: obj.properties ? obj.properties : null, streams: obj.streams, _id: obj._id, hash: obj.hash } } ) )\n                // this.renderer.loadObjects( { objs: objs, zoomExtents: this.requestBuckets.length === 1 } )\n\n\n                this.renderer.loadObjects({\n                  objs: objs,\n                  zoomExtents: false\n                });\n                this.requestBuckets.splice(0, 1);\n                this.bucketInProgress = false;\n                this.bucketProcessor();\n\n              case 23:\n              case \"end\":\n                return _context3.stop();\n            }\n          }\n        }, _callee3, this);\n      }));\n\n      function bucketProcessor() {\n        return _bucketProcessor.apply(this, arguments);\n      }\n\n      return bucketProcessor;\n    }(),\n    // pauses and any bucket loading and waits for it to stop,\n    // then triggers the real remove stream\n    removeStream: function () {\n      var _removeStream = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee4(streamId) {\n        return regeneratorRuntime.wrap(function _callee4$(_context4) {\n          while (1) {\n            switch (_context4.prev = _context4.next) {\n              case 0:\n                this.pauseRequesting = true;\n                if (this.streamsToRemove.indexOf(streamId) === -1) this.streamsToRemove.push(streamId);\n                this.removeInterval = setInterval(this.removeStreamInternal.bind(this), 250);\n\n              case 3:\n              case \"end\":\n                return _context4.stop();\n            }\n          }\n        }, _callee4, this);\n      }));\n\n      function removeStream(_x2) {\n        return _removeStream.apply(this, arguments);\n      }\n\n      return removeStream;\n    }(),\n    // removes any objects pertaining to one stream, even half loaded ones\n    // works with a temporary state. Restarts the bucket processor\n    // in case there were other buckets queued from other stream loads.\n    removeStreamInternal: function removeStreamInternal() {\n      var _this5 = this;\n\n      if (this.bucketInProgress) return;\n      clearInterval(this.removeInterval); // create a list of all objects, including ones that are possibly still \"accumulating\"\n\n      var tempState = [].concat(_toConsumableArray(this.$store.state.objects), _toConsumableArray(this.objectAccumulator)); // clean future loading buckets, if any are present\n\n      this.requestBuckets = this.requestBuckets.filter(function (b) {\n        return _this5.streamsToRemove.indexOf(b.streamId) === -1;\n      });\n      var objIdsToUnload = [];\n      this.streams.forEach(function (s) {\n        var _objIdsToUnload;\n\n        return _this5.streamsToRemove.indexOf(s.streamId) !== -1 ? (_objIdsToUnload = objIdsToUnload).push.apply(_objIdsToUnload, _toConsumableArray(s.objects)) : null;\n      });\n      this.streamsToRemove.forEach(function (stream) {\n        return _this5.$store.commit('UPDATE_OBJECTS_STREAMS', {\n          objIds: objIdsToUnload,\n          streamToRemove: stream\n        });\n      }); // filter out objects that are in another stream.\n\n      objIdsToUnload = objIdsToUnload.filter(function (id) {\n        var x = tempState.find(function (o) {\n          return o._id === id;\n        });\n        if (x) return x.streams.length === 0;\n        return false; // means the object was not loaded yet\n      });\n      this.streamsToRemove.forEach(function (sId) {\n        _this5.$store.commit('REMOVE_LOADED_STREAMID', sId);\n      });\n      this.$store.commit('REMOVE_OBJECTS', objIdsToUnload);\n      this.renderer.unloadObjects({\n        objIds: objIdsToUnload\n      });\n      this.pauseRequesting = false;\n      this.streamsToRemove = [];\n      this.appendStreamsToRoute(); // restart the bucket processor\n\n      this.bucketProcessor();\n    },\n    setBucketsAndGo: function setBucketsAndGo(buckets) {\n      // this.showLoading = true\n      this.requestBuckets = buckets;\n      this.bucketProcessor();\n    },\n    refreshStream: function () {\n      var _refreshStream = _asyncToGenerator(\n      /*#__PURE__*/\n      regeneratorRuntime.mark(function _callee5(streamId) {\n        var _this6 = this;\n\n        var oldObjectIds, currObjectIds, toAdd, toRem, toDelete, toRequest, bucket, maxReq, i;\n        return regeneratorRuntime.wrap(function _callee5$(_context5) {\n          while (1) {\n            switch (_context5.prev = _context5.next) {\n              case 0:\n                this.showLoading = true;\n                oldObjectIds = this.$store.state.objects.filter(function (obj) {\n                  return obj.streams.indexOf(streamId) !== -1;\n                }).map(function (obj) {\n                  return obj._id;\n                });\n                _context5.next = 4;\n                return this.$store.dispatch('getStreamObjects', streamId);\n\n              case 4:\n                currObjectIds = _context5.sent;\n                toAdd = currObjectIds.filter(function (id) {\n                  return oldObjectIds.indexOf(id) === -1;\n                });\n                toRem = oldObjectIds.filter(function (id) {\n                  return currObjectIds.indexOf(id) === -1;\n                });\n                this.$store.commit('UPDATE_OBJECTS_STREAMS', {\n                  objIds: toRem,\n                  streamToRemove: streamId\n                });\n                toDelete = this.$store.state.objects.filter(function (obj) {\n                  return obj.streams.length === 0;\n                }).map(function (o) {\n                  return o._id;\n                });\n                this.renderer.unloadObjects({\n                  objIds: toDelete\n                });\n                this.$store.commit('REMOVE_OBJECTS', toDelete); // objects that i need to request for sure, as they have not been loaded before.\n\n                toRequest = toAdd.filter(function (id) {\n                  return _this6.$store.state.objects.findIndex(function (o) {\n                    return o._id === id;\n                  }) === -1;\n                });\n\n                if (!(toRequest.length === 0)) {\n                  _context5.next = 15;\n                  break;\n                }\n\n                this.showLoading = false;\n                return _context5.abrupt(\"return\");\n\n              case 15:\n                bucket = [], maxReq = 50; // magic number; maximum objects to request in a bucket\n\n                for (i = 0; i < toRequest.length; i++) {\n                  bucket.push(toRequest[i]);\n\n                  if (i % maxReq === 0 && i !== 0) {\n                    this.requestBuckets.push({\n                      objectIds: _toConsumableArray(bucket),\n                      streamId: streamId\n                    });\n                    bucket = [];\n                    if (!this.isRequesting) this.bucketProcessor();\n                  }\n                } // last one\n\n\n                if (bucket.length !== 0) {\n                  this.requestBuckets.push({\n                    objectIds: _toConsumableArray(bucket),\n                    streamId: streamId\n                  });\n                  if (!this.isRequesting) this.bucketProcessor();\n                }\n\n              case 18:\n              case \"end\":\n                return _context5.stop();\n            }\n          }\n        }, _callee5, this);\n      }));\n\n      function refreshStream(_x3) {\n        return _refreshStream.apply(this, arguments);\n      }\n\n      return refreshStream;\n    }(),\n    fetchStreamsFromRoute: function fetchStreamsFromRoute() {\n      var _this7 = this;\n\n      if (this.$route.params.streamIds) {\n        var urlStreams = this.$route.params.streamIds.split(',');\n        var streamsToLoad = urlStreams.filter(function (id) {\n          return _this7.$store.state.loadedStreamIds.indexOf(id) === -1;\n        });\n        var streamsToUnload = this.$store.state.loadedStreamIds.filter(function (id) {\n          return urlStreams.indexOf(id) === -1;\n        });\n        streamsToUnload.forEach(function (sid) {\n          return _this7.removeStream(sid);\n        });\n        streamsToLoad.forEach(function (sid) {\n          return _this7.addStream(sid);\n        });\n      }\n    },\n    updateViewerSettings: function updateViewerSettings() {\n      this.renderer.viewerSettings = this.$store.state.viewer;\n      this.renderer.updateViewerSettings();\n    }\n  },\n  activated: function activated() {\n    console.log('activated');\n    document.body.classList.add('no-scroll');\n    this.fetchStreamsFromRoute();\n    this.appendStreamsToRoute();\n  },\n  deactivated: function deactivated() {\n    console.log('de-activated');\n    document.body.classList.remove('no-scroll');\n  },\n  mounted: function mounted() {\n    var _this8 = this;\n\n    console.log('mounted');\n    this.objectAccumulator = [];\n    var settingsString = localStorage.getItem('viewerSettings');\n    var viewerSettings = JSON.parse(settingsString);\n    if (null != viewerSettings) this.$store.commit('SET_ALL_VIEWER_SETTINGS', viewerSettings);\n    this.renderer = new SpeckleRenderer({\n      domObject: this.$refs.render\n    }, this.$store.state.viewer);\n    this.renderer.animate(); // if you like polluting the global scope, clap twice\n\n    window.renderer = this.renderer; // add streams to viewer\n\n    this.fetchStreamsFromRoute();\n    var queryObject = this.getUrlQueryObject(); // query init events (mounted, not activated!)\n\n    if (queryObject.camera) this.cameraPosToSet = queryObject.camera;\n    if (queryObject.groups) this.groupKeyToSet = queryObject.groups.key;\n    setTimeout(function () {\n      _this8.$store.commit('SET_VIEWER_CONTROLS', true);\n    }, 100); // Set render events\n\n    this.renderer.on('select-objects', debounce(function (ids) {\n      this.$store.commit('SET_SELECTED_OBJECTS', {\n        objectIds: ids\n      });\n    }.bind(this), 250));\n    this.renderer.on('select-add-objects', debounce(function (ids) {\n      this.$store.commit('ADD_SELECTED_OBJECTS', {\n        objectIds: ids\n      });\n    }.bind(this), 250));\n    this.renderer.on('select-remove-objects', debounce(function (ids) {\n      this.$store.commit('REMOVE_SELECTED_OBJECTS', {\n        objectIds: ids\n      });\n    }.bind(this), 250));\n    this.renderer.on('analysis-legend', function (legend) {\n      _this8.$store.commit('SET_LEGEND', legend);\n    });\n    this.renderer.on('clear-analysis-legend', function () {\n      _this8.$store.commit('SET_LEGEND', null);\n    });\n    this.renderer.on('camera-pos', function (cam) {\n      _this8.appendInfoToUrl(\"camera\", cam);\n    });\n  }\n};",{"version":3,"sources":["Viewer.vue"],"names":[],"mappings":"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","sourcesContent":["<template>\n  <v-container fluid fill-height pa-0 xxxstyle='height: calc(100vh - 64px);'>\n    <div style='position: absolute; top:0; width: 100%; z-index: 1000;'>\n      <v-progress-linear :indeterminate=\"true\" v-show='showLoading' height='2' class='ma-0'></v-progress-linear>\n    </div>\n    <div class='renderer' ref='render'></div>\n    <v-navigation-drawer v-model=\"$store.state.viewerControls\" right app clipped stateless style='z-index: 2' width='400' fixed hide-overlay>\n      <v-layout row wrap style=\"height: auto;\">\n        <!-- <v-flex xs12 style='height:60px;' class='hidden-xs-and-up hidden-md-and-up'>&nbsp;</v-flex> -->\n        <v-flex xs12>\n          <v-tabs grow slider-color='primary' color='rgba(0,0,0,0)' v-model='activeTab'>\n            <v-tab key='streams'>\n              <v-icon>import_export</v-icon>\n            </v-tab>\n            <v-tab key='filter'>\n              <v-icon>layers</v-icon>\n            </v-tab>\n            <v-tab key='inspector'>\n              <v-badge small right :value='$store.state.selectedObjects.length>0' color='primary'>\n                <template v-slot:badge>\n                  <span>{{$store.state.selectedObjects.length}}</span>\n                </template>\n                <v-icon>\n                  code\n                </v-icon>\n              </v-badge>\n            </v-tab>\n            <v-tab key='settings'>\n              <v-icon>settings</v-icon>\n            </v-tab>\n            <v-tab-item key='streams'>\n              <v-card class='elevation-0 transparent'>\n                <v-card-text>\n                  <stream-search v-on:selected-stream='addStream' :streams-to-omit='loadedStreamIds'></stream-search>\n                  <p class='caption mt-0 pb-2'>\n                    or add by<a @click='showStreamIdDialog=true'> streamId</a>\n                  </p>\n                  <v-dialog v-model=\"showStreamIdDialog\" width=\"500\">\n                    <v-card>\n                      <v-form @submit.prevent='directAddStream'>\n                        <v-card-text>\n                          <v-text-field style='width: 100%' v-model='customStreamId' name='custom stream id' label='custom stream id'></v-text-field>\n                        </v-card-text>\n                        <v-card-actions>\n                          <v-spacer></v-spacer>\n                          <v-btn submit @click='directAddStream'>ADD</v-btn>\n                        </v-card-actions>\n                        <v-alert v-model='customDialogErr' dismissible>\n                          Failed to find stream with that id.\n                        </v-alert>\n                      </v-form>\n                    </v-card>\n                  </v-dialog>\n                  <stream-card v-for='stream in loadedStreams' :stream='stream' :key='stream.streamId' @remove='removeStream' @refresh='refreshStream'></stream-card>\n                </v-card-text>\n              </v-card>\n            </v-tab-item>\n            <v-tab-item key='filter'>\n              <v-card class='elevation-0 transparent'>\n                <v-card-text>\n                  <object-groups :group-key-seed='selectedFilter'></object-groups>\n                </v-card-text>\n              </v-card>\n            </v-tab-item>\n            <v-tab-item key='inspector'>\n              <v-card class='elevation-0 transparent'>\n                <v-card-text>\n                  <selected-objects></selected-objects>\n                </v-card-text>\n              </v-card>\n            </v-tab-item>\n            <v-tab-item key='settings'>\n              <v-card class='elevation-0 transparent'>\n                <v-card-text>\n                  <settings @update='updateViewerSettings' />\n                </v-card-text>\n              </v-card>\n            </v-tab-item>\n          </v-tabs>\n        </v-flex>\n      </v-layout>\n    </v-navigation-drawer>\n  </v-container>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\n\nimport StreamCard from '@/components/ViewerLoadedStreamsCard.vue'\nimport StreamSearch from '@/components/StreamSearch.vue'\nimport ObjectGroups from '@/components/ViewerObjectGroups.vue'\nimport SelectedObjects from '@/components/ViewerSelectedObjects.vue'\nimport Settings from '@/components/ViewerSettings.vue'\n\nimport SpeckleRenderer from '@/renderer/SpeckleRenderer.js'\n\nexport default {\n  name: 'ViewerView',\n  components: { StreamSearch, StreamCard, ObjectGroups, SelectedObjects, Settings },\n  computed: {\n    loadedStreamIds( ) {\n      return this.$store.state.loadedStreamIds\n    },\n    loadedStreams( ) {\n      return this.$store.state.streams.filter( str => this.loadedStreamIds.indexOf( str.streamId ) !== -1 )\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( s => this.streamIds.indexOf( s.streamId ) !== -1 )\n    },\n    streamIds( ) {\n      return this.$store.state.loadedStreamIds\n    },\n  },\n  data( ) {\n    return {\n      customStreamId: null,\n      showStreamIdDialog: false,\n      customDialogErr: false,\n      showLoading: false,\n      looadingProgress: 0,\n      loadingIsDeterminate: false,\n      toRequest: [ ],\n      requestBuckets: [ ],\n      isRequesting: false,\n      pauseRequesting: false,\n      bucketInProgress: false,\n      removeInterval: null,\n      streamsToRemove: [ ],\n      selectedFilter: null,\n      showTheThing: true,\n      cameraPos: null,\n      cameraPosToSet: null,\n      groupKeyToSet: null,\n      activeTab: 0\n    }\n  },\n  watch: {\n    showLoading( newVal, oldVal ) {\n      console.log( `showLoading is now ${newVal}` )\n      if ( this.cameraPosToSet === null && this.groupKeyToSet === null ) return\n\n      if ( newVal === false ) {\n        if ( this.cameraPosToSet ) {\n\n          this.renderer.computeSceneBoundingSphere( )\n          this.renderer.setFar( )\n\n          this.renderer.setCamera( { ...this.cameraPosToSet }, 1600 )\n          this.cameraPosToSet = null\n        }\n        if ( this.groupKeyToSet ) {\n          this.selectedFilter = this.groupKeyToSet\n          this.groupKeyToSet = null\n          this.activeTab = 1\n        }\n      }\n    }\n  },\n  methods: {\n    appendStreamsToRoute( streamId ) {\n      // NOTE: this functionality is disabled because o\n      let streams = this.$store.state.loadedStreamIds.join( ',' )\n      if ( streams !== '' )\n        this.$router.replace( { name: 'viewer', params: { streamIds: streams }, query: { ...this.$route.query } } )\n      else this.$router.replace( { name: 'viewer', query: { ...this.$route.query } } )\n    },\n    async directAddStream( ) {\n      try {\n        await this.$store.dispatch( 'getStream', { streamId: this.customStreamId } )\n        this.addStream( this.customStreamId )\n        this.customStreamId = null\n        this.showStreamIdDialog = false\n      } catch ( err ) {\n        this.customStreamId = null\n        this.customDialogErr = true\n        // this.showStreamIdDialog = false\n      }\n    },\n    async addStream( streamId ) {\n      this.showLoading = true\n      this.$store.commit( 'ADD_LOADED_STREAMID', streamId )\n      this.appendStreamsToRoute( )\n      try {\n        let objectIds = await this.$store.dispatch( 'getStreamObjects', streamId )\n\n        if ( objectIds.length === 0 ) {\n          this.showLoading = false\n          return\n        }\n\n        // loaded already?\n        let toRequest = objectIds.filter( id => this.$store.state.objects.findIndex( o => o._id === id ) === -1 )\n        let toUpdate = objectIds.filter( id => this.$store.state.objects.findIndex( o => o._id === id ) !== -1 )\n        this.$store.commit( 'UPDATE_OBJECTS_STREAMS', { objIds: toUpdate, streamToAdd: streamId } )\n\n        let bucket = [ ],\n          maxReq = 50 // magic number; maximum objects to request in a bucket\n\n        for ( let i = 0; i < toRequest.length; i++ ) {\n          bucket.push( toRequest[ i ] )\n          if ( i % maxReq === 0 && i !== 0 ) {\n            this.requestBuckets.push( { objectIds: [ ...bucket ], streamId: streamId } )\n            bucket = [ ]\n            if ( !this.isRequesting ) this.bucketProcessor( )\n          }\n        }\n\n        // last one\n        if ( bucket.length !== 0 ) {\n          this.requestBuckets.push( { objectIds: [ ...bucket ], streamId: streamId } )\n          if ( !this.isRequesting ) this.bucketProcessor( )\n        }\n      } catch ( err ) {\n        this.showLoading = false\n      }\n    },\n    // Goes through all the request buckets and requests them from the server,\n    // then plops them in the renderer as they go\n    async bucketProcessor( ) {\n      if ( this.pauseRequesting ) return\n      if ( this.requestBuckets.length === 0 ) {\n        this.isRequesting = false\n        // as we don't want to flood the vue store with a lotta add objects calls,\n        // we store all objects in an accumulator and commit that once we're done\n        if ( this.objectAccumulator.length > 0 )\n          this.$store.commit( 'ADD_OBJECTS', this.objectAccumulator )\n        this.objectAccumulator = [ ]\n        console.log( `done processing buckets!` )\n        this.showLoading = false\n\n        if ( this.cameraPosToSet === null )\n          this.renderer.zoomExtents( )\n\n        bus.$emit( 'loading-done' )\n        return\n      }\n\n      this.isRequesting = true\n      this.bucketInProgress = true\n\n      let objs = await this.$store.dispatch( 'getObjects', this.requestBuckets[ 0 ].objectIds )\n      let stream = this.$store.state.streams.find( s => s.streamId === this.requestBuckets[ 0 ].streamId )\n\n      objs.forEach( ( o, index ) => {\n        if ( !o.properties ) o.properties = {}\n        o.properties.id = o._id ? o._id : 'no id'\n        o.properties.hash = o.hash ? o.hash : 'no hash'\n        o.properties.speckle_type = o.type\n        let objIndexInStream = stream.objects.indexOf( o._id )\n        o.properties.objIndexInStream = objIndexInStream\n\n        let layer = null\n        for ( let ll of stream.layers ) {\n          if ( objIndexInStream >= ll.startIndex )\n            if ( objIndexInStream < ll.startIndex + ll.objectCount )\n              layer = ll\n        }\n\n        o.streams = [ this.requestBuckets[ 0 ].streamId ]\n\n        if ( layer && layer.properties ) {\n          o.color = { hex: '#909090', a: 0.65 }\n          o.properties.layer_guid = layer.guid ? layer.guid : 'no layer guid'\n          o.properties.layer_name = layer.name\n        } else if ( layer ) {\n          o.properties.layer_guid = layer.guid\n          o.properties.layer_name = layer.name\n          o.color = { hex: '#909090', a: 0.65 }\n        } else {\n          o.properties.layer_name = 'no layer'\n          o.color = { hex: '#909090', a: 0.65 }\n        }\n\n      } )\n\n      this.objectAccumulator.push( ...objs.map( obj => { return Object.freeze( { type: obj.type, properties: obj.properties ? obj.properties : null, streams: obj.streams, _id: obj._id, hash: obj.hash } ) } ) )\n      // No freezing as we're modifying the props; mem footprint seems ok still\n      // this.objectAccumulator.push( ...objs.map( obj => { return { type: obj.type, properties: obj.properties ? obj.properties : null, streams: obj.streams, _id: obj._id, hash: obj.hash } } ) )\n\n      // this.renderer.loadObjects( { objs: objs, zoomExtents: this.requestBuckets.length === 1 } )\n      this.renderer.loadObjects( { objs: objs, zoomExtents: false } )\n      this.requestBuckets.splice( 0, 1 )\n\n      this.bucketInProgress = false\n      this.bucketProcessor( )\n    },\n\n    // pauses and any bucket loading and waits for it to stop,\n    // then triggers the real remove stream\n    async removeStream( streamId ) {\n      this.pauseRequesting = true\n      if ( this.streamsToRemove.indexOf( streamId ) === -1 )\n        this.streamsToRemove.push( streamId )\n      this.removeInterval = setInterval( this.removeStreamInternal.bind( this ), 250 )\n    },\n\n    // removes any objects pertaining to one stream, even half loaded ones\n    // works with a temporary state. Restarts the bucket processor\n    // in case there were other buckets queued from other stream loads.\n    removeStreamInternal( ) {\n      if ( this.bucketInProgress ) return\n      clearInterval( this.removeInterval )\n      // create a list of all objects, including ones that are possibly still \"accumulating\"\n      let tempState = [ ...this.$store.state.objects, ...this.objectAccumulator ]\n\n      // clean future loading buckets, if any are present\n      this.requestBuckets = this.requestBuckets.filter( b => this.streamsToRemove.indexOf( b.streamId ) === -1 )\n\n      let objIdsToUnload = [ ]\n      this.streams.forEach( s => this.streamsToRemove.indexOf( s.streamId ) !== -1 ? objIdsToUnload.push( ...s.objects ) : null )\n\n      this.streamsToRemove.forEach( stream => this.$store.commit( 'UPDATE_OBJECTS_STREAMS', { objIds: objIdsToUnload, streamToRemove: stream } ) )\n\n      // filter out objects that are in another stream.\n      objIdsToUnload = objIdsToUnload.filter( id => {\n        let x = tempState.find( o => o._id === id )\n        if ( x ) return x.streams.length === 0\n        return false // means the object was not loaded yet\n      } )\n\n      this.streamsToRemove.forEach( sId => {\n        this.$store.commit( 'REMOVE_LOADED_STREAMID', sId )\n      } )\n\n      this.$store.commit( 'REMOVE_OBJECTS', objIdsToUnload )\n\n      this.renderer.unloadObjects( { objIds: objIdsToUnload } )\n      this.pauseRequesting = false\n      this.streamsToRemove = [ ]\n      this.appendStreamsToRoute( )\n      // restart the bucket processor\n      this.bucketProcessor( )\n    },\n\n    setBucketsAndGo( buckets ) {\n      // this.showLoading = true\n      this.requestBuckets = buckets\n      this.bucketProcessor( )\n    },\n\n    async refreshStream( streamId ) {\n      this.showLoading = true\n\n      let oldObjectIds = this.$store.state.objects.filter( obj => obj.streams.indexOf( streamId ) !== -1 ).map( obj => obj._id )\n      let currObjectIds = await this.$store.dispatch( 'getStreamObjects', streamId )\n\n      let toAdd = currObjectIds.filter( id => oldObjectIds.indexOf( id ) === -1 )\n      let toRem = oldObjectIds.filter( id => currObjectIds.indexOf( id ) === -1 )\n\n      this.$store.commit( 'UPDATE_OBJECTS_STREAMS', { objIds: toRem, streamToRemove: streamId } )\n\n      let toDelete = this.$store.state.objects.filter( obj => obj.streams.length === 0 ).map( o => o._id )\n      this.renderer.unloadObjects( { objIds: toDelete } )\n      this.$store.commit( 'REMOVE_OBJECTS', toDelete )\n\n      // objects that i need to request for sure, as they have not been loaded before.\n      let toRequest = toAdd.filter( id => this.$store.state.objects.findIndex( o => o._id === id ) === -1 )\n\n      if ( toRequest.length === 0 ) {\n        this.showLoading = false\n        return\n      }\n\n      let bucket = [ ],\n        maxReq = 50 // magic number; maximum objects to request in a bucket\n\n      for ( let i = 0; i < toRequest.length; i++ ) {\n        bucket.push( toRequest[ i ] )\n        if ( i % maxReq === 0 && i !== 0 ) {\n          this.requestBuckets.push( { objectIds: [ ...bucket ], streamId: streamId } )\n          bucket = [ ]\n          if ( !this.isRequesting ) this.bucketProcessor( )\n        }\n      }\n\n      // last one\n      if ( bucket.length !== 0 ) {\n        this.requestBuckets.push( { objectIds: [ ...bucket ], streamId: streamId } )\n        if ( !this.isRequesting ) this.bucketProcessor( )\n      }\n    },\n\n    fetchStreamsFromRoute( ) {\n      if ( this.$route.params.streamIds ) {\n        let urlStreams = this.$route.params.streamIds.split( ',' )\n        let streamsToLoad = urlStreams.filter( id => this.$store.state.loadedStreamIds.indexOf( id ) === -1 )\n        let streamsToUnload = this.$store.state.loadedStreamIds.filter( id => urlStreams.indexOf( id ) === -1 )\n        streamsToUnload.forEach( sid => this.removeStream( sid ) )\n        streamsToLoad.forEach( sid => this.addStream( sid ) )\n      }\n    },\n\n    updateViewerSettings( ) {\n      this.renderer.viewerSettings = this.$store.state.viewer\n      this.renderer.updateViewerSettings( )\n    }\n  },\n  activated( ) {\n    console.log( 'activated' )\n    document.body.classList.add( 'no-scroll' )\n\n    this.fetchStreamsFromRoute( )\n    this.appendStreamsToRoute( )\n\n  },\n  deactivated( ) {\n    console.log( 'de-activated' )\n    document.body.classList.remove( 'no-scroll' )\n  },\n  mounted( ) {\n    console.log( 'mounted' )\n    this.objectAccumulator = [ ]\n\n    let settingsString = localStorage.getItem( 'viewerSettings' )\n    let viewerSettings = JSON.parse( settingsString )\n    if ( null != viewerSettings ) this.$store.commit( 'SET_ALL_VIEWER_SETTINGS', viewerSettings )\n\n    this.renderer = new SpeckleRenderer( { domObject: this.$refs.render }, this.$store.state.viewer )\n    this.renderer.animate( )\n\n    // if you like polluting the global scope, clap twice\n    window.renderer = this.renderer\n\n    // add streams to viewer\n    this.fetchStreamsFromRoute( )\n\n    let queryObject = this.getUrlQueryObject( )\n\n    // query init events (mounted, not activated!)\n    if ( queryObject.camera ) this.cameraPosToSet = queryObject.camera\n    if ( queryObject.groups ) this.groupKeyToSet = queryObject.groups.key\n\n    setTimeout( ( ) => {\n      this.$store.commit( 'SET_VIEWER_CONTROLS', true )\n    }, 100 )\n\n    // Set render events\n    this.renderer.on( 'select-objects', debounce( function ( ids ) {\n      this.$store.commit( 'SET_SELECTED_OBJECTS', { objectIds: ids } )\n    }.bind( this ), 250 ) )\n\n    this.renderer.on( 'select-add-objects', debounce( function ( ids ) {\n      this.$store.commit( 'ADD_SELECTED_OBJECTS', { objectIds: ids } )\n    }.bind( this ), 250 ) )\n\n    this.renderer.on( 'select-remove-objects', debounce( function ( ids ) {\n      this.$store.commit( 'REMOVE_SELECTED_OBJECTS', { objectIds: ids } )\n    }.bind( this ), 250 ) )\n\n    this.renderer.on( 'analysis-legend', legend => {\n      this.$store.commit( 'SET_LEGEND', legend )\n    } )\n\n    this.renderer.on( 'clear-analysis-legend', ( ) => {\n      this.$store.commit( 'SET_LEGEND', null )\n    } )\n\n    this.renderer.on( 'camera-pos', cam => {\n      this.appendInfoToUrl( \"camera\", cam )\n    } )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n.renderer {\n  position: absolute;\n  width: 100%;\n  /*don't ask re below, i just don't like round numbers */\n  height: 100%;\n  /*z-index: 10000;*/\n  background-color:rgba(170,170,170,0.21);\n}\n\n</style>\n"],"sourceRoot":"src/views"}]}