{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamDetailNetwork.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamDetailNetwork.vue","mtime":1609071089414},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\nimport ClientCard from './ClientCard.vue'\nexport default {\n  name: 'StreamDetailNetwork',\n  components: { ClientCard },\n  props: {\n    stream: Object,\n  },\n  watch: {\n    stream( newStream, oldStream ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    canEdit( ) {\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    },\n    senders( ) {\n      if ( this.stream.onlineEditable )\n        return [ {\n          role: 'sender',\n          documentType: '',\n          documentName: 'Web UI',\n          updatedAt: this.stream.updatedAt,\n          owner: this.stream.owner\n        } ]\n      return this.$store.getters.streamClients( this.stream.streamId ).filter( c => c.role.toLowerCase( ) === 'sender' )\n    },\n    receivers( ) {\n      return this.$store.getters.streamClients( this.stream.streamId ).filter( c => c.role.toLowerCase( ) === 'receiver' )\n    },\n    clients( ) {\n      return this.$store.getters.streamClients( this.stream.streamId )\n    }\n  },\n  methods: {\n    fetchData( ) {\n      this.$store.dispatch( 'getStreamClients', { streamId: this.stream.streamId } )\n    }\n  },\n  created( ) {\n    this.fetchData( )\n  }\n}\n\n",{"version":3,"sources":["StreamDetailNetwork.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;AAuBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StreamDetailNetwork.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card class='elevation-0 pt-4'>\n    <v-toolbar dense class='elevation-0 transparent title font-weight-light'>\n      <v-icon small left>cloud_upload</v-icon>&nbsp;\n      <span class='title font-weight-light'>Source</span>\n    </v-toolbar>\n    <v-divider></v-divider>\n    <v-card-text>\n      <client-card v-for='client in senders' :key='client._id' :client='client'></client-card>\n      <p v-if='senders.length===0'>There seem to be no source clients for this stream.</p>\n    </v-card-text>\n    <v-toolbar dense class='elevation-0 transparent title font-weight-light mt-4'>\n      <v-icon small left>cloud_download</v-icon>&nbsp;\n      <span class='title font-weight-light'>Receivers</span>\n    </v-toolbar>\n    <v-divider></v-divider>\n    <v-card-text>\n      <client-card v-for='client in receivers' :key='client._id' :client='client'></client-card>\n      <p v-if='receivers.length===0'>There seem to be no stream receivers.</p>\n    </v-card-text>\n  </v-card>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport ClientCard from './ClientCard.vue'\nexport default {\n  name: 'StreamDetailNetwork',\n  components: { ClientCard },\n  props: {\n    stream: Object,\n  },\n  watch: {\n    stream( newStream, oldStream ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    canEdit( ) {\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    },\n    senders( ) {\n      if ( this.stream.onlineEditable )\n        return [ {\n          role: 'sender',\n          documentType: '',\n          documentName: 'Web UI',\n          updatedAt: this.stream.updatedAt,\n          owner: this.stream.owner\n        } ]\n      return this.$store.getters.streamClients( this.stream.streamId ).filter( c => c.role.toLowerCase( ) === 'sender' )\n    },\n    receivers( ) {\n      return this.$store.getters.streamClients( this.stream.streamId ).filter( c => c.role.toLowerCase( ) === 'receiver' )\n    },\n    clients( ) {\n      return this.$store.getters.streamClients( this.stream.streamId )\n    }\n  },\n  methods: {\n    fetchData( ) {\n      this.$store.dispatch( 'getStreamClients', { streamId: this.stream.streamId } )\n    }\n  },\n  created( ) {\n    this.fetchData( )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}