{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/EditableSpan.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/EditableSpan.vue","mtime":1609071089407},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n\nexport default {\n  name: 'EditableSpan',\n  props: {\n    text: { type: String, default: 'loading...' },\n    disabled: { type: Boolean, default: false },\n    hint: { type: String, default: 'click and type to edit' },\n    dataKey: { type: String, default: '' }\n  },\n  computed: {},\n  data( ) {\n    return {\n      innerText: null\n    }\n  },\n  methods: {\n    getContent( ) {\n      if ( this.innerText )\n        return this.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" ) !== '' ? this.innerText : this.text\n      return this.text\n    },\n    updateOnBlur( e ) {\n      let newContent = e.target.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" )\n      if ( newContent === '' )\n        return e.target.innerText = this.text\n      if ( this.getContent( ) === newContent ) {\n        return\n      }\n      this.innerText = newContent\n      this.$emit( 'update', { text: newContent, dataKey: this.dataKey } )\n    },\n    updateOnEnter( e ) {\n      let newContent = e.target.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" )\n      if ( newContent === '' )\n        return e.target.innerText = this.text\n      if ( this.getContent( ) === newContent ) {\n        e.target.blur( )\n        return\n      }\n      e.target.blur( )\n      this.innerText = newContent\n    }\n  }\n}\n\n",{"version":3,"sources":["EditableSpan.vue"],"names":[],"mappings":";;;;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"EditableSpan.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <span :title='hint' :contenteditable='!disabled' @blur='updateOnBlur' @keydown.enter='updateOnEnter' v-html='getContent()'></span>\n</template>\n<script>\nexport default {\n  name: 'EditableSpan',\n  props: {\n    text: { type: String, default: 'loading...' },\n    disabled: { type: Boolean, default: false },\n    hint: { type: String, default: 'click and type to edit' },\n    dataKey: { type: String, default: '' }\n  },\n  computed: {},\n  data( ) {\n    return {\n      innerText: null\n    }\n  },\n  methods: {\n    getContent( ) {\n      if ( this.innerText )\n        return this.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" ) !== '' ? this.innerText : this.text\n      return this.text\n    },\n    updateOnBlur( e ) {\n      let newContent = e.target.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" )\n      if ( newContent === '' )\n        return e.target.innerText = this.text\n      if ( this.getContent( ) === newContent ) {\n        return\n      }\n      this.innerText = newContent\n      this.$emit( 'update', { text: newContent, dataKey: this.dataKey } )\n    },\n    updateOnEnter( e ) {\n      let newContent = e.target.innerText.replace( /(\\r\\n|\\n|\\r)/gm, \"\" )\n      if ( newContent === '' )\n        return e.target.innerText = this.text\n      if ( this.getContent( ) === newContent ) {\n        e.target.blur( )\n        return\n      }\n      e.target.blur( )\n      this.innerText = newContent\n    }\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n$SpeckleBlue: #448aff;\n\nspan {\n  border-bottom: 2px dashed rgba(55, 126, 247, 0.6);\n  transition: all .3s ease;\n}\n\nspan:hover {\n  cursor: text;\n  color: $SpeckleBlue;\n  border-bottom: 2px solid $SpeckleBlue;\n  cursor: pointer;\n}\n\n</style>\n"]}]}