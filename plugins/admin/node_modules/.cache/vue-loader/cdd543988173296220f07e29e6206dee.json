{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Stream.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Stream.vue","mtime":1609071089434},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport StreamDetailTitle from '../components/StreamDetailTitle.vue'\nimport DetailDescription from '../components/DetailDescription.vue'\nimport StreamDetailUserPerms from '../components/StreamDetailUserPerms.vue'\nimport StreamDetailNetwork from '../components/StreamDetailNetwork.vue'\nimport StreamDetailComments from '../components/StreamDetailComments.vue'\n\nexport default {\n  name: 'StreamDetailView',\n  components: {\n    StreamDetailTitle,\n    DetailDescription,\n    StreamDetailUserPerms,\n    StreamDetailNetwork,\n    StreamDetailComments\n  },\n  watch: {\n    stream( ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    stream( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      if ( stream === null ) {\n        console.log( 'null fukcing stream' )\n      }\n      return stream\n    },\n    canEdit( ) {\n      if (this.$store.state.user.role == 'admin') return true\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    }\n  },\n  data( ) {\n    return {\n      error: '',\n      editDescription: false,\n      active: null\n    }\n  },\n  methods: {\n    getEndRoute( ) {\n      let ending = this.$route.path.split( '/' ).reverse( )[ 0 ]\n      if ( ending === this.$route.params.streamId || ending === '' ) return 'overview'\n      else return ending\n    },\n    restore( ) {\n      this.$store.dispatch( 'updateStream', { streamId: this.stream.streamId, deleted: false } )\n    },\n    fetchData( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      if ( !stream ) {\n        this.$store.dispatch( 'getStream', { streamId: this.$route.params.streamId } )\n          .then( res => {\n            this.$store.dispatch( 'getUser', { _id: res.data.resource.owner } )\n            union( res.data.resource.canRead, res.data.resource.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n          } )\n          .catch( err => {\n            if ( err.message.includes( '404' ) ) this.error = `Stream ${this.$route.params.streamId} was not found.`\n            if ( err.message.includes( '401' ) ) this.error = `Stream ${this.$route.params.streamId} is not accessible to you due to its protection level.`\n          } )\n      } else {\n        this.$store.dispatch( 'getUser', { _id: stream.owner } )\n        union( stream.canRead, stream.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n      }\n    }\n  },\n  mounted( ) {\n    this.fetchData( )\n  }\n}\n\n",{"version":3,"sources":["Stream.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmCA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Stream.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container xxx-grid-list-xl v-if='stream'>\n    <v-toolbar absolute v-if='stream.deleted'>\n      <span>This stream is in your trashbin. </span>\n      <v-spacer></v-spacer>\n      <v-btn color='primary' v-if='canEdit' @click.native='restore'> Restore? </v-btn>\n    </v-toolbar>\n    <v-layout row wrap class='mb-3'>\n      <v-flex xs12>\n        <stream-detail-title :stream='stream'></stream-detail-title>\n      </v-flex>\n      <v-flex xs12>\n        <v-tabs v-model=\"active\" grow class='pa-0 ma-0' slider-color='primary'>\n          <v-tab key=\"Overview\" ripple :to='{name:\"stream overview\"}'>\n            Overview\n          </v-tab>\n          <v-tab key=\"Sharing\" ripple :to='{name:\"stream sharing\"}'>\n            Sharing\n          </v-tab>\n          <v-tab key=\"History\" ripple :to='{name:\"stream history\"}'>\n            Versions\n          </v-tab>\n          <v-tab key=\"Data\" ripple :to='{name:\"stream data\"}'>\n            Data\n          </v-tab>\n        </v-tabs>\n      </v-flex>\n    </v-layout>\n    <!-- Where the sub routes live -->\n    <!-- <keep-alive> -->\n      <router-view></router-view>\n    <!-- </keep-alive> -->\n  </v-container>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport StreamDetailTitle from '../components/StreamDetailTitle.vue'\nimport DetailDescription from '../components/DetailDescription.vue'\nimport StreamDetailUserPerms from '../components/StreamDetailUserPerms.vue'\nimport StreamDetailNetwork from '../components/StreamDetailNetwork.vue'\nimport StreamDetailComments from '../components/StreamDetailComments.vue'\n\nexport default {\n  name: 'StreamDetailView',\n  components: {\n    StreamDetailTitle,\n    DetailDescription,\n    StreamDetailUserPerms,\n    StreamDetailNetwork,\n    StreamDetailComments\n  },\n  watch: {\n    stream( ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    stream( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      if ( stream === null ) {\n        console.log( 'null fukcing stream' )\n      }\n      return stream\n    },\n    canEdit( ) {\n      if (this.$store.state.user.role == 'admin') return true\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    }\n  },\n  data( ) {\n    return {\n      error: '',\n      editDescription: false,\n      active: null\n    }\n  },\n  methods: {\n    getEndRoute( ) {\n      let ending = this.$route.path.split( '/' ).reverse( )[ 0 ]\n      if ( ending === this.$route.params.streamId || ending === '' ) return 'overview'\n      else return ending\n    },\n    restore( ) {\n      this.$store.dispatch( 'updateStream', { streamId: this.stream.streamId, deleted: false } )\n    },\n    fetchData( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      if ( !stream ) {\n        this.$store.dispatch( 'getStream', { streamId: this.$route.params.streamId } )\n          .then( res => {\n            this.$store.dispatch( 'getUser', { _id: res.data.resource.owner } )\n            union( res.data.resource.canRead, res.data.resource.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n          } )\n          .catch( err => {\n            if ( err.message.includes( '404' ) ) this.error = `Stream ${this.$route.params.streamId} was not found.`\n            if ( err.message.includes( '401' ) ) this.error = `Stream ${this.$route.params.streamId} is not accessible to you due to its protection level.`\n          } )\n      } else {\n        this.$store.dispatch( 'getUser', { _id: stream.owner } )\n        union( stream.canRead, stream.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n      }\n    }\n  },\n  mounted( ) {\n    this.fetchData( )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}