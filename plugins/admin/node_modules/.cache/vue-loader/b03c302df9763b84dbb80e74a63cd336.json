{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ViewerLoadedStreamsCard.vue?vue&type=style&index=0&id=11421f4b&scoped=true&lang=scss&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ViewerLoadedStreamsCard.vue","mtime":1609071089417},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.current {\n  border-left: 4px solid #0A66FF;\n}\n\n.expired {\n  border-left: 4px solid #FF0A6D;\n}\n\n",{"version":3,"sources":["ViewerLoadedStreamsCard.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAiFA;AACA;AACA;;AAEA;AACA;AACA","file":"ViewerLoadedStreamsCard.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card :class='`mb-3 ${ isExpired ? \"expired\" : \"current\"}`'>\n    <v-card-text>\n      <v-layout row wrap>\n        <v-flex xs12>{{stream.name}}</v-flex>\n        <v-flex xs12 class='caption'>\n          <v-icon small>fingerprint</v-icon> {{stream.streamId}}\n          <v-icon small>{{stream.private ? \"lock\" : \"lock_open\"}}</v-icon>\n          last changed <timeago :datetime='stream.updatedAt'></timeago>, created on {{new Date( stream.createdAt ).toLocaleString()}}\n        </v-flex>\n        <v-flex xs12 class='caption' v-if='isExpired'>\n          <v-divider class='my-2'></v-divider>\n          This stream has expired; data was updated.\n        </v-flex>\n      </v-layout>\n    </v-card-text>\n    <v-card-actions>\n      <v-btn flat small @click='$emit(\"remove\", stream.streamId)'>remove</v-btn>\n      <v-btn v-if='isExpired' small @click='refreshStream()'>refresh</v-btn>\n    </v-card-actions>\n  </v-card>\n</template>\n<script>\nimport sockette from 'sockette'\n\nexport default {\n  name: 'ViewerStreamCard',\n  props: {\n    stream: Object\n  },\n  computed: {},\n  data( ) {\n    return {\n      isExpired: false\n    }\n  },\n  methods: {\n    refreshStream( ) {\n      this.isExpired = false\n      this.$emit( \"refresh\", this.stream.streamId )\n    },\n    async initSocket( ) {}\n  },\n  async mounted( ) {\n    let wsUrl = this.$store.state.server.replace( 'http', 'ws' ).replace( '/api', '' )\n    if ( !this.$store.state.client )\n      await this.$store.dispatch( 'createClient' )\n    this.ws = new sockette( `${wsUrl}?client_id=${this.$store.state.client._id}`, {\n      onopen: e => {\n        this.ws.send( JSON.stringify( { eventName: \"join\", resourceId: this.stream.streamId, resourceType: \"stream\" } ) )\n      },\n      onmessage: e => {\n        // console.log( e )\n        if ( e.data === 'ping' ) {\n          this.ws.send( 'alive' )\n          return\n        }\n        let parsedMessage = JSON.parse( e.data )\n        console.log( parsedMessage )\n        try {\n          if ( parsedMessage.args.eventType === \"update-global\" ) {\n            this.isExpired = true\n          }\n        } catch ( err ) {}\n      },\n      onclose: e => {\n        console.log( e )\n      },\n      onerror: e => {\n        console.warn( e )\n      }\n    } )\n  },\n  destroyed( ) {\n    console.log( 'stream render card destroyed ' + this.stream.name + \" \" + this.stream.streamId )\n    this.ws.close( )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n.current {\n  border-left: 4px solid #0A66FF;\n}\n\n.expired {\n  border-left: 4px solid #FF0A6D;\n}\n\n</style>\n"]}]}