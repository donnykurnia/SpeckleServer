{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Streams.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Streams.vue","mtime":1609071089436},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\nimport StreamCard from '../components/StreamCard.vue'\n\nexport default {\n  name: 'StreamsView',\n  components: { StreamCard },\n  computed: {\n    allTags( ) {\n      return this.$store.getters.allStreamTags\n    },\n    allJobNumbers( ) {\n      return this.$store.getters.allJobNumbersStreams\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( stream => stream.parent == null && stream.deleted === false ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    filteredStreams( ) {\n      return this.$store.getters.filteredResources( this.filters )\n    },\n    paginatedStreams( ) {\n      // return this.filteredStreams.slice( this.startIndex, this.endIndex )\n      return this.filteredStreams.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    },\n  },\n  data( ) {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedStreams: [ ],\n      searchfilter: '',\n      filters: [ ],\n      defaultPermission: 'private',\n      isSearching: false,\n      searchHint: `You can restrict your search to the stream's id by prepending id:{your stream id}, similarly for name, tags etc.`\n    }\n  },\n  watch: {\n    searchfilter( ) {\n      this.isSearching = true\n    },\n    selectedStreams( ) {\n      let priv = 0,\n        pub = 0\n      this.selectedStreams.forEach( s => {\n        if ( s.private ) priv++\n        else pub++\n      } )\n      this.defaultPermission = priv > pub ? 'public' : 'private'\n    }\n  },\n  methods: {\n    addSearchQuery( key, tag ) {\n      this.pageNumber = 0\n      let tempFilter = `${key}:${tag}`\n      this.searchfilter = tempFilter\n      setTimeout( ( ) => { this.isSearching = false }, 50 )\n      try {\n        let filters = tempFilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n      this.isSearching = false\n    },\n    createStream( ) {\n      this.$store.dispatch( 'createStream', { name: 'A New Speckle Stream', onlineEditable: true } )\n        .then( res => {\n          this.$router.push( `/streams/${res.streamId}` )\n        } )\n        .catch( err => {\n          console.error( err )\n        } )\n    },\n    createProjectFromSelection( ) {\n      this.$store.dispatch( 'createProject', { name: 'Speckle Project', streams: this.selectedStreams.map( s => s.streamId ) } )\n        .then( res => {\n          this.clearSelection( )\n          this.$router.push( `/projects/${res._id}` )\n        } )\n    },\n    togglePermissions( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, private: this.defaultPermission === 'private' ? true : false } )\n      } )\n      this.defaultPermission = this.defaultPermission === 'private' ? 'public' : 'private'\n    },\n    deleteStreams( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, deleted: true } )\n      } )\n      this.clearSelection( )\n    },\n    updateSearch: debounce( function ( e ) {\n      this.pageNumber = 0\n      this.isSearching = false\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n    selectAll( ) {\n      this.paginatedStreams.forEach( stream => {\n        let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n        if ( index === -1 ) {\n          bus.$emit( 'select-stream', stream.streamId )\n        }\n      } )\n    },\n    selectThis( stream ) {\n      let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n      if ( index === -1 )\n        this.selectedStreams.unshift( stream )\n      else\n        this.selectedStreams.splice( index, 1 )\n    },\n    clearSelection( ) {\n      this.defaultPermission = 'private'\n      bus.$emit( 'unselect-all' )\n    },\n    checkSelection( ) {\n      this.selectedStreams = this.selectedStreams.filter( s => !s.deleted )\n    }\n  },\n  created( ) {}\n}\n\n",{"version":3,"sources":["Streams.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA+GA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Streams.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container grid-list-xl>\n    <!-- Toolbar for stream selection/bulk operations -->\n    <v-toolbar fixed v-if='selectedStreams.length > 0' style='z-index:100'>\n      <v-toolbar-items>\n        <v-btn icon color='primary' class='md-raised md-dense md-primary' @click.native='clearSelection'>\n          <v-icon>close</v-icon>\n        </v-btn>\n        <v-btn flat @click.native='selectAll()'>select all</v-btn>\n      </v-toolbar-items>\n      <v-spacer></v-spacer>\n      <v-toolbar-items>\n        <v-btn flat color='error' @click.native='deleteStreams'>Archive</v-btn>\n        <v-btn flat @click.native='togglePermissions'>Make {{defaultPermission}}</v-btn>\n        <v-btn flat @click.native='createProjectFromSelection'>Create Project</v-btn>\n      </v-toolbar-items>\n    </v-toolbar>\n    <!-- End toolbar -->\n    <v-layout row wrap>\n      <v-flex xs12 py-5 class='headline font-weight-light'>\n        Streams are the channels your design data flows into.\n      </v-flex>\n      <!-- Empty state handler -->\n      <v-flex xs12 v-if='streams.length === 0'>\n        <p class='title font-weight-light'>\n          ðŸ‘‹ Hello {{$store.state.user.name}}! It looks like you haven't created any streams yet. Don't forget to check out the <a href='https://speckle.systems/docs/essentials/start' target='_blank'>guide</a>!\n        </p>\n      </v-flex>\n      <v-flex xs12>\n        <v-text-field solo clearable :xxxhint='searchHint' label=\"Search for a stream\" prepend-inner-icon=\"search\" @input=\"updateSearch\" spellcheck=\"false\" v-model='searchfilter' :loading='isSearching' append-icon=\"refresh\" @click:append=\"$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\"></v-text-field>\n        <!--       <p class='caption'>\n          How to search for things?\n        </p> -->\n        <div v-if='searchfilter && searchfilter!==\"\"'>\n          <p class='title font-weight-light my-3 mx-1'>Found {{filteredStreams.length}} streams matching your search criteria.</p>\n        </div>\n        <!--       </v-flex>\n      <v-flex xs12> -->\n        <v-expansion-panel>\n          <v-expansion-panel-content>\n            <template v-slot:header>Search Options</template>\n            <v-card class='pa-3'>\n              <v-expansion-panel>\n                <v-expansion-panel-content>\n                  <template v-slot:header>Tags</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='tag in allTags' :key='tag' small dense @click='addSearchQuery(\"tag\", tag)'>\n                      {{tag}}\n                    </v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n                <!-- <v-expansion-panel> -->\n                <v-expansion-panel-content>\n                  <template v-slot:header>Job Numbers</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='jnumber in allJobNumbers' :key='jnumber' @click='addSearchQuery(\"jn\", jnumber)'>{{jnumber}}</v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n              </v-expansion-panel>\n            </v-card>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n        <!-- {{allTags}} -->\n      </v-flex>\n    </v-layout>\n    <!-- All the stream cards will flow below -->\n    <v-layout row wrap>\n      <!-- Pagination top (TODO: extract to component) -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredStreams.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredStreams.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n      <!-- The actual stream cards -->\n      <v-flex xs12 sm6 v-for='stream in paginatedStreams' :key='stream._id'>\n        <stream-card :stream='stream' v-on:selected='selectThis' v-on:deleted='clearSelection'></stream-card>\n      </v-flex>\n      <!-- Pagination bottom  -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredStreams.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredStreams.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredStreams.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n    </v-layout>\n    <!-- Big fat fab button to create a new stream -->\n    <v-btn color=\"primary\" dark fixed large bottom right fab @click.native='createStream'>\n      <v-icon>add</v-icon>\n    </v-btn>\n  </v-container>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport StreamCard from '../components/StreamCard.vue'\n\nexport default {\n  name: 'StreamsView',\n  components: { StreamCard },\n  computed: {\n    allTags( ) {\n      return this.$store.getters.allStreamTags\n    },\n    allJobNumbers( ) {\n      return this.$store.getters.allJobNumbersStreams\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( stream => stream.parent == null && stream.deleted === false ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    filteredStreams( ) {\n      return this.$store.getters.filteredResources( this.filters )\n    },\n    paginatedStreams( ) {\n      // return this.filteredStreams.slice( this.startIndex, this.endIndex )\n      return this.filteredStreams.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    },\n  },\n  data( ) {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedStreams: [ ],\n      searchfilter: '',\n      filters: [ ],\n      defaultPermission: 'private',\n      isSearching: false,\n      searchHint: `You can restrict your search to the stream's id by prepending id:{your stream id}, similarly for name, tags etc.`\n    }\n  },\n  watch: {\n    searchfilter( ) {\n      this.isSearching = true\n    },\n    selectedStreams( ) {\n      let priv = 0,\n        pub = 0\n      this.selectedStreams.forEach( s => {\n        if ( s.private ) priv++\n        else pub++\n      } )\n      this.defaultPermission = priv > pub ? 'public' : 'private'\n    }\n  },\n  methods: {\n    addSearchQuery( key, tag ) {\n      this.pageNumber = 0\n      let tempFilter = `${key}:${tag}`\n      this.searchfilter = tempFilter\n      setTimeout( ( ) => { this.isSearching = false }, 50 )\n      try {\n        let filters = tempFilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n      this.isSearching = false\n    },\n    createStream( ) {\n      this.$store.dispatch( 'createStream', { name: 'A New Speckle Stream', onlineEditable: true } )\n        .then( res => {\n          this.$router.push( `/streams/${res.streamId}` )\n        } )\n        .catch( err => {\n          console.error( err )\n        } )\n    },\n    createProjectFromSelection( ) {\n      this.$store.dispatch( 'createProject', { name: 'Speckle Project', streams: this.selectedStreams.map( s => s.streamId ) } )\n        .then( res => {\n          this.clearSelection( )\n          this.$router.push( `/projects/${res._id}` )\n        } )\n    },\n    togglePermissions( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, private: this.defaultPermission === 'private' ? true : false } )\n      } )\n      this.defaultPermission = this.defaultPermission === 'private' ? 'public' : 'private'\n    },\n    deleteStreams( ) {\n      this.selectedStreams.forEach( stream => {\n        this.$store.dispatch( 'updateStream', { streamId: stream.streamId, deleted: true } )\n      } )\n      this.clearSelection( )\n    },\n    updateSearch: debounce( function ( e ) {\n      this.pageNumber = 0\n      this.isSearching = false\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n    selectAll( ) {\n      this.paginatedStreams.forEach( stream => {\n        let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n        if ( index === -1 ) {\n          bus.$emit( 'select-stream', stream.streamId )\n        }\n      } )\n    },\n    selectThis( stream ) {\n      let index = this.selectedStreams.findIndex( s => s.streamId === stream.streamId )\n      if ( index === -1 )\n        this.selectedStreams.unshift( stream )\n      else\n        this.selectedStreams.splice( index, 1 )\n    },\n    clearSelection( ) {\n      this.defaultPermission = 'private'\n      bus.$emit( 'unselect-all' )\n    },\n    checkSelection( ) {\n      this.selectedStreams = this.selectedStreams.filter( s => !s.deleted )\n    }\n  },\n  created( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}