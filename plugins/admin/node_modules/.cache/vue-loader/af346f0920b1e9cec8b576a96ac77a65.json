{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/StreamHistory.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/StreamHistory.vue","mtime":1609071089435},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport Axios from 'axios'\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport VueSlider from 'vue-slider-component'\nexport default {\n  name: 'StreamHistory',\n  components: {\n    VueSlider\n  },\n  watch: {\n    'stream.children'( ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    allTags( ) {\n      return this.$store.getters.allTags\n    },\n    sizeBound( ) {\n      return this.streamChildren.slice( 0, 30 )\n    },\n    stream( ) {\n      return this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    },\n    canEdit( ) {\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    }\n  },\n  data( ) {\n    return {\n      parentStream: null,\n      streamChildren: [ ],\n    }\n  },\n  methods: {\n    getDate( dateeee ) {\n      let date = new Date( dateeee )\n      return date.toLocaleString( 'en', { year: 'numeric', month: 'long', day: 'numeric' } )\n    },\n    getTime( dateeee ) {\n      let date = new Date( dateeee )\n      return date.toLocaleString( 'en', { timeStyle: \"short\" } )\n    },\n    updateTags: debounce( function ( e ) {\n      this.$store.dispatch( 'updateStream', { streamId: e.streamId, tags: e.tags } )\n    }, 500 ),\n\n    sliderChanged( args ) {\n      console.log( args )\n      let ind = this.$refs.timeSlider.getIndex( )\n      this.lowerIndex = ind[ 0 ]\n      this.upperIndex = ind[ 1 ]\n    },\n    fetchData( ) {\n      if ( !this.stream.children ) return\n      if ( this.stream.children.length === 0 ) return\n\n      this.stream.children.map( streamId => Axios.get( `streams/${streamId}?fields=streamId,updatedAt,createdAt,owner,tags,name,commitMessage,description` ) )\n        .reduce( ( promiseChain, currentTask ) => {\n          return promiseChain.then( chainResults => currentTask.then( currentResult => [ ...chainResults, currentResult.data.resource ] ) )\n        }, Promise.resolve( [ ] ) ).then( async arr => {\n\n          arr.forEach( s => s.diffResult = { data: { objects: { inA: [ ], common: [ ], inB: [ ] } } } )\n\n          this.streamChildren = arr\n          this.streamChildren.push( this.parentStream )\n          this.streamChildren = this.streamChildren.sort( ( a, b ) => new Date( b.updatedAt ) - new Date( a.updatedAt ) )\n          let stringRes = `${this.stream.streamId}\\n`\n\n          for ( let i = 0; i < this.streamChildren.length - 1; i++ ) {\n            let currStream = this.streamChildren[ i ]\n            let nextStream = this.streamChildren[ i + 1 ]\n            this.streamChildren[ i ].diffResult = await Axios.get( `streams/${currStream.streamId}/diff/${nextStream.streamId}` )\n            let stats = this.streamChildren[ i ].diffResult.data\n            stringRes += ` \\t${stats.objects.inA.length}\\t${stats.objects.inB.length}\\t${stats.objects.common.length}\\t${stats.objects.inA.length + stats.objects.common.length} \\n`\n          }\n          console.log( stringRes )\n        } )\n    }\n  },\n  mounted( ) {\n    console.log( 'hello data' )\n    this.parentStream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    this.fetchData( this.$route.params.streamId )\n  }\n}\n\n",{"version":3,"sources":["StreamHistory.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AA0FA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StreamHistory.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-layout row wrap>\n    <v-flex xs12>\n      <v-card class='elevation-0'>\n        <v-toolbar class='elevation-0 transparent' v-if='stream.parent'>\n          <v-icon small left>home</v-icon>&nbsp;\n          <span class=\"title font-weight-light\">\n            Parent stream: <router-link :to='\"/streams/\" + stream.parent'>{{stream.parent}}</router-link>\n          </span>\n        </v-toolbar>\n        <v-toolbar class='elevation-0 transparent'>\n          <v-icon small left>history</v-icon>&nbsp;\n          <span class='title font-weight-light' v-if='stream.children.length>0'>\n            Showing max 30 versions (total: {{streamChildren.length}} versions).\n          </span>\n          <span class='title font-weight-light' v-else>\n            This stream has no history.\n          </span>\n        </v-toolbar>\n        <v-layout row wrap>\n          <v-flex xs12 pa-3>\n            <v-timeline clipped dense>\n              <v-timeline-item v-for=\"(stream, index) in sizeBound\" :key=\"stream.streamId\" small :color=\"hexFromString(stream.streamId)\">\n                <div :class='`${index===0 ? \"elevation-5\" : \"elevation-0\"} py-3 px-4`'>\n                  <v-btn icon @click.native='$router.push(`/view/${stream.streamId}`)'>\n                    <v-icon>360</v-icon>\n                  </v-btn>\n                  <span :class=\"`headline font-weight-bold ${hexFromString(stream.streamId)}--text`\" v-if='index===0'>\n                    Latest\n                  </span>\n                  <span :class=\"`headline ${index===0 ? 'font-weight-bold' : ''} ${hexFromString(stream.streamId)}--text`\" v-else>\n                    {{getDate(stream.createdAt)}} {{getTime(stream.createdAt)}}\n                  </span>\n                  <timeago :datetime='stream.updatedAt'></timeago>\n                  <p :class=\"`xxxheadline font-weight-light mb-3 ${hexFromString(stream.streamId)}--text`\">\n                    <v-icon small>{{stream.private ? \"lock\" : \"lock_open\"}}</v-icon> &nbsp;\n                    <v-icon small>fingerprint</v-icon> {{stream.streamId}}\n                    <span class='text-capitalize font-weight-bold'>{{stream.name}}</span>\n                  </p>\n                  <div>\n                    <v-combobox @input='updateTags({tags: stream.tags, streamId: stream.streamId})' v-model=\"stream.tags\" :items='allTags' hint='tags' solo persistent-hint small-chips deletable-chips multiple tags>\n                      <template v-slot:no-data>\n                        <p>Add a new tag!</p>\n                      </template>\n                    </v-combobox>\n                    {{stream.commitMessage ? stream.commitMessage : \"No commit message.\"}}\n                  </div>\n                  <v-divider class='my-3'></v-divider>\n                  <div v-if='stream.diffResult'>\n                    <v-tooltip bottom>\n                      <template v-slot:activator=\"{ on }\">\n                        <span class='green--text' v-on=\"on\">\n                          <v-icon small class='green--text'>add_circle_outline</v-icon><b> {{stream.diffResult.data.objects.inA.length}}</b>\n                        </span> &nbsp;\n                      </template>\n                      <span>Added objects</span>\n                    </v-tooltip>\n                    <v-tooltip bottom>\n                      <template v-slot:activator=\"{ on }\">\n                        <span class='red--text' v-on=\"on\">\n                          <v-icon small class='red--text'>remove_circle_outline</v-icon><b> {{stream.diffResult.data.objects.inB.length}}</b>\n                        </span> &nbsp;\n                      </template>\n                      <span>Removed objects</span>\n                    </v-tooltip>\n                    </v-tooltip>\n                    <v-tooltip bottom>\n                      <template v-slot:activator=\"{ on }\">\n                        <span class='' v-on=\"on\"><b><span style='font-size: 20px'>∩</span> {{stream.diffResult.data.objects.common.length}}</b></span> &nbsp;\n                      </template>\n                      <span>Common objects</span>\n                    </v-tooltip>\n                    </v-tooltip>\n                    <v-tooltip bottom>\n                      <template v-slot:activator=\"{ on }\">\n                        <span class='grey--text' v-on=\"on\"><b>Σ {{stream.diffResult.data.objects.inA.length + stream.diffResult.data.objects.common.length}}</b></span>\n                      </template>\n                      <span>Total object count</span>\n                    </v-tooltip>\n                  </div>\n                </div>\n              </v-timeline-item>\n            </v-timeline>\n          </v-flex>\n        </v-layout>\n      </v-card>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport Axios from 'axios'\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport VueSlider from 'vue-slider-component'\nexport default {\n  name: 'StreamHistory',\n  components: {\n    VueSlider\n  },\n  watch: {\n    'stream.children'( ) {\n      this.fetchData( )\n    }\n  },\n  computed: {\n    allTags( ) {\n      return this.$store.getters.allTags\n    },\n    sizeBound( ) {\n      return this.streamChildren.slice( 0, 30 )\n    },\n    stream( ) {\n      return this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    },\n    canEdit( ) {\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    }\n  },\n  data( ) {\n    return {\n      parentStream: null,\n      streamChildren: [ ],\n    }\n  },\n  methods: {\n    getDate( dateeee ) {\n      let date = new Date( dateeee )\n      return date.toLocaleString( 'en', { year: 'numeric', month: 'long', day: 'numeric' } )\n    },\n    getTime( dateeee ) {\n      let date = new Date( dateeee )\n      return date.toLocaleString( 'en', { timeStyle: \"short\" } )\n    },\n    updateTags: debounce( function ( e ) {\n      this.$store.dispatch( 'updateStream', { streamId: e.streamId, tags: e.tags } )\n    }, 500 ),\n\n    sliderChanged( args ) {\n      console.log( args )\n      let ind = this.$refs.timeSlider.getIndex( )\n      this.lowerIndex = ind[ 0 ]\n      this.upperIndex = ind[ 1 ]\n    },\n    fetchData( ) {\n      if ( !this.stream.children ) return\n      if ( this.stream.children.length === 0 ) return\n\n      this.stream.children.map( streamId => Axios.get( `streams/${streamId}?fields=streamId,updatedAt,createdAt,owner,tags,name,commitMessage,description` ) )\n        .reduce( ( promiseChain, currentTask ) => {\n          return promiseChain.then( chainResults => currentTask.then( currentResult => [ ...chainResults, currentResult.data.resource ] ) )\n        }, Promise.resolve( [ ] ) ).then( async arr => {\n\n          arr.forEach( s => s.diffResult = { data: { objects: { inA: [ ], common: [ ], inB: [ ] } } } )\n\n          this.streamChildren = arr\n          this.streamChildren.push( this.parentStream )\n          this.streamChildren = this.streamChildren.sort( ( a, b ) => new Date( b.updatedAt ) - new Date( a.updatedAt ) )\n          let stringRes = `${this.stream.streamId}\\n`\n\n          for ( let i = 0; i < this.streamChildren.length - 1; i++ ) {\n            let currStream = this.streamChildren[ i ]\n            let nextStream = this.streamChildren[ i + 1 ]\n            this.streamChildren[ i ].diffResult = await Axios.get( `streams/${currStream.streamId}/diff/${nextStream.streamId}` )\n            let stats = this.streamChildren[ i ].diffResult.data\n            stringRes += ` \\t${stats.objects.inA.length}\\t${stats.objects.inB.length}\\t${stats.objects.common.length}\\t${stats.objects.inA.length + stats.objects.common.length} \\n`\n          }\n          console.log( stringRes )\n        } )\n    }\n  },\n  mounted( ) {\n    console.log( 'hello data' )\n    this.parentStream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    this.fetchData( this.$route.params.streamId )\n  }\n}\n\n</script>\n<style lang='scss'>\n</style>\n"]}]}