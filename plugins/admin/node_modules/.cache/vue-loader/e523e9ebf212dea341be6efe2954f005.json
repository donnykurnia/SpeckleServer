{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/PermissionTableProject.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/PermissionTableProject.vue","mtime":1609071089409},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport union from 'lodash.union'\nimport uniq from 'lodash.uniq'\n\nimport UserPermCard from '@/components/UserPermissionProjectCard.vue'\n\nexport default {\n  name: 'PermissionTable',\n  components: {\n    UserPermCard\n  },\n  props: {\n    project: Object,\n    globalDisabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    canEdit( ) {\n      return this.project.owner === this.$store.state.user._id || this.project.canWrite.indexOf( this.$store.state.user._id ) > -1 || this.$store.state.user.role === 'admin'\n    },\n    canReadProject( ) { return this.project.canRead },\n    canWriteProject( ) { return this.project.canWrite },\n    canReadStreams( ) { return this.project.permissions.canRead },\n    canWriteStreams( ) { return this.project.permissions.canWrite },\n    allUsers( ) {\n      return uniq( [ ...this.canReadProject, ...this.canWriteProject, ...this.canReadStreams, ...this.canWriteProject, this.project.owner ] )\n    },\n    allUsersPop( ) {\n      if ( this.allUsers.length === 0 ) return [ ]\n      return this.allUsers.map( userId => {\n        let u = this.$store.state.users.find( user => user._id === userId )\n        if ( !u ) this.$store.dispatch( 'getUser', { _id: userId } )\n        if ( u ) u.isOwner = u._id === this.project.owner\n        return u\n      } ) //.sort( ( a, b ) => a.name > b.name ? 1 : -1 )\n    }\n  },\n  data( ) {\n    return {}\n  },\n  methods: {\n    hasWritePermissionStreams( _id ) {\n      return this.canWriteStreams.indexOf( _id ) > -1\n    },\n    hasWritePermissionProject( _id ) {\n      return this.canWriteProject.indexOf( _id ) > -1\n    },\n    changePermissionProject( userId ) {\n      let canWrite = this.project.canWrite.indexOf( userId ) > -1 ? true : false\n      let localCanWrite = [ ],\n        localCanRead = [ ],\n        streamCanWrite = this.project.permissions.canWrite,\n        streamCanRead = this.project.permissions.canRead\n\n      if ( canWrite ) {\n        localCanWrite = this.project.canWrite.filter( uId => uId !== userId )\n        localCanRead = uniq( [ ...this.project.canRead, userId ] )\n      } else {\n        localCanRead = this.project.canRead\n        localCanWrite = uniq( [ ...this.project.canWrite, userId ] )\n        // TODO: UPGRADE STREAMS CANWRITE TOO (otherwise user x can edit the project but not do much)\n        streamCanWrite = uniq( [ ...streamCanWrite, userId ] )\n        this.upgradeUser( userId )\n      }\n      this.$store.dispatch( 'updateProject', { _id: this.project._id, permissions: { canRead: streamCanRead, canWrite: streamCanWrite }, canRead: localCanRead, canWrite: localCanWrite } )\n    },\n    changePermissionStreams( userId ) {\n      let hasWritePermission = this.project.permissions.canWrite.indexOf( userId ) > -1 ? true : false\n      if ( !hasWritePermission ) this.upgradeUser( userId )\n      else this.downgradeUser( userId )\n    },\n    upgradeUser( userId ) {\n      this.$store.dispatch( 'upgradeUserInProject', { projectId: this.project._id, userId: userId } )\n    },\n    downgradeUser( userId ) {\n      this.$store.dispatch( 'downgradeUserInProject', { projectId: this.project._id, userId: userId } )\n    },\n    removeUser( userId ) {\n      this.$store.dispatch( 'removeUserInProject', { projectId: this.project._id, userId: userId } )\n    }\n  },\n  mounted( ) {}\n}\n\n",{"version":3,"sources":["PermissionTableProject.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;AAeA;AACA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PermissionTableProject.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container grid-list-sm v-if='allUsersPop.length > 0 && project' class='pa-0 ma-0'>\n    <v-layout row wrap>\n      <v-flex xs12 v-if='!canEdit'>You cannot add users to this project.</v-flex>\n      <v-flex xs12 v-for='user in allUsersPop' v-if='user' :key='user._id'>\n        <user-perm-card\n        @change-permission-streams='changePermissionStreams'\n        @change-permission-project='changePermissionProject'\n        @remove-user='removeUser'\n        :user='user' :project='project' :global-disabled='globalDisabled'></user-perm-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n<script>\nimport union from 'lodash.union'\nimport uniq from 'lodash.uniq'\n\nimport UserPermCard from '@/components/UserPermissionProjectCard.vue'\n\nexport default {\n  name: 'PermissionTable',\n  components: {\n    UserPermCard\n  },\n  props: {\n    project: Object,\n    globalDisabled: {\n      type: Boolean,\n      default: false\n    }\n  },\n  computed: {\n    canEdit( ) {\n      return this.project.owner === this.$store.state.user._id || this.project.canWrite.indexOf( this.$store.state.user._id ) > -1 || this.$store.state.user.role === 'admin'\n    },\n    canReadProject( ) { return this.project.canRead },\n    canWriteProject( ) { return this.project.canWrite },\n    canReadStreams( ) { return this.project.permissions.canRead },\n    canWriteStreams( ) { return this.project.permissions.canWrite },\n    allUsers( ) {\n      return uniq( [ ...this.canReadProject, ...this.canWriteProject, ...this.canReadStreams, ...this.canWriteProject, this.project.owner ] )\n    },\n    allUsersPop( ) {\n      if ( this.allUsers.length === 0 ) return [ ]\n      return this.allUsers.map( userId => {\n        let u = this.$store.state.users.find( user => user._id === userId )\n        if ( !u ) this.$store.dispatch( 'getUser', { _id: userId } )\n        if ( u ) u.isOwner = u._id === this.project.owner\n        return u\n      } ) //.sort( ( a, b ) => a.name > b.name ? 1 : -1 )\n    }\n  },\n  data( ) {\n    return {}\n  },\n  methods: {\n    hasWritePermissionStreams( _id ) {\n      return this.canWriteStreams.indexOf( _id ) > -1\n    },\n    hasWritePermissionProject( _id ) {\n      return this.canWriteProject.indexOf( _id ) > -1\n    },\n    changePermissionProject( userId ) {\n      let canWrite = this.project.canWrite.indexOf( userId ) > -1 ? true : false\n      let localCanWrite = [ ],\n        localCanRead = [ ],\n        streamCanWrite = this.project.permissions.canWrite,\n        streamCanRead = this.project.permissions.canRead\n\n      if ( canWrite ) {\n        localCanWrite = this.project.canWrite.filter( uId => uId !== userId )\n        localCanRead = uniq( [ ...this.project.canRead, userId ] )\n      } else {\n        localCanRead = this.project.canRead\n        localCanWrite = uniq( [ ...this.project.canWrite, userId ] )\n        // TODO: UPGRADE STREAMS CANWRITE TOO (otherwise user x can edit the project but not do much)\n        streamCanWrite = uniq( [ ...streamCanWrite, userId ] )\n        this.upgradeUser( userId )\n      }\n      this.$store.dispatch( 'updateProject', { _id: this.project._id, permissions: { canRead: streamCanRead, canWrite: streamCanWrite }, canRead: localCanRead, canWrite: localCanWrite } )\n    },\n    changePermissionStreams( userId ) {\n      let hasWritePermission = this.project.permissions.canWrite.indexOf( userId ) > -1 ? true : false\n      if ( !hasWritePermission ) this.upgradeUser( userId )\n      else this.downgradeUser( userId )\n    },\n    upgradeUser( userId ) {\n      this.$store.dispatch( 'upgradeUserInProject', { projectId: this.project._id, userId: userId } )\n    },\n    downgradeUser( userId ) {\n      this.$store.dispatch( 'downgradeUserInProject', { projectId: this.project._id, userId: userId } )\n    },\n    removeUser( userId ) {\n      this.$store.dispatch( 'removeUserInProject', { projectId: this.project._id, userId: userId } )\n    }\n  },\n  mounted( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n.user {\n  padding: 2px 10px;\n}\n\n</style>\n"]}]}