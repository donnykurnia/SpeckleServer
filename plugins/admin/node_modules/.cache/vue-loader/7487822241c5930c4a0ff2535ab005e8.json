{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Trash.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Trash.vue","mtime":1609071089436},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport SimpleCard from '../components/SimpleCard.vue'\n\nexport default {\n  name: 'TrashView',\n  components: {\n    SimpleCard\n  },\n  watch: {\n    filterText( ) {\n      this.pageNumber = 0\n    }\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === true )\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( s => s.deleted === true )\n    },\n    allResources( ) {\n      return [ ...this.streams, ...this.projects ].filter( res => res.owner === this.$store.state.user._id ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    allResourcesFiltered( ) {\n      if ( this.filterText === '' || this.filterText === null ) return this.allResources\n      return this.allResources.filter( r => r.name ? r.name.toLowerCase( ).includes( this.filterText.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n    },\n    allResourcesPaginated( ) {\n      return this.allResourcesFiltered.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    }\n  },\n  data( ) {\n    return {\n      filterText: '',\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedResources: [ ]\n    }\n  },\n  methods: {\n    deleteForever( resource ) {\n      if ( resource.streamId )\n        this.$store.dispatch( 'deleteStream', { streamId: resource.streamId } )\n      else\n        this.$store.dispatch( 'deleteProject', { _id: resource._id } )\n    },\n    deleteAllSelected( ) {\n      for ( let resource of this.selectedResources ) {\n        if ( resource.streamId )\n          this.$store.dispatch( 'deleteStream', { streamId: resource.streamId } )\n        else\n          this.$store.dispatch( 'deleteProject', { _id: resource._id } )\n      }\n      this.clearSelection( )\n    },\n    restore( resource ) {\n      if ( resource.streamId )\n        this.$store.dispatch( 'updateStream', { streamId: resource.streamId, deleted: false } )\n      else\n        this.$store.dispatch( 'updateProject', { _id: resource._id, deleted: false } )\n    },\n    restoreAllSelected( ) {\n      for ( let resource of this.selectedResources ) {\n        if ( resource.streamId )\n          this.$store.dispatch( 'updateStream', { streamId: resource.streamId, deleted: false } )\n        else\n          this.$store.dispatch( 'updateProject', { _id: resource._id, deleted: false } )\n      }\n      this.clearSelection( )\n    },\n    clearSelection( ) {\n      this.selectedResources.forEach( resource => {\n        bus.$emit( 'unselect-all-resources' )\n      } )\n    },\n    selectAll( ) {\n      this.allResourcesPaginated.forEach( resource => {\n        let index = this.selectedResources.findIndex( res => res._id === resource._id )\n        if ( index === -1 ) {\n          bus.$emit( 'select-resource', resource._id )\n        }\n      } )\n    },\n    selectThis( resource ) {\n      let index = this.selectedResources.findIndex( r => r._id === resource._id )\n      if ( index === -1 )\n        this.selectedResources.unshift( resource )\n      else\n        this.selectedResources.splice( index, 1 )\n    }\n  },\n  created( ) {}\n}\n\n",{"version":3,"sources":["Trash.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"Trash.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container grid-list-xl>\n    <!-- Toolbar for stream selection/bulk operations -->\n    <v-toolbar fixed v-if='selectedResources.length > 0' style='z-index:100' class='elevation-0'>\n      <v-toolbar-items>\n        <v-btn icon color='primary' class='md-raised md-dense md-primary' @click.native='clearSelection'>\n          <v-icon>close</v-icon>\n        </v-btn>\n        <v-btn flat @click.native='selectAll()'>select all</v-btn>\n      </v-toolbar-items>\n      <v-spacer></v-spacer>\n      <v-toolbar-items>\n        <v-btn flat color='error' @click.native='deleteAllSelected()'>Delete Permanently ({{selectedResources.length}})</v-btn>\n        <v-btn color='primary' depressed @click.native='restoreAllSelected()'>Restore</v-btn>\n      </v-toolbar-items>\n    </v-toolbar>\n    <v-layout row wrap>\n      <v-flex xs12 py-5 class='headline font-weight-light'>\n        Welcome to the recycle bin ({{allResources.length}} items). You can restore them or delete them permanently.<br><strong>Take care, there's no undo button!</strong>\n      </v-flex>\n      <v-flex xs12>\n        <v-text-field solo clearable label=\"Search for a resource\" prepend-inner-icon=\"search\" @input=\"\" spellcheck=\"false\" v-model='filterText'></v-text-field>\n        <div v-if='filterText && filterText!==\"\"'>\n          <p class='title font-weight-light my-3 mx-1'>Found {{allResourcesFiltered.length}} resources matching your search criteria.</p>\n        </div>\n      </v-flex>\n      <!-- Pagination top  -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(allResourcesFiltered.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(allResourcesFiltered.length/sliceSize)' :disabled='pageNumber >= Math.round(allResourcesFiltered.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(allResourcesFiltered.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n      <v-flex xs12>\n        <v-layout row wrap>\n          <v-flex xs12 sm6 lg6 v-for='resource in allResourcesPaginated' :key='resource._id'>\n            <simple-card :resource='resource' v-on:selected='selectThis' xxxxv-on:deleted='clearSelection'></simple-card>\n          </v-flex>\n        </v-layout>\n      </v-flex>\n      <!-- Pagination bottom  -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(allResourcesFiltered.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(allResourcesFiltered.length/sliceSize)' :disabled='pageNumber >= Math.round(allResourcesFiltered.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(allResourcesFiltered.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n<script>\nimport SimpleCard from '../components/SimpleCard.vue'\n\nexport default {\n  name: 'TrashView',\n  components: {\n    SimpleCard\n  },\n  watch: {\n    filterText( ) {\n      this.pageNumber = 0\n    }\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === true )\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( s => s.deleted === true )\n    },\n    allResources( ) {\n      return [ ...this.streams, ...this.projects ].filter( res => res.owner === this.$store.state.user._id ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    allResourcesFiltered( ) {\n      if ( this.filterText === '' || this.filterText === null ) return this.allResources\n      return this.allResources.filter( r => r.name ? r.name.toLowerCase( ).includes( this.filterText.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n    },\n    allResourcesPaginated( ) {\n      return this.allResourcesFiltered.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    }\n  },\n  data( ) {\n    return {\n      filterText: '',\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      selectedResources: [ ]\n    }\n  },\n  methods: {\n    deleteForever( resource ) {\n      if ( resource.streamId )\n        this.$store.dispatch( 'deleteStream', { streamId: resource.streamId } )\n      else\n        this.$store.dispatch( 'deleteProject', { _id: resource._id } )\n    },\n    deleteAllSelected( ) {\n      for ( let resource of this.selectedResources ) {\n        if ( resource.streamId )\n          this.$store.dispatch( 'deleteStream', { streamId: resource.streamId } )\n        else\n          this.$store.dispatch( 'deleteProject', { _id: resource._id } )\n      }\n      this.clearSelection( )\n    },\n    restore( resource ) {\n      if ( resource.streamId )\n        this.$store.dispatch( 'updateStream', { streamId: resource.streamId, deleted: false } )\n      else\n        this.$store.dispatch( 'updateProject', { _id: resource._id, deleted: false } )\n    },\n    restoreAllSelected( ) {\n      for ( let resource of this.selectedResources ) {\n        if ( resource.streamId )\n          this.$store.dispatch( 'updateStream', { streamId: resource.streamId, deleted: false } )\n        else\n          this.$store.dispatch( 'updateProject', { _id: resource._id, deleted: false } )\n      }\n      this.clearSelection( )\n    },\n    clearSelection( ) {\n      this.selectedResources.forEach( resource => {\n        bus.$emit( 'unselect-all-resources' )\n      } )\n    },\n    selectAll( ) {\n      this.allResourcesPaginated.forEach( resource => {\n        let index = this.selectedResources.findIndex( res => res._id === resource._id )\n        if ( index === -1 ) {\n          bus.$emit( 'select-resource', resource._id )\n        }\n      } )\n    },\n    selectThis( resource ) {\n      let index = this.selectedResources.findIndex( r => r._id === resource._id )\n      if ( index === -1 )\n        this.selectedResources.unshift( resource )\n      else\n        this.selectedResources.splice( index, 1 )\n    }\n  },\n  created( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}