{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/store/lambda/component/arupCompute.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/store/lambda/component/arupCompute.vue","mtime":1609071089425},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport Axios from 'axios'\nimport * as Msal from 'msal'\n\nexport default {\n  name: 'ArupCompute',\n  components: {\n  },\n  props: {\n    block: Object,\n    params: { },\n  },\n  data( ) {\n    return {\n      libraries: [ ],\n      functions: [ ],\n    }\n  },\n  computed: {\n    inputs () {\n      return Object.assign({ }, this.params.valueData, this.params.pathData)\n    },\n    token () {\n      return this.$store.state.tokens['msal|' + this.block.msal.clientId]\n    }\n  },\n  methods: {\n    selectLibrary ( payload ) {\n      this.functions.slice(0, this.functions.length)\n\n      Axios.get(`${payload.api}?flat=true`, {\n        baseURL: `https://compute.arup.digital/`,\n        headers: {\n          Authorization: 'Bearer ' + this.token\n        }\n      })\n      .then ( res =>{\n        this.functions = res.data\n        this.functions.sort((x, y) => (x.name.toLowerCase() > y.name.toLowerCase()) ? 1 : -1)\n\n        this.params.selectedLibrary = payload\n\n        if (this.params.selectedFunction)\n        {\n          if (this.functions.findIndex(x => x.api === this.params.selectedFunction.api) === -1)\n            this.params.selectedFunction = null\n        }\n\n        this.$emit('update-param', this.params)\n      })\n    },\n    selectFunction ( payload ) {\n      this.params.selectedFunction = payload\n\n      this.params.valueData = {}\n      this.params.pathData = {}\n      this.params.outputPath = ''\n\n      this.$emit('update-param', this.params)\n    },\n    isInputByValue ( paramName ) {\n      if (this.params.valueData)\n        if (this.params.valueData.hasOwnProperty(paramName))\n          return true\n\n      return false\n    },\n    toggleInputSource ( payload ) {\n      if (!this.params.pathData)\n        this.params.pathData = {}\n\n      if (!this.params.valueData)\n        this.params.valueData = {}\n        \n      if (this.isInputByValue(payload.name))\n      {\n        this.params.pathData[payload.name] = null\n        delete this.params.valueData[payload.name]\n      }\n      else\n      {\n        this.params.valueData[payload.name] = null\n        delete this.params.pathData[payload.name]\n      }\n\n      this.$emit('update-param', this.params)\n    },\n    updateInput ( payload ) {\n      if (payload.value === null || payload.value === '' || payload.value === undefined)\n        payload.value = null\n\n      if (!this.params.pathData)\n        this.params.pathData = {}\n\n      if (!this.params.valueData)\n        this.params.valueData = {}\n\n      if (this.isInputByValue(payload.name))\n        this.params.valueData[payload.name] = payload.value\n      else\n        this.params.pathData[payload.name] = payload.value\n        \n      this.$emit('update-param', this.params)\n    },\n    async getLibraries ( rerun = false ) {\n      Axios.get(`api`, {\n        baseURL: `https://compute.arup.digital/`,\n        headers: {\n          Authorization: 'Bearer ' + this.token\n        }\n      })\n      .then ( res =>{\n        this.libraries = res.data\n        this.libraries.sort((x, y) => (x.name.toLowerCase() > y.name.toLowerCase()) ? 1 : -1)\n        \n        if (this.params.selectedLibrary)\n          this.selectLibrary (this.params.selectedLibrary)\n      })\n      .catch (err => {\n        console.log(err)\n        if (err.response.status === 401 && !rerun)\n        {\n          this.$store.dispatch('authenticateBlocks', [ this.block ])\n          .then(res => {\n            this.getLibraries(true)\n          })\n        }\n        else\n        {\n          console.log('Unable to access ArupCompute')\n          this.$store.commit('DELETE_TOKEN', 'msal|' + this.block.msal.clientId)\n        }\n      })\n    }\n  },\n  created () {\n    this.getLibraries()\n  }\n}\n",{"version":3,"sources":["arupCompute.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAmfile":"arupCompute.vue","sourceRoot":"src/store/lambda/component","sourcesContent":["<template>\n  <v-layout row wrap>\n    <v-flex xs12>\n      <v-autocomplete\n        return-object\n        :items=\"libraries\"\n        item-text=\"name\"\n        item-value=\"api\"\n        v-model=\"params.selectedLibrary\"\n        v-on:input=\"selectLibrary\"\n        :loading=\"libraries.length === 0\"\n        label=\"Select a library\">\n        <template slot=\"item\" slot-scope=\"libraries\">\n          <div>\n            {{libraries.item.name}}\n            <br>\n            <span class=\"caption\">\n              {{libraries.item.api}}\n            </span>\n          </div>\n        </template>\n      </v-autocomplete>\n    </v-flex>\n\n    <v-flex xs12 v-if=\"params.selectedLibrary\">\n      <v-autocomplete\n        return-object\n        :items=\"functions\"\n        item-text=\"name\"\n        item-value=\"api\"\n        v-model=\"params.selectedFunction\"\n        v-on:input=\"selectFunction\"\n        :loading=\"functions.length === 0\"\n        label=\"Select a function\">\n        <template slot=\"item\" slot-scope=\"functions\">\n          <div>\n            {{functions.item.name}}\n            <br>\n            <span class=\"caption\">\n              {{functions.item.api}}\n            </span>\n          </div>\n        </template>\n      </v-autocomplete>\n    </v-flex>\n\n    <v-flex mt-0 v-if=\"params.selectedLibrary && params.selectedFunction && functions.length > 0\" xs12>\n      <v-card>\n        <v-card-title>\n          <span class='font-weight-light'>\n            Inputs\n          </span>\n        </v-card-title>\n        <v-divider/>\n        <v-layout row wrap pa-3>\n          <v-flex xs12 sm6 md3 v-for='input in params.selectedFunction.inputs' :key='input.name'>\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on }\">\n                <div v-on=\"on\" ma-0 pa-0>\n                  <v-autocomplete\n                    v-if=\"(input.values || input.type === 'System.Boolean') && isInputByValue(input.name)\"\n                    :items=\"input.values ? input.values : [true, false]\"\n                    :label='input.name'\n                    v-model='inputs[input.name]'\n                    :append-icon=\"isInputByValue(input.name) ? 'edit' : 'input'\"\n                    :hint=\"isInputByValue(input.name) ? 'Input by value' : 'Input by object path'\"\n                    :persistent-hint=\"true\"\n                    :error-messages=\"!input.isOptional && (!inputs.hasOwnProperty(input.name) || inputs[input.name] === null) ? ['Input required'] : ''\"\n                    @click:append=\"toggleInputSource({name: input.name, value: $event})\"\n                    @change=\"updateInput({name: input.name, value: $event})\">\n                  </v-autocomplete> \n                  <v-text-field\n                    v-else\n                    :label='input.name'\n                    v-model='inputs[input.name]'\n                    :append-icon=\"isInputByValue(input.name) ? 'edit' : 'input'\"\n                    :hint=\"isInputByValue(input.name) ? 'Input by value' : 'Input by object path'\"\n                    :persistent-hint=\"true\"\n                    :error-messages=\"!input.isOptional && (!inputs.hasOwnProperty(input.name) || inputs[input.name] === null) ? 'Input required' : ''\"\n                    @click:append=\"toggleInputSource({name: input.name, value: $event})\"\n                    @change=\"updateInput({name: input.name, value: $event})\">\n                  </v-text-field>\n                </div>\n              </template>\n              <div>\n                <span><b>Description:</b> {{input.description}}</span>\n                <br>\n                <span class=\"caption\"><b>Type:</b> {{input.type}}</span>\n              </div>\n            </v-tooltip>\n          </v-flex>\n        </v-layout>\n        <v-divider/>\n        <v-card-title>\n          <span class='font-weight-light'>\n            Output\n          </span>\n        </v-card-title>\n        <v-divider/>\n        <v-flex xs12>\n          <v-text-field \n            label='Output path'\n            v-model='params.outputPath'\n            hint=\"Object path to embed all results under\"\n            :persistent-hint=\"true\"\n            @change=\"$emit('update-param', params)\">\n          </v-text-field>\n        </v-flex>\n      </v-card>\n    </v-flex>\n\n  </v-layout>\n</template>\n<script>\n\nimport Axios from 'axios'\nimport * as Msal from 'msal'\n\nexport default {\n  name: 'ArupCompute',\n  components: {\n  },\n  props: {\n    block: Object,\n    params: { },\n  },\n  data( ) {\n    return {\n      libraries: [ ],\n      functions: [ ],\n    }\n  },\n  computed: {\n    inputs () {\n      return Object.assign({ }, this.params.valueData, this.params.pathData)\n    },\n    token () {\n      return this.$store.state.tokens['msal|' + this.block.msal.clientId]\n    }\n  },\n  methods: {\n    selectLibrary ( payload ) {\n      this.functions.slice(0, this.functions.length)\n\n      Axios.get(`${payload.api}?flat=true`, {\n        baseURL: `https://compute.arup.digital/`,\n        headers: {\n          Authorization: 'Bearer ' + this.token\n        }\n      })\n      .then ( res =>{\n        this.functions = res.data\n        this.functions.sort((x, y) => (x.name.toLowerCase() > y.name.toLowerCase()) ? 1 : -1)\n\n        this.params.selectedLibrary = payload\n\n        if (this.params.selectedFunction)\n        {\n          if (this.functions.findIndex(x => x.api === this.params.selectedFunction.api) === -1)\n            this.params.selectedFunction = null\n        }\n\n        this.$emit('update-param', this.params)\n      })\n    },\n    selectFunction ( payload ) {\n      this.params.selectedFunction = payload\n\n      this.params.valueData = {}\n      this.params.pathData = {}\n      this.params.outputPath = ''\n\n      this.$emit('update-param', this.params)\n    },\n    isInputByValue ( paramName ) {\n      if (this.params.valueData)\n        if (this.params.valueData.hasOwnProperty(paramName))\n          return true\n\n      return false\n    },\n    toggleInputSource ( payload ) {\n      if (!this.params.pathData)\n        this.params.pathData = {}\n\n      if (!this.params.valueData)\n        this.params.valueData = {}\n        \n      if (this.isInputByValue(payload.name))\n      {\n        this.params.pathData[payload.name] = null\n        delete this.params.valueData[payload.name]\n      }\n      else\n      {\n        this.params.valueData[payload.name] = null\n        delete this.params.pathData[payload.name]\n      }\n\n      this.$emit('update-param', this.params)\n    },\n    updateInput ( payload ) {\n      if (payload.value === null || payload.value === '' || payload.value === undefined)\n        payload.value = null\n\n      if (!this.params.pathData)\n        this.params.pathData = {}\n\n      if (!this.params.valueData)\n        this.params.valueData = {}\n\n      if (this.isInputByValue(payload.name))\n        this.params.valueData[payload.name] = payload.value\n      else\n        this.params.pathData[payload.name] = payload.value\n        \n      this.$emit('update-param', this.params)\n    },\n    async getLibraries ( rerun = false ) {\n      Axios.get(`api`, {\n        baseURL: `https://compute.arup.digital/`,\n        headers: {\n          Authorization: 'Bearer ' + this.token\n        }\n      })\n      .then ( res =>{\n        this.libraries = res.data\n        this.libraries.sort((x, y) => (x.name.toLowerCase() > y.name.toLowerCase()) ? 1 : -1)\n        \n        if (this.params.selectedLibrary)\n          this.selectLibrary (this.params.selectedLibrary)\n      })\n      .catch (err => {\n        console.log(err)\n        if (err.response.status === 401 && !rerun)\n        {\n          this.$store.dispatch('authenticateBlocks', [ this.block ])\n          .then(res => {\n            this.getLibraries(true)\n          })\n        }\n        else\n        {\n          console.log('Unable to access ArupCompute')\n          this.$store.commit('DELETE_TOKEN', 'msal|' + this.block.msal.clientId)\n        }\n      })\n    }\n  },\n  created () {\n    this.getLibraries()\n  }\n}\n</script>\n<style scoped lang='scss'>\n</style>"]}]}