{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/PermissionTable.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/PermissionTable.vue","mtime":1609071089409},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport union from 'lodash.union'\nimport uniq from 'lodash.uniq'\n\nexport default {\n  name: 'PermissionTable',\n  props: {\n    resource: Object,\n    globalDisabled: {\n      type: Boolean,\n      default: false\n    },\n    disabledUsers: {\n      type: Array,\n      default: ( ) => [ ]\n    }\n  },\n  computed: {\n    canRead( ) { return [ ...this.resource.canRead, this.resource.owner ] },\n    canWrite( ) { return [ ...this.resource.canWrite, , this.resource.owner ] },\n    allUsers( ) {\n      return union( this.canRead, this.canWrite, [ this.resource.owner ] )\n    },\n    allUsersPop( ) {\n      if ( this.allUsers.length === 0 ) return [ ]\n      return this.allUsers.map( userId => {\n        if ( !userId ) {} else {\n          let u = this.$store.state.users.find( user => user._id === userId )\n          if ( !u ) this.$store.dispatch( 'getUser', { _id: userId } )\n          if ( u ) u.isOwner = u._id === this.resource.owner\n          return u\n        }\n      } ).sort( ( a, b ) => a.name > b.name ? 1 : -1 )\n    }\n  },\n  data( ) {\n    return {}\n  },\n  methods: {\n    isDisabled( _id ) {\n      return this.disabledUsers.indexOf( _id ) > -1\n    },\n    hasWritePermission( _id ) {\n      return this.canWrite.indexOf( _id ) > -1\n    },\n    changePermission( _id ) {\n      let localCanWrite = [ ],\n        localCanRead = [ ]\n\n      // check in which perm cat the user is right now\n      let index = this.canWrite.indexOf( _id )\n\n      // canWrite -> canRead\n      if ( index > -1 ) {\n        localCanWrite = this.canWrite.filter( uId => uId !== _id )\n        localCanRead = uniq( [ ...this.canRead, _id ] )\n        // this.$emit('move-user')\n        // TODO: this.$emit('move-user', { userId:x, from:'W->R' }) // for projects\n        // canRead -> canWrite\n      } else {\n        localCanRead = this.canRead.filter( uId => uId !== _id )\n        localCanWrite = uniq( [ ...this.canWrite, _id ] )\n        // TODO: this.$emit('move-user', { userId:x, from:'R->W' }) // for projects\n      }\n\n      // emit one global event\n      this.$emit( 'update-table', { canRead: localCanRead, canWrite: localCanWrite } )\n    },\n    removeUser( _id ) {\n      let localCanWrite = this.canWrite.filter( uId => uId !== _id )\n      let localCanRead = this.canRead.filter( uId => uId !== _id )\n      this.$emit( 'remove-user', { userId: _id } )\n      this.$emit( 'update-table', { canRead: localCanRead, canWrite: localCanWrite } )\n    }\n  },\n  mounted( ) {}\n}\n\n",{"version":3,"sources":["PermissionTable.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;AA0BA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"PermissionTable.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-container grid-list-xl v-if='allUsersPop.length > 0' class='pa-0 ma-0'>\n    <v-layout row wrap>\n      <v-flex xs12 sm6 lg4 v-for='user in allUsersPop' v-if='user' :key='user._id'>\n        <v-card tile class='pa-3 elevation-1'>\n          <v-layout row wrap align-center justify-space-between>\n            <v-flex xs8>\n              <v-avatar size='21' dark :color=\"getHexFromString( user.name )\">\n                {{user.name.substring(0,1).toUpperCase()}}\n              </v-avatar>&nbsp;\n              <span>{{user.name}} {{user.surname}}</span>&nbsp;\n              <span class='caption'>{{user.company}}</span>\n            </v-flex>\n            <v-flex xs4 class='text-xs-right'>\n              <v-btn depressed :color='hasWritePermission(user._id)?\"primary\":\"\"' @click.native='changePermission(user._id)' :disabled='user.surname.includes(`(that is you!)`) || globalDisabled || isDisabled(user._id)'>{{hasWritePermission(user._id) ? \"edit\" : \"view\"}}</v-btn>\n              <v-btn depressed @click.native='removeUser(user._id)' :disabled='user.surname.includes(`(that is you!)`) || globalDisabled || isDisabled(user._id)'>\n                <v-icon>close</v-icon>\n              </v-btn>\n            </v-flex>\n          </v-layout>\n        </v-card>\n      </v-flex>\n    </v-layout>\n  </v-container>\n</template>\n<script>\nimport union from 'lodash.union'\nimport uniq from 'lodash.uniq'\n\nexport default {\n  name: 'PermissionTable',\n  props: {\n    resource: Object,\n    globalDisabled: {\n      type: Boolean,\n      default: false\n    },\n    disabledUsers: {\n      type: Array,\n      default: ( ) => [ ]\n    }\n  },\n  computed: {\n    canRead( ) { return [ ...this.resource.canRead, this.resource.owner ] },\n    canWrite( ) { return [ ...this.resource.canWrite, , this.resource.owner ] },\n    allUsers( ) {\n      return union( this.canRead, this.canWrite, [ this.resource.owner ] )\n    },\n    allUsersPop( ) {\n      if ( this.allUsers.length === 0 ) return [ ]\n      return this.allUsers.map( userId => {\n        if ( !userId ) {} else {\n          let u = this.$store.state.users.find( user => user._id === userId )\n          if ( !u ) this.$store.dispatch( 'getUser', { _id: userId } )\n          if ( u ) u.isOwner = u._id === this.resource.owner\n          return u\n        }\n      } ).sort( ( a, b ) => a.name > b.name ? 1 : -1 )\n    }\n  },\n  data( ) {\n    return {}\n  },\n  methods: {\n    isDisabled( _id ) {\n      return this.disabledUsers.indexOf( _id ) > -1\n    },\n    hasWritePermission( _id ) {\n      return this.canWrite.indexOf( _id ) > -1\n    },\n    changePermission( _id ) {\n      let localCanWrite = [ ],\n        localCanRead = [ ]\n\n      // check in which perm cat the user is right now\n      let index = this.canWrite.indexOf( _id )\n\n      // canWrite -> canRead\n      if ( index > -1 ) {\n        localCanWrite = this.canWrite.filter( uId => uId !== _id )\n        localCanRead = uniq( [ ...this.canRead, _id ] )\n        // this.$emit('move-user')\n        // TODO: this.$emit('move-user', { userId:x, from:'W->R' }) // for projects\n        // canRead -> canWrite\n      } else {\n        localCanRead = this.canRead.filter( uId => uId !== _id )\n        localCanWrite = uniq( [ ...this.canWrite, _id ] )\n        // TODO: this.$emit('move-user', { userId:x, from:'R->W' }) // for projects\n      }\n\n      // emit one global event\n      this.$emit( 'update-table', { canRead: localCanRead, canWrite: localCanWrite } )\n    },\n    removeUser( _id ) {\n      let localCanWrite = this.canWrite.filter( uId => uId !== _id )\n      let localCanRead = this.canRead.filter( uId => uId !== _id )\n      this.$emit( 'remove-user', { userId: _id } )\n      this.$emit( 'update-table', { canRead: localCanRead, canWrite: localCanWrite } )\n    }\n  },\n  mounted( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n.user {\n  padding: 2px 10px;\n}\n\n</style>\n"]}]}