{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamLayer.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamLayer.vue","mtime":1609071089415},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'StreamLayer',\n  props: {\n    layer: Object,\n  },\n  watch: {\n    speckledData( ) {\n      if ( this.firstCall ) return this.firstCall = false\n      this.emitUpdate( )\n    },\n    layer( newValue ) {\n      this.rawData = this.layer.objects.join( ', ' )\n    }\n  },\n  computed: {\n    speckledData( ) {\n      // No need to generate hashes here as the server will generate them for us\n      if ( !this.parsedData ) return [ ]\n      let specklObjects = this.parsedData.map( val => {\n        if ( val === 'the meaning of life' )\n          return { type: 'Number', value: 42 } // lol\n        if ( val === '0' )\n          return { type: 'Number', value: 0 }\n        if ( typeof val === 'boolean' )\n          return { type: \"Boolean\", value: val }\n        if ( typeof val === 'string' )\n          return { type: \"String\", value: val } // TODO: Hash it please\n        if ( typeof val === 'number' )\n          return { type: \"Number\", value: val } // TODO: Hash it please\n      } )\n      return specklObjects\n    },\n    parsedData( ) {\n      if ( !this.rawData ) return null\n      let parsedData = [ ]\n      if ( this.splitArray ) {\n        parsedData = this.rawData.split( ',' ).map( s => s.trim( ) ).map( s => {\n          let retVal = null\n          retVal = parseFloat( s )\n          if ( !retVal )\n            retVal = s === 'true' ? true : ( s === 'false' ? false : s )\n          return retVal\n        } )\n      } else\n        parsedData = [ this.rawData ]\n      return parsedData\n    },\n    // rawData() {\n    //   return this.layer.objects\n    // }\n  },\n  data( ) {\n    return {\n      rawData: '',\n      expanded: false,\n      splitArray: true,\n      firstCall: true,\n    }\n  },\n  methods: {\n    removeLayer( ) {\n      this.$emit( \"remove\", this.layer )\n    },\n    updateName( args ) {\n      this.layer.name = args.text.trim( )\n      this.emitUpdate( )\n    },\n    __emitUpdate( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    },\n    emitUpdate: debounce( function( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    }, 1000 )\n  },\n  created( ) {\n    // console.log('created layer')\n    // console.log(this.layer.objects.join(', '))\n    this.rawData = this.layer.objects.join( ', ' )\n  }\n}\n\n",{"version":3,"sources":["StreamLayer.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;AAmBA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StreamLayer.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout row wrap align-center class='pa-2 my-5'>\n    <v-flex xs12 md3 mb-3>\n      <v-btn icon @click.native='removeLayer()'>\n        <v-icon>delete_forever</v-icon>\n      </v-btn>\n      <span class='subheading font-weight-lightxxx'>\n        <editable-span :text='layer.name' :data-key='layer.guid' @update='updateName'></editable-span>\n      </span>\n    </v-flex>\n    <v-flex xs12 md9 pl-2>\n      <v-text-field box v-model='rawData' :label='`Layer \"${layer.name}\" data`' hint='values will be separated by commas and parsed into their natural types (strings, numbers, booleans)' />\n    </v-flex>\n    <v-flex xs12>\n      <v-divider></v-divider>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'StreamLayer',\n  props: {\n    layer: Object,\n  },\n  watch: {\n    speckledData( ) {\n      if ( this.firstCall ) return this.firstCall = false\n      this.emitUpdate( )\n    },\n    layer( newValue ) {\n      this.rawData = this.layer.objects.join( ', ' )\n    }\n  },\n  computed: {\n    speckledData( ) {\n      // No need to generate hashes here as the server will generate them for us\n      if ( !this.parsedData ) return [ ]\n      let specklObjects = this.parsedData.map( val => {\n        if ( val === 'the meaning of life' )\n          return { type: 'Number', value: 42 } // lol\n        if ( val === '0' )\n          return { type: 'Number', value: 0 }\n        if ( typeof val === 'boolean' )\n          return { type: \"Boolean\", value: val }\n        if ( typeof val === 'string' )\n          return { type: \"String\", value: val } // TODO: Hash it please\n        if ( typeof val === 'number' )\n          return { type: \"Number\", value: val } // TODO: Hash it please\n      } )\n      return specklObjects\n    },\n    parsedData( ) {\n      if ( !this.rawData ) return null\n      let parsedData = [ ]\n      if ( this.splitArray ) {\n        parsedData = this.rawData.split( ',' ).map( s => s.trim( ) ).map( s => {\n          let retVal = null\n          retVal = parseFloat( s )\n          if ( !retVal )\n            retVal = s === 'true' ? true : ( s === 'false' ? false : s )\n          return retVal\n        } )\n      } else\n        parsedData = [ this.rawData ]\n      return parsedData\n    },\n    // rawData() {\n    //   return this.layer.objects\n    // }\n  },\n  data( ) {\n    return {\n      rawData: '',\n      expanded: false,\n      splitArray: true,\n      firstCall: true,\n    }\n  },\n  methods: {\n    removeLayer( ) {\n      this.$emit( \"remove\", this.layer )\n    },\n    updateName( args ) {\n      this.layer.name = args.text.trim( )\n      this.emitUpdate( )\n    },\n    __emitUpdate( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    },\n    emitUpdate: debounce( function( ) {\n      this.$emit( 'update', { layer: this.layer, objects: this.speckledData } )\n    }, 1000 )\n  },\n  created( ) {\n    // console.log('created layer')\n    // console.log(this.layer.objects.join(', '))\n    this.rawData = this.layer.objects.join( ', ' )\n  }\n}\n\n</script>\n<style scoped lang='scss'>\npre {\n  font-size: 12px;\n  line-height: 14px;\n  padding: 5px;\n  box-sizing: border-box;\n  background-color: ghostwhite;\n}\n\n.layer {\n  padding-top: 15px;\n  padding-bottom: 15px;\n  background-color: white;\n  transition: all .3s ease;\n  border-top: 1px solid #E6E6E6;\n}\n\n.layer:hover {\n  background-color: #F4F4F4\n}\n\n</style>\n"]}]}