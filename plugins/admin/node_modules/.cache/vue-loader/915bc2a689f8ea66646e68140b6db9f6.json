{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Projects.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/Projects.vue","mtime":1609071089433},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\nimport ProjectCard from '../components/ProjectCard.vue'\n\nexport default {\n  name: 'ProjectsView',\n  components: {\n    ProjectCard\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === false )\n    },\n    filteredProjects( ) {\n      if ( this.searchfilter && this.searchfilter !== '' )\n        return this.$store.getters.filteredResources( this.filters, \"projects\" )\n      // return this.projects.filter( p => p.name.toLowerCase().includes( this.searchfilter.toLowerCase() ) )\n      return this.projects\n    },\n    paginatedProjects( ) {\n      return this.filteredProjects.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    },\n    allTags( ) {\n      return this.$store.getters.allProjectTags\n    },\n    allJobNumbers( ) {\n      return this.$store.getters.allJobNumbersProjects\n    },\n  },\n  data( ) {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      searchfilter: '',\n      selectedProjects: [ ],\n      isSearching: false,\n      filters: [ ]\n    }\n  },\n  methods: {\n    addSearchQuery( key, tag ) {\n      this.pageNumber = 0\n      let tempFilter = `${key}:${tag}`\n      this.searchfilter = tempFilter\n      setTimeout( ( ) => { this.isSearching = false }, 50 )\n      try {\n        let filters = tempFilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n      this.isSearching = false\n    },\n    selectThis( project ) {\n      let index = this.selectedProjects.findIndex( p => p._id === project._id )\n      if ( index === -1 )\n        this.selectedProjects.unshift( project )\n      else\n        this.selectedProjects.splice( index, 1 )\n    },\n    selectAll( ) {\n      this.paginatedProjects.forEach( project => {\n        let index = this.selectedProjects.findIndex( s => s._id === project._id )\n        if ( index === -1 ) {\n          bus.$emit( 'select-project', project._id )\n        }\n      } )\n    },\n    createProject( ) {\n      this.$store.dispatch( 'createProject', { name: 'A brand new speckle project' } )\n        .then( res => {\n          this.$router.push( `/projects/${res._id}` )\n        } )\n    },\n    deleteSelectedProjects( ) {\n      this.selectedProjects.forEach( project => {\n        this.$store.dispatch( 'updateProject', { _id: project._id, deleted: true } )\n      } )\n      this.clearSelection( )\n    },\n    clearSelection( ) {\n      bus.$emit( 'unselect-all-projects' )\n    },\n    updateSearch: debounce( function ( e ) {\n      this.pageNumber = 0\n      this.isSearching = false\n      this.searchfilter = e\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n  },\n  created( ) {}\n}\n\n",{"version":3,"sources":["Projects.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAufile":"Projects.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-container grid-list-xl>\n    <!-- Toolbar for project selection/bulk operations -->\n    <v-toolbar fixed v-if='selectedProjects.length > 0' style='z-index:100'>\n      <v-toolbar-items>\n        <v-btn icon color='primary' class='md-raised md-dense md-primary' @click.native='clearSelection'>\n          <v-icon>close</v-icon>\n        </v-btn>\n        <v-btn flat @click.native='selectAll()'>select all</v-btn>\n      </v-toolbar-items>\n      <v-spacer></v-spacer>\n      <v-toolbar-items>\n        <v-btn flat color='error' @click.native='deleteSelectedProjects'>Archive</v-btn>\n      </v-toolbar-items>\n    </v-toolbar>\n    <!-- End toolbar -->\n    <v-layout row wrap>\n      <v-flex xs12 py-5 class='headline font-weight-light'>\n        Projects allow you to share streams with a team.\n      </v-flex>\n      <!-- Empty state handler -->\n      <v-flex xs12 v-if='projects.length === 0'>\n        <p class='title font-weight-light'>\n          ðŸ‘‹ Hello {{$store.state.user.name}}! It looks like you haven't created any projects yet. Don't forget to check out the <a href='https://speckle.systems/docs/web/management' target='_blank'>guide</a>!\n        </p>\n      </v-flex>\n      <v-flex xs12>\n        <v-text-field solo clearable label=\"Search for a project\" prepend-inner-icon=\"search\" @input=\"updateSearch\" spellcheck=\"false\" v-model='searchfilter' :loading='isSearching' append-icon=\"refresh\" @click:append=\"$store.dispatch( 'getProjects' )\"></v-text-field>\n        <div v-if='searchfilter && searchfilter!==\"\"'>\n          <p class='title font-weight-light my-3 mx-1'>Found {{filteredProjects.length}} project{{filteredProjects.length===1?'':'s'}} matching your search criteria.</p>\n        </div>\n        <v-expansion-panel>\n          <v-expansion-panel-content>\n            <template v-slot:header>Search Options</template>\n            <v-card class='pa-3'>\n              <v-expansion-panel>\n                <v-expansion-panel-content>\n                  <template v-slot:header>Tags</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='tag in allTags' :key='tag' small dense @click='addSearchQuery(\"tag\", tag)'>\n                      {{tag}}\n                    </v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n                <!-- <v-expansion-panel> -->\n                <v-expansion-panel-content>\n                  <template v-slot:header>Job Numbers</template>\n                  <v-card class='pa-3'>\n                    <v-chip v-for='jnumber in allJobNumbers' :key='jnumber' @click='addSearchQuery(\"jn\", jnumber)'>{{jnumber}}</v-chip>\n                  </v-card>\n                </v-expansion-panel-content>\n              </v-expansion-panel>\n            </v-card>\n          </v-expansion-panel-content>\n        </v-expansion-panel>\n      </v-flex>\n    </v-layout>\n    <!-- All the project cards will flow below -->\n    <v-layout row wrap>\n      <!-- Pagination top (TODO: extract to component) -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredProjects.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredProjects.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredProjects.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredProjects.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n      <!-- The actual project cards -->\n      <v-flex xs12 sm6 v-for='project in paginatedProjects' :key='project._id'>\n        <project-card :resource='project' v-on:selected='selectThis' v-on:deleted='clearSelection'></project-card>\n      </v-flex>\n      <!-- Pagination bottom  -->\n      <v-flex xs12>\n        <v-btn icon small @click.native='pageNumber=0' :disabled='pageNumber===0'>\n          <v-icon>first_page</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber-=1' :disabled='pageNumber===0'>\n          <v-icon>chevron_left</v-icon>\n        </v-btn>\n        <v-btn icon @click.native='pageNumber+=1' :disabled='pageNumber >= Math.round(filteredProjects.length/sliceSize)'>\n          <v-icon>chevron_right</v-icon>\n        </v-btn>\n        <v-btn icon small @click.native='pageNumber=Math.round(filteredProjects.length/sliceSize)' :disabled='pageNumber >= Math.round(filteredProjects.length/sliceSize)'>\n          <v-icon>last_page</v-icon>\n        </v-btn>\n        <span class='caption' xxxstyle=\"position: relative;top:8px;\">{{pageNumber}} / {{(filteredProjects.length/sliceSize).toFixed(0)}}</span>\n      </v-flex>\n    </v-layout>\n    <!-- Big fat fab button to create a new project -->\n    <v-btn color=\"primary\" dark fixed large bottom right fab @click.native='createProject'>\n      <v-icon>add</v-icon>\n    </v-btn>\n  </v-container>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport ProjectCard from '../components/ProjectCard.vue'\n\nexport default {\n  name: 'ProjectsView',\n  components: {\n    ProjectCard\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === false )\n    },\n    filteredProjects( ) {\n      if ( this.searchfilter && this.searchfilter !== '' )\n        return this.$store.getters.filteredResources( this.filters, \"projects\" )\n      // return this.projects.filter( p => p.name.toLowerCase().includes( this.searchfilter.toLowerCase() ) )\n      return this.projects\n    },\n    paginatedProjects( ) {\n      return this.filteredProjects.slice( this.currentIndex + this.pageNumber * this.sliceSize, this.sliceSize * ( this.pageNumber + 1 ) )\n    },\n    allTags( ) {\n      return this.$store.getters.allProjectTags\n    },\n    allJobNumbers( ) {\n      return this.$store.getters.allJobNumbersProjects\n    },\n  },\n  data( ) {\n    return {\n      currentIndex: 0,\n      sliceSize: 6,\n      pageNumber: 0,\n      searchfilter: '',\n      selectedProjects: [ ],\n      isSearching: false,\n      filters: [ ]\n    }\n  },\n  methods: {\n    addSearchQuery( key, tag ) {\n      this.pageNumber = 0\n      let tempFilter = `${key}:${tag}`\n      this.searchfilter = tempFilter\n      setTimeout( ( ) => { this.isSearching = false }, 50 )\n      try {\n        let filters = tempFilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n      this.isSearching = false\n    },\n    selectThis( project ) {\n      let index = this.selectedProjects.findIndex( p => p._id === project._id )\n      if ( index === -1 )\n        this.selectedProjects.unshift( project )\n      else\n        this.selectedProjects.splice( index, 1 )\n    },\n    selectAll( ) {\n      this.paginatedProjects.forEach( project => {\n        let index = this.selectedProjects.findIndex( s => s._id === project._id )\n        if ( index === -1 ) {\n          bus.$emit( 'select-project', project._id )\n        }\n      } )\n    },\n    createProject( ) {\n      this.$store.dispatch( 'createProject', { name: 'A brand new speckle project' } )\n        .then( res => {\n          this.$router.push( `/projects/${res._id}` )\n        } )\n    },\n    deleteSelectedProjects( ) {\n      this.selectedProjects.forEach( project => {\n        this.$store.dispatch( 'updateProject', { _id: project._id, deleted: true } )\n      } )\n      this.clearSelection( )\n    },\n    clearSelection( ) {\n      bus.$emit( 'unselect-all-projects' )\n    },\n    updateSearch: debounce( function ( e ) {\n      this.pageNumber = 0\n      this.isSearching = false\n      this.searchfilter = e\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n  },\n  created( ) {}\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}