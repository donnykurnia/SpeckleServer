{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ProcessorBlock.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ProcessorBlock.vue","mtime":1609071089410},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\n\nimport VueJsonPretty from 'vue-json-pretty'\n\nexport default {\n  name: 'ProcessorBlock',\n  components: {\n    VueJsonPretty\n  },\n  props: {\n    index: null,\n    block: Object,\n    output: null,\n    status: '',\n    params: { },\n  },\n  computed: {\n    isAuthenticated () {\n      // Maybe add other auth methods?\n      if (this.block.msal)\n      {\n        var tokenID = 'msal|' + this.block.msal.clientId\n        if (this.$store.state.tokens.hasOwnProperty(tokenID))\n          return true\n\n        return false\n      }\n\n      return true\n    },\n    customComponent () {\n      return () => import(`../store/lambda/component/${this.block.function}.vue`)\n    },\n    arrayParams( ) {\n      return this.block.parameters.filter(p => p.type == 'array')\n    },\n    booleanParams( ) {\n      return this.block.parameters.filter(p => p.type == 'boolean')\n    },\n    genericParams( ) {\n      return this.block.parameters.filter(p => ['string', 'int', 'double'].includes(p.type))\n    },\n    objectarrayParams( ) {\n      return this.block.parameters.filter(p => p.type == 'objectarray')\n    },\n    numOutput( ) {\n      if (this.output == null)\n        return 0\n      if (typeof this.output == 'string')\n        return 1\n      else\n        return Object.keys(this.output).length\n    },\n    responseObject() {\n      if (this.numOutput <= 10)\n        return this.removeArraysRecursive( this.output )\n      else\n      {\n        let bar = {}\n        for ( let key in this.output ) {\n          bar[key] = this.output[key]\n\n          if (Object.keys(bar).length >= 10)\n            break\n        }\n        bar['_hidden'] = `... (${this.numOutput - 10} more objects)`\n        return this.removeArraysRecursive( bar )\n      }\n    }\n  },\n  data( ) {\n    return {\n      displayDialog: { },\n      objectArrayItem: { },\n      objectArrayIndex: -1,\n\n      isAuthenticating: false,\n    }\n  },\n  methods: {\n    removeArraysRecursive( foo ) {\n      let bar = {}\n\n      if (typeof foo == 'string')\n        return foo\n\n      for ( let key in foo ) {\n        if ( !foo.hasOwnProperty( key ) ) continue\n\n        if ( Array.isArray( foo[ key ] ) ) {\n          /*DO FUCKALL */\n          if( foo[key].length < 3 )\n            bar[key] = foo[key]\n          else {\n            bar[key] = [ ...foo[key].slice(0, 3), `... (${foo[key].length - 3} more values)` ]\n          }\n        } else if ( typeof foo[ key ] === 'object' && foo[ key ] !== null ) {\n          bar[ key ] = this.removeArraysRecursive( foo[ key ] )\n        } else {\n          bar[ key ] = foo[ key ]\n        }\n      }\n      return bar\n    },\n    tableHeader( headers ) {\n      var formatedHeaders = [ ]\n      headers.forEach(h => {\n        formatedHeaders.push({text: h, value: h, sortable: false})\n      })\n      formatedHeaders.push({text: 'actions', value: 'actions', sortable: false})\n      return formatedHeaders\n    },\n    resetObjectArrayDialog (param) {\n      this.objectArrayItem = { }\n      this.displayDialog[param.name] = false\n      this.objectArrayIndex = -1\n    },\n    addObjectArrayItem (param) {\n      if (Object.values(this.objectArrayItem).length == param.headers.length)\n      {\n        if (!this.params.hasOwnProperty(param.name)) this.params[param.name] = []\n\n        if (this.objectArrayIndex == -1)\n          this.params[param.name].push(this.objectArrayItem)\n        else\n          this.params[param.name].splice(this.objectArrayIndex, 1, this.objectArrayItem)\n        this.objectArrayItem = { }\n        this.$emit('update-param', {index: this.index, params: this.params})\n      }\n      this.resetObjectArrayDialog(param)\n    },\n    deleteObjectArrayItem (param, index) {\n      this.params[param.name].splice(index, 1)\n      this.$emit('update-param', {index: this.index, params: this.params})\n    },\n    editObjectArrayItem (param, index) {\n      this.objectArrayItem = Object.assign({}, this.params[param.name][index])\n      this.objectArrayIndex = index\n      this.displayDialog[param.name] = true\n    },\n    updateParams ( payload ) {\n      this.params = payload\n      this.$emit('update-param', {index: this.index, params: this.params})\n    },\n    authenticate ( ) {\n      if (this.isAuthenticated)\n        return\n\n      this.isAuthenticating = true\n      this.$store.dispatch('authenticateBlocks', [this.block])\n      .then( res => {\n        this.isAuthenticating = false\n      })\n      .catch( err => {\n        console.log(err)\n        this.isAuthenticated = false\n      })\n    }\n\n  },\n  created () {\n  }\n}\n",{"version":3,"sources":["ProcessorBlock.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAkfile":"ProcessorBlock.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout row wrap>\n    <v-flex xs12 ma-0 pa-0>\n      <v-card>\n        <v-card-title>\n          <v-icon small class=\"ml-2 mr-2\">\n            {{block.icon ? block.icon : 'code'}}\n          </v-icon>\n          <span class='font-weight-light mr-2'>\n            {{ block.name }}\n          </span>\n          <v-dialog\n            max-width=\"500\">\n            <template v-slot:activator=\"{ on }\">\n              <v-btn round small depressed color=\"primary\" v-on=\"on\">\n                <span>help</span>\n              </v-btn>\n            </template>\n            <v-card>\n              <v-card-title>\n                <span class='font-weight-light'>Description</span>\n              </v-card-title>\n              <v-card-text>\n                {{ block.description }}\n              </v-card-text>\n            </v-card>\n          </v-dialog>\n          <v-spacer></v-spacer>\n          <span>\n            <v-btn round small depressed color=\"primary\" v-if=\"status == 'success'\" @click=\"$emit('rerun-block', index)\">\n              <v-icon small>replay</v-icon>\n              <span class=\"mx-2\">re-run</span>\n            </v-btn>\n            <v-btn fab small depressed color=\"primary\" @click=\"$emit('remove-block', index)\">\n              <v-icon>close</v-icon>\n            </v-btn>\n          </span>\n        </v-card-title>\n        <v-divider v-if=\"this.block.parameters.length > 0\" class='mx-0 my-0'></v-divider>\n        <div v-if=\"isAuthenticated\">\n          <v-card-text v-if=\"this.block.customComponent\">\n            <component\n              :block='block'\n              :params='params'\n              v-bind:is=\"customComponent\"\n              v-on:update-param=\"updateParams\">\n            </component>\n          </v-card-text>\n          <v-card-text v-else-if=\"this.block.parameters.length > 0 && isAuthenticated\">\n            <v-layout row wrap>\n              <v-flex xs12 sm6 md3 v-for='param in arrayParams' :key='param.name'>\n                <v-combobox multiple small-chips :label='param.name' v-model='params[param.name]' @change=\"$emit('update-param', {index: index, params: params})\">\n                </v-combobox>\n              </v-flex>\n              <v-flex xs12 sm6 md3 v-for='param in genericParams' :key='param.name'>\n                <v-text-field :label='param.name' v-model='params[param.name]' @change=\"$emit('update-param', {index: index, params: params})\">\n                </v-text-field>\n              </v-flex>\n              <v-flex xs12 sm6 md3 v-for='param in booleanParams' :key='param.name'>\n                <v-checkbox :label='param.name' v-model='params[param.name]' @change=\"$emit('update-param', {index: index, params: params})\">\n                </v-checkbox>\n              </v-flex>\n              <v-flex xs12 sm12 md12 v-for='param in objectarrayParams' :key='param.name'>\n                <v-card outlined>\n                  <v-flex>\n                    <span class='font-weight-light mr-3'>{{param.name}}</span>\n                    <v-dialog :persistent='true' v-model=\"displayDialog[param.name]\" max-width='300'>\n                      <template v-slot:activator=\"{ on }\">\n                        <v-btn round small v-on=\"on\">\n                          <v-icon small>add</v-icon>\n                          <span class=\"mx-2\">new entry</span>\n                        </v-btn>\n                      </template>\n                      <v-card>\n                        <v-card-title class='title font-weight-light'>\n                          {{objectArrayIndex == -1 ? 'New Entry' : 'Modify Entry'}}\n                        </v-card-title>\n                        <v-card-text>\n                          <v-layout row wrap>\n                            <v-flex xs12 sm12 md12 v-for='header in param.headers' :key='param.name + \"_\" + header'>\n                              <v-text-field :label='header' v-model='objectArrayItem[header]'>\n                              </v-text-field>\n                            </v-flex>\n                          </v-layout>\n                        </v-card-text>\n                        <v-card-actions>\n                          <v-btn flat color='primary' @click='addObjectArrayItem(param)'>\n                            {{objectArrayIndex == -1 ? 'Add' : 'Modify'}}\n                          </v-btn>\n                          <v-btn flat color='primary' @click='resetObjectArrayDialog(param)'>\n                            Cancel\n                          </v-btn>\n                        </v-card-actions>\n                      </v-card>\n                    </v-dialog>\n                  </v-flex>\n                  <v-data-table disable-initial-sort hide-actions :headers='tableHeader(param.headers)' :items='params[param.name]'>\n                    <template v-slot:items=\"props\">\n                      <td v-for='p in Object.entries(props.item)' :key='p[0]'>{{p[1]}}</td>\n                      <td width='200px'>\n                        <v-btn flat icon small @click=\"deleteObjectArrayItem(param, props.index)\">\n                          <v-icon small>\n                            delete\n                          </v-icon>\n                        </v-btn>\n                        <v-btn flat icon small @click=\"editObjectArrayItem(param, props.index)\">\n                          <v-icon small>\n                            edit\n                          </v-icon>\n                        </v-btn>\n                      </td>\n                    </template>\n                    <template v-slot:no-data>\n                      <td v-for='h in param.headers' :key='h'></td>\n                      <td width='10%'></td>\n                    </template>\n                  </v-data-table>\n                </v-card>\n              </v-flex>\n            </v-layout>\n          </v-card-text>\n        </div>\n        <div v-else>\n          <v-card-text>\n            <v-layout row wrap>\n              <v-flex xs12 class=\"text-xs-center\">\n                <v-btn v-if=\"!isAuthenticating\" @click=\"authenticate()\" round depressed color=\"primary\">\n                  Authenticate\n                </v-btn>\n                <v-progress-circular v-else indeterminate color=\"primary\">\n                </v-progress-circular>\n              </v-flex>\n            </v-layout>\n          </v-card-text>\n        </div>\n        <v-progress-linear\n          color='primary'\n          v-bind:indeterminate=\"this.status == 'running'\">\n        </v-progress-linear>\n      </v-card>\n    </v-flex>\n    <v-flex xs12 ma-0 pa-0 text-xs-center class=\"title font-weight-black\">\n      |\n    </v-flex>\n    <v-flex xs12 mt-0 pa-0 text-xs-center>\n      <v-dialog\n        v-if=\"output != null\"\n        max-width=\"500\">\n        <template v-slot:activator=\"{ on }\">\n          <v-btn round small dark depressed v-on=\"on\" :color=\"status == 'success' ? 'green' : 'red'\">\n            <v-icon class=\"ml-2\" small>{{status == \"success\" ? \"check\" : \"stop\"}}</v-icon>\n            <span class=\"mx-2\">view output</span>\n          </v-btn>\n        </template>\n        <v-card>\n          <v-card-title>\n            <span class='font-weight-light'>\n              {{status == \"error\" ? \"Error\" : \"Response\"}}\n            </span>\n          </v-card-title>\n          <v-card-text>\n            <vue-json-pretty :data='responseObject' :deep='1' highlight-mouseover-node show-length :show-line='false' :show-double-quotes='false'>\n            </vue-json-pretty>\n          </v-card-text>\n        </v-card>\n      </v-dialog>\n      <v-btn v-else round small dark depressed :color=\"status == 'running' ? 'orange' : 'primary'\">\n        <v-icon class=\"ml-2\" small>{{status == \"running\" ? \"timer\" : \"drafts\"}}</v-icon>\n        <span class=\"mx-2\">{{status == \"running\" ? \"waiting\" : \"no output\"}}</span>\n      </v-btn>\n    </v-flex>\n    <v-flex xs12 pa-0 text-xs-center class=\"title font-weight-black\">\n      <v-icon>arrow_downward</v-icon>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\n\nimport VueJsonPretty from 'vue-json-pretty'\n\nexport default {\n  name: 'ProcessorBlock',\n  components: {\n    VueJsonPretty\n  },\n  props: {\n    index: null,\n    block: Object,\n    output: null,\n    status: '',\n    params: { },\n  },\n  computed: {\n    isAuthenticated () {\n      // Maybe add other auth methods?\n      if (this.block.msal)\n      {\n        var tokenID = 'msal|' + this.block.msal.clientId\n        if (this.$store.state.tokens.hasOwnProperty(tokenID))\n          return true\n\n        return false\n      }\n\n      return true\n    },\n    customComponent () {\n      return () => import(`../store/lambda/component/${this.block.function}.vue`)\n    },\n    arrayParams( ) {\n      return this.block.parameters.filter(p => p.type == 'array')\n    },\n    booleanParams( ) {\n      return this.block.parameters.filter(p => p.type == 'boolean')\n    },\n    genericParams( ) {\n      return this.block.parameters.filter(p => ['string', 'int', 'double'].includes(p.type))\n    },\n    objectarrayParams( ) {\n      return this.block.parameters.filter(p => p.type == 'objectarray')\n    },\n    numOutput( ) {\n      if (this.output == null)\n        return 0\n      if (typeof this.output == 'string')\n        return 1\n      else\n        return Object.keys(this.output).length\n    },\n    responseObject() {\n      if (this.numOutput <= 10)\n        return this.removeArraysRecursive( this.output )\n      else\n      {\n        let bar = {}\n        for ( let key in this.output ) {\n          bar[key] = this.output[key]\n\n          if (Object.keys(bar).length >= 10)\n            break\n        }\n        bar['_hidden'] = `... (${this.numOutput - 10} more objects)`\n        return this.removeArraysRecursive( bar )\n      }\n    }\n  },\n  data( ) {\n    return {\n      displayDialog: { },\n      objectArrayItem: { },\n      objectArrayIndex: -1,\n\n      isAuthenticating: false,\n    }\n  },\n  methods: {\n    removeArraysRecursive( foo ) {\n      let bar = {}\n\n      if (typeof foo == 'string')\n        return foo\n\n      for ( let key in foo ) {\n        if ( !foo.hasOwnProperty( key ) ) continue\n\n        if ( Array.isArray( foo[ key ] ) ) {\n          /*DO FUCKALL */\n          if( foo[key].length < 3 )\n            bar[key] = foo[key]\n          else {\n            bar[key] = [ ...foo[key].slice(0, 3), `... (${foo[key].length - 3} more values)` ]\n          }\n        } else if ( typeof foo[ key ] === 'object' && foo[ key ] !== null ) {\n          bar[ key ] = this.removeArraysRecursive( foo[ key ] )\n        } else {\n          bar[ key ] = foo[ key ]\n        }\n      }\n      return bar\n    },\n    tableHeader( headers ) {\n      var formatedHeaders = [ ]\n      headers.forEach(h => {\n        formatedHeaders.push({text: h, value: h, sortable: false})\n      })\n      formatedHeaders.push({text: 'actions', value: 'actions', sortable: false})\n      return formatedHeaders\n    },\n    resetObjectArrayDialog (param) {\n      this.objectArrayItem = { }\n      this.displayDialog[param.name] = false\n      this.objectArrayIndex = -1\n    },\n    addObjectArrayItem (param) {\n      if (Object.values(this.objectArrayItem).length == param.headers.length)\n      {\n        if (!this.params.hasOwnProperty(param.name)) this.params[param.name] = []\n\n        if (this.objectArrayIndex == -1)\n          this.params[param.name].push(this.objectArrayItem)\n        else\n          this.params[param.name].splice(this.objectArrayIndex, 1, this.objectArrayItem)\n        this.objectArrayItem = { }\n        this.$emit('update-param', {index: this.index, params: this.params})\n      }\n      this.resetObjectArrayDialog(param)\n    },\n    deleteObjectArrayItem (param, index) {\n      this.params[param.name].splice(index, 1)\n      this.$emit('update-param', {index: this.index, params: this.params})\n    },\n    editObjectArrayItem (param, index) {\n      this.objectArrayItem = Object.assign({}, this.params[param.name][index])\n      this.objectArrayIndex = index\n      this.displayDialog[param.name] = true\n    },\n    updateParams ( payload ) {\n      this.params = payload\n      this.$emit('update-param', {index: this.index, params: this.params})\n    },\n    authenticate ( ) {\n      if (this.isAuthenticated)\n        return\n\n      this.isAuthenticating = true\n      this.$store.dispatch('authenticateBlocks', [this.block])\n      .then( res => {\n        this.isAuthenticating = false\n      })\n      .catch( err => {\n        console.log(err)\n        this.isAuthenticated = false\n      })\n    }\n\n  },\n  created () {\n  }\n}\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}