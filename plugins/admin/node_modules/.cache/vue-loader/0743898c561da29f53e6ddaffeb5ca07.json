{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ViewerObjectGroups.vue?vue&type=template&id=34c23a05&scoped=true&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ViewerObjectGroups.vue","mtime":1609071089418},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/loaders/templateLoader.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n<v-layout row wrap>\n  <v-flex xs12>\n    <v-autocomplete box label='select a property to group objects by' clearable v-model=\"groupKey\" :items=\"allKeys\"></v-autocomplete>\n    <v-text-field v-show='isTextProperty' label=\"filter\" v-model='filterText' hint='Search through the layers below' append-icon='filter_list' clearable></v-text-field>\n  </v-flex>\n  <!--     <v-flex xs12 v-if='$store.getters[\"hasStructuralProperties\"]'>\n    <v-btn block>Show structural</v-btn>\n  </v-flex> -->\n  <v-flex xs12 v-if='isTextProperty && groupKey'>\n    <v-card v-for='group in myFilteredGroups' :key='group.name' :class='`mb-3 ${ group.isolated ? \"elevation-15\" : \"elevation-1\"} ${ group.visible ? \"elevation-1\" : \"elevation-0\" }`' v-if='group.objects.length>0'>\n      <v-card-text>\n        <v-layout align-center>\n          <v-flex xs2>\n            <v-avatar size=\"20\" :color=\"getHexFromString(group.name)\"></v-avatar>\n          </v-flex>\n          <v-flex class='caption text-truncate'>\n            <b>{{group.name}}</b>&nbsp;<span class='font-weight-light'>({{group.objects.length}} objects)</span>\n          </v-flex>\n          <v-flex xs4 class='text-xs-right'>\n            <v-btn flat icon small @click.native='toggleVisible(group.name)' :color='group.visible ? \"\":\"grey\"'>\n              <v-icon>remove_red_eye</v-icon>\n            </v-btn>\n            <v-btn flat icon small @click.native='toggleIsolation(group.name)' :color='group.isolated ? \"\":\"grey\"'>\n              <v-icon>location_searching</v-icon>\n            </v-btn>\n          </v-flex>\n        </v-layout>\n      </v-card-text>\n    </v-card>\n  </v-flex>\n  <v-flex xs12 v-if='!isTextProperty && groupKey'>\n    <v-card :class='`mb-3 ${ orphanGroup.isolated ? \"elevation-15\" : \"elevation-1\"} ${ orphanGroup.visible ? \"elevation-1\" : \"elevation-0\" }`' v-if='orphanGroup'>\n      <v-card-text>\n        <v-layout align-center>\n          <v-flex xs1>\n            <!-- <v-avatar size=\"20\" :color=\"getHexFromString(orphanGroup.name)\"></v-avatar> -->\n          </v-flex>\n          <v-flex class='caption'>\n            <b>{{orphanGroup.name}}</b>&nbsp;<span class='font-weight-light'>({{orphanGroup.objects.length}} objects)</span>\n          </v-flex>\n          <v-flex xs4 class='text-xs-right'>\n            <v-btn flat icon small @click.native='toggleVisible(orphanGroup.name)' :color='orphanGroup.visible ? \"\":\"grey\"'>\n              <v-icon>remove_red_eye</v-icon>\n            </v-btn>\n            <v-btn flat icon small @click.native='toggleIsolation(orphanGroup.name)' :color='orphanGroup.isolated ? \"\":\"grey\"'>\n              <v-icon>location_searching</v-icon>\n            </v-btn>\n          </v-flex>\n        </v-layout>\n      </v-card-text>\n    </v-card>\n    <!-- <v-divider></v-divider> -->\n    <v-card class='' v-if='groupKey !== undefined && !isTextProperty && $store.state.legend' xxxv-if=\"$store.state.legend && selectedRange.length !== 0\">\n      <v-card-text v-if='selectedRange'>\n        <h1 class='font-weight-light'>Min: <b>{{selectedRange[0].toLocaleString()}}</b>, Max: <b>{{selectedRange[1].toLocaleString()}}</b></h1>\n      </v-card-text>\n      <v-card-text>\n        <v-layout align-center row wrap>\n          <v-flex xs-12 pa-2 v-if='legend.isNumeric'>\n            <v-range-slider v-model=\"selectedRange\" :max=\"$store.state.legend.max\" :min=\"$store.state.legend.min\" :step=\"0\" @end='filterProp'></v-range-slider>\n          </v-flex>\n          <v-flex xs12 class='caption' v-if='$store.state.legend'>\n            Legend key: <b>{{groupKey}}</b><br> min: <b>{{$store.state.legend.min}}</b>, max: <b>{{$store.state.legend.max}}.</b>\n          </v-flex>\n        </v-layout>\n      </v-card-text>\n    </v-card>\n  </v-flex>\n</v-layout>\n",null]}