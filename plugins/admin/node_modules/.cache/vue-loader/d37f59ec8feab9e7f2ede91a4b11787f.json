{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/StreamOverview.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/views/StreamOverview.vue","mtime":1609071089435},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport StreamDetailTitle from '../components/StreamDetailTitle.vue'\nimport DetailDescription from '../components/DetailDescription.vue'\nimport StreamDetailNetwork from '../components/StreamDetailNetwork.vue'\nimport StreamDetailComments from '../components/StreamDetailComments.vue'\n\nexport default {\n  name: 'StreamDetailView',\n  components: {\n    StreamDetailTitle,\n    DetailDescription,\n    StreamDetailNetwork,\n    StreamDetailComments\n  },\n  computed: {\n    stream( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      return stream\n    },\n    canEdit( ) {\n      if (this.$store.state.user.role == 'admin') return true\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    },\n    streamProjects( ) {\n      return this.$store.state.projects.filter( p => p.streams.indexOf( this.stream.streamId ) !== -1 )\n    }\n  },\n  data( ) {\n    return {\n      error: '',\n      editDescription: false\n    }\n  },\n  methods: {\n    restore( ) {\n      this.$store.dispatch( 'updateStream', { streamId: this.stream.streamId, deleted: false } )\n    },\n  },\n  mounted( ) {\n    let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    if ( !stream ) {\n      this.$store.dispatch( 'getStream', { streamId: this.$route.params.streamId } )\n        .then( res => {\n          this.$store.dispatch( 'getUser', { _id: res.data.resource.owner } )\n          union( res.data.resource.canRead, res.data.resource.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n        } )\n        .catch( err => {\n          if ( err.message.includes( '404' ) ) this.error = `Stream ${this.$route.params.streamId} was not found.`\n          if ( err.message.includes( '401' ) ) this.error = `Stream ${this.$route.params.streamId} is not accessible to you due to its protection level.`\n        } )\n    } else {\n      this.$store.dispatch( 'getUser', { _id: stream.owner } )\n      union( stream.canRead, stream.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n    }\n  }\n}\n\n",{"version":3,"sources":["StreamOverview.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;AAsBA;AACA;;AAEA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"StreamOverview.vue","sourceRoot":"src/views","sourcesContent":["<template>\n  <v-layout row wrap>\n    <v-flex xs12>\n      <detail-description :resource='stream'></detail-description>\n      <stream-detail-network :stream='stream'></stream-detail-network>\n      <v-card class='elevation-0 pt-4'>\n        <v-toolbar dense class='elevation-0 transparent'>\n          <v-icon small left>business</v-icon>&nbsp;\n          <span class='title font-weight-light'>Projects</span>\n        </v-toolbar>\n        <v-divider></v-divider>\n        <v-card-text>\n          <v-chip v-for='(proj, index) in streamProjects' :key='proj._id' class='md-primary' md-clickable>\n            <router-link :to='\"/projects/\"+proj._id'>{{proj.name}}</router-link>&nbsp;\n          </v-chip></span>\n          <p v-if='streamProjects.length===0'>This stream is not part of any projects.</p>\n        </v-card-text>\n      </v-card>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\nimport union from 'lodash.union'\n\nimport StreamDetailTitle from '../components/StreamDetailTitle.vue'\nimport DetailDescription from '../components/DetailDescription.vue'\nimport StreamDetailNetwork from '../components/StreamDetailNetwork.vue'\nimport StreamDetailComments from '../components/StreamDetailComments.vue'\n\nexport default {\n  name: 'StreamDetailView',\n  components: {\n    StreamDetailTitle,\n    DetailDescription,\n    StreamDetailNetwork,\n    StreamDetailComments\n  },\n  computed: {\n    stream( ) {\n      let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n      return stream\n    },\n    canEdit( ) {\n      if (this.$store.state.user.role == 'admin') return true\n      return this.isOwner ? true : this.stream.canWrite.indexOf( this.$store.state.user._id ) !== -1\n    },\n    isOwner( ) {\n      return this.stream.owner === this.$store.state.user._id\n    },\n    streamProjects( ) {\n      return this.$store.state.projects.filter( p => p.streams.indexOf( this.stream.streamId ) !== -1 )\n    }\n  },\n  data( ) {\n    return {\n      error: '',\n      editDescription: false\n    }\n  },\n  methods: {\n    restore( ) {\n      this.$store.dispatch( 'updateStream', { streamId: this.stream.streamId, deleted: false } )\n    },\n  },\n  mounted( ) {\n    let stream = this.$store.state.streams.find( s => s.streamId === this.$route.params.streamId )\n    if ( !stream ) {\n      this.$store.dispatch( 'getStream', { streamId: this.$route.params.streamId } )\n        .then( res => {\n          this.$store.dispatch( 'getUser', { _id: res.data.resource.owner } )\n          union( res.data.resource.canRead, res.data.resource.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n        } )\n        .catch( err => {\n          if ( err.message.includes( '404' ) ) this.error = `Stream ${this.$route.params.streamId} was not found.`\n          if ( err.message.includes( '401' ) ) this.error = `Stream ${this.$route.params.streamId} is not accessible to you due to its protection level.`\n        } )\n    } else {\n      this.$store.dispatch( 'getUser', { _id: stream.owner } )\n      union( stream.canRead, stream.canWrite ).forEach( _id => this.$store.dispatch( 'getUser', { _id: _id } ) )\n    }\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}