{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/SearchEverything.vue?vue&type=script&lang=js&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/SearchEverything.vue","mtime":1609071089413},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/babel-loader/lib/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n//\n\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'SearchEverything',\n  props: {},\n  watch: {\n    filterText( val ) {\n      // if ( val === '' || val === null ) {\n      //   this.isLoading = false\n      //   return\n      // }\n      this.isLoading = true\n    }\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === false )\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( stream => stream.parent === null && stream.deleted === false ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    filteredStreams( ) {\n      // if ( !this.actualSearchFilter || this.actualSearchFilter === '' ) return [ ]\n      // return this.streams.filter( stream => stream.name ? stream.name.toLowerCase( ).includes( this.actualSearchFilter.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n      return this.$store.getters.filteredResources( this.filters, \"streams\" )\n    },\n    filteredProjects( ) {\n      // if ( !this.actualSearchFilter || this.actualSearchFilter === '' ) return [ ]\n      // return this.projects.filter( r => r.name ? r.name.toLowerCase( ).includes( this.actualSearchFilter.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n      return this.$store.getters.filteredResources( this.filters, \"projects\" )\n    },\n  },\n  data( ) {\n    return {\n      filterText: '',\n      isLoading: false,\n      filters: [ ]\n    }\n  },\n  methods: {\n    updateSearch: debounce( function ( e ) {\n\n      this.isLoading = false\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n        console.log( this.filters )\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n    refreshResources( ) {\n      this.$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\n      this.$store.dispatch( 'getProjects' )\n    }\n  }\n}\n\n",{"version":3,"sources":["SearchEverything.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAgDA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"SearchEverything.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout row wrap class='mb-5' justify-left>\n    <v-flex xs12>\n      <v-text-field solo clearable @input=\"updateSearch\" label=\"Search for a stream or project\" prepend-inner-icon=\"search\" @click:append=\"refreshResources()\" append-icon=\"refresh\" spellcheck=\"false\" v-model='filterText' :loading='isLoading'></v-text-field>\n    </v-flex>\n    <v-flex xs12 v-if='filterText' style='position: relative; top: -30px'>\n      <v-card class='xxxtransparent elevation-10'>\n        <v-layout row wrap>\n          <v-flex xs12 md6 pa-3>\n            <div class='title font-weight-light mb-3 pl-3'>Streams ({{filteredStreams.length}})</div>\n            <v-list two-line v-if='filteredStreams.length > 0' style='max-height: 210px; overflow-y: auto; overflow-x: hidden;'>\n              <v-list-tile v-for='stream in filteredStreams' :key='stream.streamId' :to='`/streams/${stream.streamId}`'>\n                <v-list-tile-content>\n                  <v-list-tile-title>\n                    {{stream.name}}\n                  </v-list-tile-title>\n                  <v-list-tile-sub-title class='caption'>\n                    <v-icon small>fingerprint</v-icon><span class='caption' style=\"user-select:all;\">{{stream.streamId}}</span>&nbsp;<v-icon small>edit</v-icon>\n                    <timeago :datetime='stream.updatedAt'></timeago>\n                  </v-list-tile-sub-title>\n                </v-list-tile-content>\n              </v-list-tile>\n            </v-list>\n            <span class='caption pl-3' v-else>No streams with that name found.</span>\n          </v-flex>\n          <v-flex xs12 md6 pa-3>\n            <div class='title font-weight-light mb-3 pl-3'>Projects ({{filteredProjects.length}})</div>\n            <v-list two-line v-if='filteredProjects.length > 0' style='max-height: 210px; overflow-y: auto; overflow-x: hidden;'>\n              <v-list-tile v-for='project in filteredProjects' :key='project._id' :to='`/projects/${project._id}`'>\n                <v-list-tile-content>\n                  <v-list-tile-title>\n                    {{project.name}}\n                  </v-list-tile-title>\n                  <v-list-tile-sub-title class='caption'>\n                    <v-icon small>fingerprint</v-icon><span class='caption' style=\"user-select:all;\">{{project._id}}</span>&nbsp;<v-icon small>edit</v-icon>\n                    <timeago :datetime='project.updatedAt'></timeago>\n                  </v-list-tile-sub-title>\n                </v-list-tile-content>\n              </v-list-tile>\n            </v-list>\n            <span class='caption pl-3' v-else>No projects with that name found.</span>\n          </v-flex>\n        </v-layout>\n      </v-card>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'SearchEverything',\n  props: {},\n  watch: {\n    filterText( val ) {\n      // if ( val === '' || val === null ) {\n      //   this.isLoading = false\n      //   return\n      // }\n      this.isLoading = true\n    }\n  },\n  computed: {\n    projects( ) {\n      return this.$store.state.projects.filter( p => p.deleted === false )\n    },\n    streams( ) {\n      return this.$store.state.streams.filter( stream => stream.parent === null && stream.deleted === false ).sort( ( a, b ) => {\n        return new Date( b.updatedAt ) - new Date( a.updatedAt );\n      } )\n    },\n    filteredStreams( ) {\n      // if ( !this.actualSearchFilter || this.actualSearchFilter === '' ) return [ ]\n      // return this.streams.filter( stream => stream.name ? stream.name.toLowerCase( ).includes( this.actualSearchFilter.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n      return this.$store.getters.filteredResources( this.filters, \"streams\" )\n    },\n    filteredProjects( ) {\n      // if ( !this.actualSearchFilter || this.actualSearchFilter === '' ) return [ ]\n      // return this.projects.filter( r => r.name ? r.name.toLowerCase( ).includes( this.actualSearchFilter.toLowerCase( ) ) : true ).sort( ( a, b ) => a.updatedAt > b.updatedAt )\n      return this.$store.getters.filteredResources( this.filters, \"projects\" )\n    },\n  },\n  data( ) {\n    return {\n      filterText: '',\n      isLoading: false,\n      filters: [ ]\n    }\n  },\n  methods: {\n    updateSearch: debounce( function ( e ) {\n\n      this.isLoading = false\n      this.searchfilter = e\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n        console.log( this.filters )\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n    refreshResources( ) {\n      this.$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\n      this.$store.dispatch( 'getProjects' )\n    }\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n</style>\n"]}]}