{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamSearch.vue?vue&type=style&index=0&id=324b14ee&scoped=true&lang=scss&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/StreamSearch.vue","mtime":1609071089416},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.hovered {\n  cursor: pointer;\n}\n\n",{"version":3,"sources":["StreamSearch.vue"],"names":[],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAqHA;AACA;AACA","file":"StreamSearch.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-layout align-center row wrap @mouseleave='mouseLeave'>\n    <v-flex xs12 class='pb-0'>\n      <v-text-field ref=\"searchField\" autofocus box flat clearable prepend-inner-icon=\"search\" label='search for streams' @input=\"updateSearch\" v-model='searchfilter' spellcheck=\"false\" :disabled='globalDisabled' :loading='searchInProgress' append-icon=\"refresh\" @click:append=\"$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\"></v-text-field>\n    </v-flex>\n    <v-flex xs12 v-if='showSearchResults' style='margin-top:-30px' class='mb-5'>\n      <v-card class='elevation-10'>\n        <v-card-title class='subheading'>Search results ({{paginatedStreams.length}} streams)</v-card-title>\n        <v-divider></v-divider>\n        <v-card-text style='max-height: 410px; overflow-y: auto; overflow-x: hidden;' v-if='paginatedStreams.length>0'>\n          <v-list two-line v-if='filters.length > 0'>\n            <v-list-tile v-for='stream in paginatedStreams' :key='stream.streamId'>\n              <v-list-tile-content>\n                <v-list-tile-title>\n                  {{stream.name}}\n                </v-list-tile-title>\n                <v-list-tile-sub-title class='caption'>\n                  <v-icon small>fingerprint</v-icon><span class='caption' style=\"user-select:all;\">{{stream.streamId}}</span>&nbsp;<v-icon small>edit</v-icon>\n                  <timeago :datetime='stream.updatedAt'></timeago>\n                </v-list-tile-sub-title>\n              </v-list-tile-content>\n              <v-list-tile-action>\n                <v-btn fab small depressed @click.native='selectStream(stream.streamId)'>\n                  <v-icon>add</v-icon>\n                </v-btn>\n              </v-list-tile-action>\n            </v-list-tile>\n          </v-list>\n        </v-card-text>\n      </v-card>\n    </v-flex>\n  </v-layout>\n</template>\n<script>\nimport debounce from 'lodash.debounce'\n\nexport default {\n  name: 'StreamSearch',\n  props: {\n    streamsToOmit: {\n      type: Array,\n      default ( ) { return [ ] }\n    },\n    globalDisabled: {\n      type: Boolean,\n      default: false\n    },\n    writeOnly: Boolean\n  },\n  computed: {\n    filteredStreams( ) {\n      return this.$store.getters.filteredResources( this.filters, \"streams\" ).filter( s => this.streamsToOmit.indexOf( s.streamId ) === -1 )\n    },\n    paginatedStreams( ) {\n      let toReturn = this.filteredStreams.slice( this.startIndex, this.endIndex )\n      if ( this.writeOnly )\n        toReturn = toReturn.filter( s => s.owner === this.$store.state.user._id || s.canWrite.indexOf( this.$store.state.user._id ) > -1 )\n      return toReturn\n    }\n  },\n  watch: {\n    searchfilter( val ) {\n      if ( val === '' || val === null ) {\n        this.showSearchResults = false\n        this.searchInProgress = false\n      } else\n        this.searchInProgress = true\n    }\n  },\n  data( ) {\n    return {\n      searchfilter: '',\n      filters: [ ],\n      showSearchResults: false,\n      searchInProgress: false,\n      startIndex: 0,\n      endIndex: 42\n    }\n  },\n  methods: {\n    mouseLeave() {\n      this.$refs.searchField.blur()\n    },\n    refreshStreams( ) {\n      this.$store.dispatch( 'getStreams', 'omit=objects,layers&isComputedResult=false&sort=updatedAt' )\n    },\n    selectStream( streamId ) {\n      this.$emit( 'selected-stream', streamId )\n    },\n    updateSearch: debounce( function( e ) {\n      this.searchfilter = e\n\n      if ( e === '' || e === null ) {\n        this.showSearchResults = false\n        return\n      }\n      this.showSearchResults = true\n      this.searchInProgress = false\n      try {\n        let filters = this.searchfilter.split( ' ' ).map( t => {\n          if ( t.includes( ':' ) )\n            return { key: t.split( ':' )[ 0 ], value: t.split( ':' )[ 1 ] }\n          else if ( !t.includes( 'public' ) && !t.includes( 'private' ) && !t.includes( 'mine' ) && !t.includes( 'shared' ) ) // TODO: not elegant\n            return { key: 'name', value: t }\n          else\n            return { key: t, value: null }\n        } )\n        this.filters = filters\n      } catch {\n        this.filters = [ { key: 'name', value: e } ]\n      }\n    }, 1000 ),\n  }\n}\n\n</script>\n<style scoped lang='scss'>\n.hovered {\n  cursor: pointer;\n}\n\n</style>\n"]}]}