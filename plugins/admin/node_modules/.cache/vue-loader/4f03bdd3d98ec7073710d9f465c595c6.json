{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ClientGraph.vue?vue&type=style&index=0&lang=scss&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ClientGraph.vue","mtime":1609071089406},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/sass-loader/lib/loader.js","mtime":1533139052000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n#appClientGraph {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  margin-top: 30px;\n}\n.vue-slider-piecewise {\n  z-index: 100 !important;\n  pointer-events: none;\n}\n\n.vue-slider-piecewise-item {\n  z-index: 100 !important;\n}\n\n.custom-switch .v-input--selection-controls__input div {\n  color: #f06292;\n}\n// .v-list--dense {\n//   background: transparent !important;\n// }\n\n// .v-select-list {\n//   background: transparent !important;\n// }\n\n// .transparent {\n//    background-color: white!important;\n//    opacity: 0.65;\n//    border-color: transparent!important;\n//  }\n\n",{"version":3,"sources":["ClientGraph.vue"],"names":[],"mappingskqBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA","file":"ClientGraph.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <v-card class=\"elevation-0\">\n    <v-card-title class='title font-weight-light'>\n      <div align=\"center\">\n      <v-icon small left>import_export</v-icon>&nbsp;\n      <b>SpeckleViz&trade;</b>&nbsp;\n      <v-btn class=\"ml-6\" round href=\"https://speckle.systems/docs/web/speckleviz/\" target=\"_blank\">\n        <v-icon left>help_outline</v-icon>\n        need help? read the docs\n        <v-icon right>arrow_right_alt</v-icon>\n      </v-btn>\n      </div>\n  \n    </v-card-title>\n    <v-container fluid>\n      <v-layout>\n        <v-toolbar>\n          <v-switch class=\"custom-switch\" v-model=\"switchForce\" color=\"blue lighten-2\" hide-details>\n            <template v-slot:label>\n              <v-chip outline>\n                Data flow per&nbsp;\n                <v-icon v-if=\"switchForce\">supervised_user_circle</v-icon>\n                <v-icon v-if=\"!switchForce\">folder</v-icon>\n              </v-chip>\n            </template>\n          </v-switch>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"refresh()\" v-on=\"on\">\n                <v-icon>refresh</v-icon>\n              </v-btn>\n            </template>\n            <span>Refresh</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"saveAsPNG()\" v-on=\"on\">\n                <v-icon>save_alt</v-icon>\n              </v-btn>\n            </template>\n            <span>Save as PNG</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"toggleFix = !toggleFix\" v-on=\"on\" v-model=\"toggleFix\">\n                <v-icon v-if=\"!toggleFix\">center_focus_weak</v-icon>\n                <v-icon v-if=\"toggleFix\">filter_center_focus</v-icon>\n              </v-btn>\n            </template>\n            <span>Fix/Release the graph</span>\n          </v-tooltip>\n          <v-tooltip bottom>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn icon @click=\"refocus()\" v-on=\"on\">\n                <v-icon>gps_fixed</v-icon>\n              </v-btn>\n            </template>\n            <span>Recenter focus</span>\n          </v-tooltip>\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn small v-on=\"on\">Edges Display</v-btn>\n            </template>\n            <v-list>\n              <v-list-tile\n                v-for=\"(item, index) in edgesdisplay\"\n                :key=\"index\"\n                @click=\"selectedEdgesDisplay = item.title\"\n              >\n                <v-list-tile-title>\n                  <b v-if=\"item.title==selectedEdgesDisplay\">{{item.title}}</b>\n                  <span v-else class=\"font-weight-light\">{{item.title}}</span>\n                </v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          <v-menu offset-y>\n            <template v-slot:activator=\"{ on }\">\n              <v-btn small v-on=\"on\">Graph Layout</v-btn>\n            </template>\n            <v-list>\n              <v-list-tile\n                v-for=\"(item, index) in graphlayout\"\n                :key=\"index\"\n                @click=\"selectedGraphLayout = item.title; refresh()\"\n              >\n                <v-list-tile-title>\n                  <b v-if=\"item.title==selectedGraphLayout\">{{item.title}}</b>\n                  <span v-else class=\"font-weight-light\">{{item.title}}</span>\n                </v-list-tile-title>\n              </v-list-tile>\n            </v-list>\n          </v-menu>\n          <v-slider\n            v-model=\"documentLinksForce\"\n            always-dirty\n            :thumb-size=\"24\"\n            color=\"grey darken-1\"\n            append-icon=\"zoom_out_map\"\n            prepend-icon=\"group_work\"\n            @click:append=\"expandDocuments\"\n            @click:prepend=\"collapseDocuments\"\n            :max=\"300\"\n            :min=\"-50\"\n            hide-details\n            label\n          ></v-slider>\n        </v-toolbar>\n      </v-layout>\n      <v-divider class=\"ml-2\" vertical></v-divider>\n      <br />\n      <br />\n      <vue-slider\n        ref=\"timeSlider\"\n        :data=\"dates\"\n        v-model=\"sliderValue\"\n        process-dragable\n        :piecewise-label=\"dates.length < 5 ? true : false\"\n        xxxwidth=\"100%\"\n        xxxstyle=\"margin-left:10%\"\n        :tooltipStyle=\"{ 'font-size':'11px' }\"\n        v-if=\"dates.length>0\"\n      ></vue-slider>\n      <span\n        class=\"font-weight-light caption\"\n      >Drag this slider to select and highlight a specific timeframe from your project!</span>\n      <v-tooltip bottom>\n        <template v-slot:activator=\"{ on }\">\n          <v-btn icon @click=\"inspectTimeframe = !inspectTimeframe\" v-on=\"on\">\n            <v-badge top>\n              <span slot=\"badge\" v-if=\"streamsInTimeFrame.length\">{{streamsInTimeFrame.length}}</span>\n              <v-icon>360</v-icon>\n            </v-badge>\n          </v-btn>\n        </template>\n        <span>Inspect the timeframe</span>\n      </v-tooltip>\n      <v-autocomplete\n        v-model=\"allStreamTagsJSON_default\"\n        :items=\"allStreamTagsJSON\"\n        filled\n        chips\n        label=\"Select streams by tag(s)\"\n        item-text=\"name\"\n        item-value=\"name\"\n        multiple\n        prepend-icon=\"search\"\n        dense\n        item-color=\"black\"\n      >\n        <template v-slot:selection=\"data\">\n          <v-chip\n            outline\n            :selected=\"data.selected\"\n            close\n            class=\"chip--select-multi\"\n            @input=\"remove(data.item)\"\n          >{{ data.item.name }}</v-chip>\n        </template>\n        <template v-slot:item=\"data\">\n          <template v-if=\"typeof data.item !== 'object'\">\n            <v-list-tile-content v-text=\"data.item.name\"></v-list-tile-content>\n          </template>\n          <template v-else>\n            <v-list-tile-content>\n              <v-list-tile-title v-html=\"data.item.name\"></v-list-tile-title>\n            </v-list-tile-content>\n          </template>\n        </template>\n        <template v-slot:append-outer>\n          <v-slide-x-reverse-transition mode=\"out-in\">\n            <v-tooltip bottom>\n              <template v-slot:activator=\"{ on }\">\n                <v-btn icon @click=\"inspectSelectedTags = !inspectSelectedTags\" v-on=\"on\">\n                  <v-badge top color=\"cyan\">\n                    <span slot=\"badge\" v-if=\"taggedStreams.length\">{{taggedStreams.length}}</span>\n                    <v-icon>360</v-icon>\n                  </v-badge>\n                </v-btn>\n              </template>\n              <span>Inspect the tagged streams</span>\n            </v-tooltip>\n          </v-slide-x-reverse-transition>\n        </template>\n      </v-autocomplete>\n      \n    </v-container>\n    <!-- END OF TOOLBAR / SVG CANVAS STARTS HERE -->\n    <div id=\"appClientGraph\">\n      <svg v-if=\"!redrawToggle || !result\" width=\"100%\" :height=\"svgHeight\" />\n      <ForceDirectedLayout\n        v-if=\"result && redrawToggle\"\n        :svgHeight=\"svgHeight\"\n        :showDocGroups=\"toggle_multiple\"\n        :clientdata=\"result\"\n        :clientdatafilter=\"filteredResult\"\n        :timeFilter=\"filteredTime\"\n        :toggleFix=\"toggleFix\"\n        :documentLinksForce=\"documentLinksForce\"\n        :switchForce=\"switchForce\"\n        :linearcs=\"linearcs\"\n        :brush=\"brush\"\n        :inspectTimeframe=\"inspectTimeframe\"\n        :inspectSelectedTags=\"inspectSelectedTags\"\n        :streamTags=\"allStreamTagsJSON_default\"\n        :refocus=\"focus\"\n        :selectedEdgesDisplay=\"selectedEdgesDisplay\"\n        :selectedGraphLayout=\"selectedGraphLayout\"\n        @triggeredTimeFrame=\"triggeredTimeFrame\"\n        @triggeredTags=\"triggeredTags\"\n        :parcoords_selstreams=\"parcoords_selstreams\"\n      />\n    </div>\n  </v-card>\n</template>\n\n\n<script>\nimport ForceDirectedLayout from \"./ForceDirectedLayout.vue\"\nimport VueSlider from \"vue-slider-component\"\nimport axios from \"axios\"\nimport Vue from \"vue\"\nimport AsyncComputed from \"vue-async-computed\"\nimport svgtopng from \"save-svg-as-png\"\nimport ParCoords from 'parcoord-es'\n\nVue.use(AsyncComputed)\n\nexport default {\n  name: \"ClientGraph\",\n  components: {\n    ForceDirectedLayout,\n    VueSlider\n  },\n  props: {\n    project: Object\n  },\n  data: () => ({\n    edgesdisplay: [\n      { title: \"Line\" },\n      { title: \"Arc\" },\n      { title: \"Diagonal Horizontal\" },\n      { title: \"Diagonal Vertical\" },\n      { title: \"Diagonal Smart\" }\n    ],\n\n    graphlayout: [\n      { title: \"Free\" },\n      { title: \"Horizontal\" },\n      { title: \"Vertical\" }\n    ],\n\n    friends: null,\n    dialog: false,\n    brush: true,\n    switchForce: false,\n    documentLinksForce: -50,\n    toggleFix: false,\n    dates: [],\n    sliderValue: [],\n    linearcs: false,\n    showDocGroups: true,\n    redrawToggle: true,\n    result: null,\n    inspectTimeframe: true,\n    inspectSelectedTags: true,\n    sortedNodesByCreationDate: null,\n    svgHeight: 700,\n    filteredResult: null,\n    filteredTime: null,\n    dateMinMax: [],\n    allStreamTags: [],\n    allStreamTagsJSON: [],\n    allStreamTagsJSON_default: [],\n    isUpdating: false,\n    streamsInTimeFrame: [],\n    taggedStreams: [],\n    focus: false,\n    selectedEdgesDisplay: \"Diagonal Horizontal\",\n    selectedGraphLayout: \"Horizontal\",\n    parcoords: null,\n    all_userInfo: [],\n    all_userCode: [],\n    all_streamTags: [],\n    all_streamCreatedAt: [],\n    all_streamUpdatedAt: [],\n    parcoords_rawData: [],\n    parcoords_permut_data: [],\n    parcoords_selstreams: [],\n    parcoords_nodupdata: []\n  }),\n  computed: {\n    toggle_multiple: function() {\n      if (this.switchForce) {\n        return [2]\n      }\n      if (!this.switchForce) {\n        return [1]\n      } else {\n        return [1, 2]\n      }\n    }\n  },\n\n  watch: {\n    selectedGraphLayout: function() {\n      if (this.selectedGraphLayout == \"Free\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Smart\"\n      }\n      if (this.selectedGraphLayout == \"Horizontal\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Horizontal\"\n      }\n      if (this.selectedGraphLayout == \"Vertical\") {\n        this.$data.selectedEdgesDisplay = \"Diagonal Vertical\"\n      }\n    },\n    sliderValue: function() {\n      \n      this.filteredTime = this.sliderValue.map(d => new Date(d).toISOString())\n    },\n\n    isUpdating(val) {\n      if (val) {\n        setTimeout(() => (this.isUpdating = false), 3000)\n      }\n    }\n  },\n\n  methods: {\n    redrawParcoords(){\n      this.$data.parcoords_selstreams = []\n      let context = this\n      let parcoords = ParCoords()(\"#example\")\n          .data(\n          context.$data.parcoords_nodupdata\n          )\n          .render()\n          .createAxes()\n          .reorderable()\n          .brushMode(\"1D-axes-multi\")\n          parcoords.on('brushend', function(brushed, args){\n          context.$data.parcoords_selstreams = Array.from(new Set(brushed.map(e => e.stream_id)))\n      })\n    },\n    triggeredTimeFrame(val) {\n      this.streamsInTimeFrame = val \n    },\n    triggeredTags(val) {\n      this.taggedStreams = val \n    },\n\n    remove(item) {\n      const index = this.allStreamTagsJSON_default.indexOf(item.name) \n      if (index >= 0) this.allStreamTagsJSON_default.splice(index, 1) \n    },\n\n    flatten(arr) {\n      let flat = [] \n      for (let i = 0; i < arr.length; i++) {\n        flat = flat.concat(arr[i])\n      }\n      return flat\n    },\n    collapseDocuments() {\n      this.documentLinksForce = this.documentLinksForce - 10 \n    },\n    expandDocuments() {\n      this.documentLinksForce = this.documentLinksForce + 10 \n    },\n    getMin() {\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n      return createdAts[this.value3[0]] \n    },\n    getMax() {\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n      return createdAts[this.value3[1]] \n    },\n    mounted() {\n\n      \n\n    },\n    saveAsPNG() {\n      svgtopng.saveSvgAsPng(\n        document.getElementById(\"graphLayout\"),\n        \"diagram.png\",\n        { scale: 3 }\n      ) \n    },\n    refocus() {\n      this.$data.focus = !this.$data.focus \n    },\n    refresh() {\n      this.$asyncComputed.myResolvedValue.update() \n      this.$data.redrawToggle = false \n      setTimeout(() => {\n        this.$data.redrawToggle = true \n      }, 500) \n    },\n    AddResizeListener() {\n      //redraw the chart 300ms after the window has been resized\n      let context = this\n      window.addEventListener(\"resize\", () => {\n        this.$data.redrawToggle = false \n          \n\n        setTimeout(() => {\n          this.$data.redrawToggle = true \n        }, 1500) \n        \n      }) \n    }\n  },\n  updated() {\n    // this.redrawParcoords()\n    this.AddResizeListener()\n  },\n  asyncComputed: {\n    async myResolvedValue() {\n      this.toggleFix = false \n      let streamLinks = [] \n      let nodes = [] \n\n      let resProject \n      try {\n        resProject = await axios.get(\n          `${this.$store.state.server}/projects/${this.project._id}`\n        ) \n      } catch (err) {\n        console.log(err) \n        return \n      }\n      \n      let allusersSet = new Set([resProject.data.resource.owner, resProject.data.resource.canRead, resProject.data.resource.canWrite])\n      let allusers = [...allusersSet].flat()\n      allusers = [...new Set(allusers)]\n      //this.$data.all_userInfo = allusers\n      \n      \n      for (let i = 0; i < allusers.length; i++) {   \n          let user = allusers[i]\n          let resOwner\n          try {\n            resOwner = await axios.get(\n              `${this.$store.state.server}/accounts/${user}`\n            )\n          }catch (error) {\n            console.log(\"Can't access user info\") \n          }\n          let userInfo = resOwner.data.resource \n          //console.log(userInfo)\n\n          let userCode = `${userInfo.name} ${userInfo.surname} @ ${userInfo.company}`\n          this.$data.all_userCode.push(userCode)\n          this.$data.all_userInfo.push(userInfo)\n      }\n\n      let projectStreams = resProject.data.resource.streams \n      let projectPermissions = resProject.data.resource.permissions \n\n      let alltags = [] \n      for (let i = 0; i < projectStreams.length; i++) {\n        let streamShortID = projectStreams[i] \n        let stream_id \n        let resStream \n\n        try {\n          resStream = await axios.get(\n            `${this.$store.state.server}/streams/${streamShortID}`\n          ) \n\n\n          let streamOwnerID = resStream.data.resource.owner \n          let resOwner\n          try {\n            resOwner = await axios.get(\n              `${this.$store.state.server}/accounts/${streamOwnerID}`\n            )\n          }catch (error) {\n            console.log(\"Can't access user info\") \n          }\n          let userInfo = resOwner.data.resource\n\n\n          stream_id = resStream.data.resource._id\n          let streamCanRead = resStream.data.resource.canRead\n          let streamCanWrite = resStream.data.resource.canWrite\n          let streamCreatedAt = resStream.data.resource.createdAt\n          let streamUpdatedAt = resStream.data.resource.updatedAt\n          let streamName = resStream.data.resource.name\n          let streamTags = resStream.data.resource.tags\n          let objectsNumber = resStream.data.resource.objects.length\n          let units = resStream.data.resource.baseProperties.units\n          let tolerance = resStream.data.resource.baseProperties.tolerance\n          \n\n          let rawData = {stream_id: stream_id, canRead: streamCanRead, canWrite: streamCanWrite, tags: streamTags, objNum: objectsNumber, owner: streamOwnerID, createdAt: new Date(streamCreatedAt).toLocaleString(\"en-GB\"), updatedAt: new Date(streamUpdatedAt).toLocaleString(\"en-GB\"), units: units, tol: tolerance}\n\n          // handles empty array exception\n          Object.keys(rawData).forEach((key,i) => \n            {if(Array.isArray(rawData[key]) && (rawData[key].length < 1)){\n              rawData[key] = [\"undefined\"]\n            }\n          })\n\n          this.$data.parcoords_rawData.push(rawData)\n\n          for (let j = 0; j < streamTags.length; j++) {\n            this.$data.allStreamTagsJSON.push({ name: streamTags[j] })\n          }\n          alltags.push(streamTags) \n\n          nodes.push({\n            type: \"Stream\",\n            _id: stream_id,\n            streamId: streamShortID,\n            owner: streamOwnerID,\n            createdAt: streamCreatedAt,\n            updatedAt: streamUpdatedAt,\n            size: \"10\",\n            objectsNumber: objectsNumber,\n            name: `${streamName}`,\n            tags: streamTags,\n            canRead: streamCanRead,\n            canWrite: streamCanWrite,\n            units: units,\n            tolerance: tolerance\n          }) \n        } catch (error) {\n          console.log(\"Can't access stream: \" + streamShortID)\n        }\n\n        //\n        let resClient \n        try {\n          resClient = await axios.get(\n            `${this.$store.state.server}/streams/${streamShortID}/clients`\n          )\n\n          for (let j = 0; j < resClient.data.resources.length; j++) {\n            let client_id = resClient.data.resources[j]._id \n            let clientOwnerID = resClient.data.resources[j].owner \n            \n            let resOwner\n            try {\n              resOwner = await axios.get(\n                `${this.$store.state.server}/accounts/${clientOwnerID}`\n              )\n            }catch (error) {\n              console.log(\"Can't access user info\") \n            }\n\n            \n            let userInfo = resOwner.data.resource\n            let clientCanRead = resClient.data.resources[j].canRead \n            let clientCreatedAt = resClient.data.resources[j].createdAt \n            let clientUpdatedAt = resClient.data.resources[j].updatedAt \n            let clientRole = resClient.data.resources[j].role \n            let clientDocumentType = resClient.data.resources[j].documentType \n            let clientDocumentName = resClient.data.resources[j].documentName \n            let clientDocumentID = resClient.data.resources[j].documentGuid \n            let customName = `` \n\n            if (clientRole == \"Sender\" || clientRole == \"sender\") {\n              customName = `🚀` \n            }\n            if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n              customName = `📡` \n            }\n\n            nodes.push({\n              type: \"Client\",\n              _id: client_id,\n              owner: clientOwnerID,\n              userInfo: userInfo,\n              createdAt: clientCreatedAt,\n              updatedAt: clientUpdatedAt,\n              role: clientRole,\n              size: \"10\",\n              documentType: clientDocumentType,\n              documentName: clientDocumentName,\n              documentGuid: clientDocumentID,\n              name: customName // S or R labels for Senders and Receivers\n            }) \n            \n\n            if (clientRole == \"Receiver\" || clientRole == \"receiver\") {\n              streamLinks.push({\n                source: stream_id,\n                target: client_id,\n\n                targetClient: client_id,\n                targetDoc: clientDocumentID,\n                action: \"receiving\"\n              }) \n            } else if (clientRole == \"Sender\" || clientRole == \"sender\") {\n              streamLinks.push({\n                source: client_id,\n                target: stream_id,\n\n                sourceClient: client_id,\n                sourceDoc: clientDocumentID,\n                action: \"sending\"\n              }) \n            }\n          }\n        } catch (error) {\n          console.log(\"Can't access stream's client from \" + streamShortID) \n        }\n      }\n\n\n      this.allStreamTags = this.flatten(alltags) \n      this.sortedNodesByCreationDate = nodes \n      this.sortedNodesByCreationDate.sort(function(a, b) {\n        return a.createdAt < b.createdAt\n          ? -1\n          : a.createdAt > b.createdAt\n          ? 1\n          : 0 \n      }) \n\n      let createdAts = this.sortedNodesByCreationDate.map(d => d.createdAt) \n\n      this.result = [nodes, streamLinks] \n      //this.value3 = [0,this.result[0].length-1]\n      this.dates = createdAts \n      this.dates = createdAts.map(d => new Date(d).toLocaleString(\"en\")) \n      this.dates = [...new Set(this.dates)]\n\n      \n      this.sliderValue = [this.dates[0], this.dates[this.dates.length - 1]] \n\n\n      // find all permutations\n      for (let i = 0; i < this.$data.parcoords_rawData.length; i++) {\n        for(let j = 0; j < this.$data.parcoords_rawData[i].canRead.length; j++){\n          for(let k = 0; k < this.$data.parcoords_rawData[i].canWrite.length; k++){\n            for(let l = 0; l < this.$data.parcoords_rawData[i].tags.length; l++){\n              let index_canRead = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].canRead[j]) \n              let index_canWrite = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].canWrite[k]) \n              let index_owner = this.$data.all_userInfo.map(e => e._id).indexOf(this.$data.parcoords_rawData[i].owner) \n              if(index_canRead == \"-1\" || index_canWrite == \"-1\"){\n                  // HANDLE CASE IF MORE USER PERMISSIONS IN STREAMS\n              }else{\n                let parcoord_permut = {stream_id: this.$data.parcoords_rawData[i].stream_id, canRead: this.$data.all_userCode[index_canRead].split('@')[0], canWrite: this.$data.all_userCode[index_canWrite].split('@')[0], tags: this.$data.parcoords_rawData[i].tags[l], objNum: this.$data.parcoords_rawData[i].objNum, owner: this.$data.all_userCode[index_owner], \"owner's company\": this.$data.all_userInfo[index_owner].company, createdAt: this.$data.parcoords_rawData[i].createdAt, updatedAt: this.$data.parcoords_rawData[i].updatedAt, units: this.$data.parcoords_rawData[i].units, tol: this.$data.parcoords_rawData[i].tol} \n                this.$data.parcoords_permut_data.push(parcoord_permut) \n              }\n            }\n          }\n        }\n      }\n      \n      this.$data.parcoords_nodupdata = Array.from(new Set(this.$data.parcoords_permut_data))\n\n      let context = this\n      let parcoords = ParCoords()(\"#example\")\n          .data(\n          context.$data.parcoords_nodupdata\n          )\n          .render()\n          .createAxes()\n          .reorderable()\n          .brushMode(\"1D-axes-multi\")\n          parcoords.on('brushend', function(brushed, args){\n          context.$data.parcoords_selstreams = Array.from(new Set(brushed.map(e => e.stream_id)))\n      })\n      return [nodes, streamLinks] \n    }\n  }\n} \n</script>\n\n<style lang='scss'>\n#appClientGraph {\n  -webkit-font-smoothing: antialiased;\n  -moz-osx-font-smoothing: grayscale;\n  text-align: center;\n  margin-top: 30px;\n}\n.vue-slider-piecewise {\n  z-index: 100 !important;\n  pointer-events: none;\n}\n\n.vue-slider-piecewise-item {\n  z-index: 100 !important;\n}\n\n.custom-switch .v-input--selection-controls__input div {\n  color: #f06292;\n}\n// .v-list--dense {\n//   background: transparent !important;\n// }\n\n// .v-select-list {\n//   background: transparent !important;\n// }\n\n// .transparent {\n//    background-color: white!important;\n//    opacity: 0.65;\n//    border-color: transparent!important;\n//  }\n\n</style>\n"]}]}