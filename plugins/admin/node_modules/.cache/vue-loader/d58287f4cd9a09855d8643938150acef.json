{"remainingRequest":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js??vue-loader-options!/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ForceDirectedLayout.vue?vue&type=style&index=0&lang=css&","dependencies":[{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/src/components/ForceDirectedLayout.vue","mtime":1609071089408},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/css-loader/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/loaders/stylePostLoader.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/postcss-loader/src/index.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/cache-loader/dist/cjs.js","mtime":499162500000},{"path":"/Users/donnykurnia/data/Projects/upwork/3dbyggeri/glasshouse/SpeckleServer/plugins/admin/node_modules/vue-loader/lib/index.js","mtime":499162500000}],"contextDependencies":[],"result":["\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n\n.bar-positive {\n  fill: steelblue;\n  transition: r 0.2s ease-in-out;\n}\n\n.svg-container {\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  padding-bottom: 1%;\n  vertical-align: top;\n  overflow: hidden;\n}\n\n\n#graphLayout {\n  cursor: all-scroll;\n}\n\n#rectStream {\n  cursor: pointer;\n  stroke: lightgray;\n  stroke-width: 2px;\n}\n\n.parcoordsSelection {\n  stroke: black;\n  stroke-width: 4px;\n  stroke-dasharray: 20,5;\n  /* transition: \"visibility 0s, opacity 0.4s linear\" */\n}\n\n.tagSelected {\n  stroke: rgba(0, 255, 200, 0.4);\n  stroke-width: 5px;\n\n  fill: rgba(0, 255, 200, 0.4);\n}\n\ncircle {\n  cursor: pointer;\n  stroke: lightgray;\n  stroke-width: 2px;\n}\n\ntext {\n  font: 15px arial;\n  pointer-events: none;\n  opacity: 0.7;\n}\n\ntext.shadow {\n  stroke: #fff;\n  stroke-width: 3px;\n  stroke-opacity: 0.8;\n}\n\n\n\n\n.d3-context-menu {\n  position: absolute;\n  display: none;\n  background-color: rgb(240, 240, 240);\n  border-radius: 8px;\n  box-shadow: rgb(73, 73, 73) 3px 3px 7px;\n  font-family: Arial, sans-serif;\n  font-size: 10px;\n  min-width: 150px;\n  border: 0px solid #d4d4d4;\n  border: 0px solid #ffffff00;\n  z-index: 1200;\n  padding-top: 3px;\n  padding-bottom: 3px;\n}\n\n.d3-context-menu ul {\n  list-style-type: none;\n  margin: 4px 0px;\n  padding: 0px;\n  cursor: pointer;\n}\n\n.d3-context-menu ul li {\n  padding: 4px 16px;\n}\n\n.d3-context-menu ul li.stream:hover {\n  background-color: hotpink;\n  color: #fefefe;\n  transition: 700ms;\n}\n\n.d3-context-menu ul li.client:hover {\n  background-color: #0099ff;\n  color: #fefefe;\n  transition: 700ms;\n}\n\n.tooltip {\n  position: absolute;\n  text-align: center;\n  width: 250px;\n  height: 60px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: #94e1ff;\n  border: 2px;\n  border-color: black;\n  border-width: 2px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.tooltipOwner {\n  position: absolute;\n  text-align: center;\n  width: 250px;\n  height: 15px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: #50ccfd;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.tooltipDoc {\n  position: absolute;\n  text-align: center;\n  width: 350px;\n  height: 45px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: hotpink;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.hull {\n  fill: steelblue;\n  fill-opacity: 1;\n  stroke: steelblue;\n  stroke-width: 22px;\n  stroke-opacity: 1;\n  stroke-linejoin: round;\n}\n\n.subhullOwner {\n  fill: rgb(126, 191, 243);\n  stroke: rgb(126, 191, 243);\n  stroke-width: 40;\n  opacity: 0.5;\n  stroke-linejoin: round;\n}\n\n.subhullDoc {\n  fill: hotpink;\n  stroke: hotpink;\n  stroke-width: 40;\n  opacity: 0.5;\n  stroke-linejoin: round;\n}\n\npath.link {\n  fill: none;\n}\n\nmarker {\n  stroke-width: 1000 !important;\n}\n.brush {\n  stroke: #222;\n  fill-opacity: 0.125;\n  shape-rendering: crispEdges;\n}\n",{"version":3,"sources":["ForceDirectedLayout.vue"],"names":[],"mappingskkDA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAGA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;;;;AAKA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;;AAEA;AACA;AACA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"ForceDirectedLayout.vue","sourceRoot":"src/components","sourcesContent":["<template>\n  <div id=\"clientGraph\">\n    <svg width=\"100%\" :height=\"svgHeight\" id=\"graphLayout\">\n      <g class=\"everything\">\n        <g v-show=\"!switchForce\" id=\"hullDoc\" />\n        <g v-show=\"!switchForce\" id=\"cenDoc\" />\n        <g v-show=\"!switchForce\" id=\"textDoc\" />\n        <g v-show=\"switchForce\" id=\"hullOwner\" />\n        <g v-show=\"switchForce\" id=\"cenOwner\" />\n        <g v-show=\"switchForce\" id=\"textOwner\" />\n        <g id=\"pathLink\" />\n        <g id=\"marker\" />\n        <g id=\"circleSender\" />\n        <g id=\"circleReceiver\" />\n        <!-- <g id=\"rectParcoords\" /> -->\n        <g id=\"rectStream\" />\n        <g id=\"text\" />\n      </g>\n    </svg>\n  </div>\n</template>\n\n<script>\nimport * as d3 from \"d3\"\nimport ParCoords from 'parcoord-es'\nimport MicrosoftExcel from \"../../public/img/icons/MicrosoftExcel.svg\"\nimport Grasshopper3D from \"../../public/img/icons/Grasshopper3D.svg\"\nimport Rhino3D from \"../../public/img/icons/Rhino3D.svg\"\nimport GSA from \"../../public/img/icons/GSA.svg\"\nimport Revit from \"../../public/img/icons/Revit.svg\"\nimport Dynamo from \"../../public/img/icons/Dynamo.svg\"\n\nexport default {\n  name: \"ForceDirectedLayout\",\n\n  props: {\n    clientdata: Array,\n    svgHeight: Number,\n    showDocGroups: Array,\n    clientdatafilter: Array,\n    timeFilter: Array,\n    toggleFix: Boolean,\n    brush: Boolean,\n    documentLinksForce: Number,\n    switchForce: Boolean,\n    inspectTimeframe: Boolean,\n    inspectSelectedTags: Boolean,\n    streamTags: Array,\n    refocus: Boolean,\n    selectedEdgesDisplay: String,\n    selectedGraphLayout: String,\n    parcoords_selstreams: Array,\n  },\n\n  watch: {\n    // parcoords_selstreams: function(){\n    //   let context = this\n    //   Array.from(document.querySelector(\"#rectParcoords\").children).forEach(\n    //     function(d) {\n    //       if(context.$props.parcoords_selstreams.includes(d3.select(d).datum()._id)){\n    //         d.classList.add(\"parcoordsSelection\")\n    //       }else{\n    //         d.classList.remove(\"parcoordsSelection\")\n    //       }\n\n    //     }\n    //   )\n    // },\n    selectedGraphLayout: function() {\n      this.drawGraph.tick()\n    },\n\n    selectedEdgesDisplay: function() {\n      this.drawGraph.tick()\n    },\n\n    refocus: function() {\n      let container = d3.select(\".everything\")\n      let zoom = d3\n        .zoom()\n        .scaleExtent([0, 0])\n        .on(\"zoom\", () => {\n          container.attr(\"transform\", d3.event.transform)\n        })\n      d3.select(\"#graphLayout\").call(\n        zoom.transform,\n        d3.zoomIdentity.translate(0, 0).scale(1)\n      ) \n    },\n    inspectSelectedTags: function() {\n      let taggedStreams = [] \n      Array.from(document.querySelector(\"#rectStream\").children).forEach(\n        function(d) {\n          if (d.classList.contains(\"tagSelected\")) {\n            taggedStreams.push(d3.select(d).datum().streamId) \n          } else {\n          }\n        }\n      ) \n      let base = new URL(this.$store.state.server)\n      let viewerUrl = base.origin + `/#/view/${taggedStreams.join(\",\")}`\n      window.open(viewerUrl, \"_blank\").focus() \n    },\n    streamTags: function() {\n      let context = this \n      Array.from(document.querySelector(\"#rectStream\").children).forEach(\n        function(d) {\n          let myStreamTags = Array.from(d3.select(d).datum().tags) \n          let selected = context.findCommonElement(\n            myStreamTags,\n            context.streamTags\n          ) \n          if (selected) {\n            d.classList.remove(\"tagSelected\") \n            //context.selectedTaggedStreams.splice( context.selectedTaggedStreams.indexOf(d3.select(d).datum().streamId), 1 )\n            if (\n              context.selectedTaggedStreams.indexOf(\n                d3.select(d).datum().streamId\n              ) != -1\n            ) {\n              context.selectedTaggedStreams.splice(\n                context.selectedTaggedStreams.indexOf(\n                  d3.select(d).datum().streamId\n                ),\n                1\n              ) \n            }\n            d.classList.add(\"tagSelected\") \n            context.selectedTaggedStreams.push(d3.select(d).datum().streamId) \n          } else {\n            d.classList.remove(\"tagSelected\") \n            if (\n              context.selectedTaggedStreams.indexOf(\n                d3.select(d).datum().streamId\n              ) != -1\n            ) {\n              context.selectedTaggedStreams.splice(\n                context.selectedTaggedStreams.indexOf(\n                  d3.select(d).datum().streamId\n                ),\n                1\n              ) \n            }\n          }\n        }\n      ) \n      context.$emit(\"triggeredTags\", context.selectedTaggedStreams) \n    },\n    inspectTimeframe: function() {\n      let selectedStreams = [] \n      Array.from(document.querySelector(\"#rectStream\").children).forEach(\n        function(d) {\n          if (d.classList.contains(\"selected\")) {\n            selectedStreams.push(d3.select(d).datum().streamId) \n          }\n        }\n      ) \n\n      let base = new URL(this.$store.state.server)\n      let viewerUrl = base.origin + `/#/view/${selectedStreams.join(\",\")}`\n\n      window.open(viewerUrl, \"_blank\").focus() \n    },\n    brush: function() {\n    },\n    switchForce: function() {\n      if (this.switchForce) {\n        this.$data.simulation\n          .force(\"link\")\n          .links(\n            this.forceLinks.filter(d => d.type != \"documentGuidForceGroup\")\n          ) \n        this.$data.simulation.alpha(1).restart() \n      } else {\n        this.$data.simulation\n          .force(\"link\")\n          .links(this.forceLinks.filter(d => d.type != \"ownerForceGroup\")) \n        this.$data.simulation.alpha(1).restart() \n      }\n    },\n\n    documentLinksForce: function() {\n      this.$data.simulation.force(\"link\").distance(d => {\n        if (d.type == \"ownerForceGroup\") {\n          return this.documentLinksForce \n        } else if (d.type == \"documentGuidForceGroup\") {\n          return this.documentLinksForce \n        } else {\n          return 116 \n        }\n      }) \n      this.$data.simulation.alpha(1).restart() \n    },\n    toggleFix: function() {\n      if (this.toggleFix) {\n        this.$data.simulation.stop() \n        d3.selectAll(\"circle\").classed(\"fixed\", d => {\n          d.fixed = true \n        }) \n        d3.selectAll(\"rect\").classed(\"fixed\", d => {\n          d.fixed = true \n        }) \n      } else {\n        this.$data.simulation.alphaTarget(0.3).restart() \n        d3.selectAll(\"circle\").classed(\"fixed\", d => {\n          d.fixed = false \n        }) \n        d3.selectAll(\"rect\").classed(\"fixed\", d => {\n          d.fixed = false \n        }) \n      }\n    },\n    clientdatafilter: function() {\n \n    },\n\n    timeFilter: function() {\n      this.updateDisplayNodes(\"#circleSender\") \n      this.updateDisplayNodes(\"#circleReceiver\") \n      this.updateDisplayNodes(\"#rectStream\") \n      this.updateDisplayNodes(\"#text\") \n      this.updateDisplayLinks(\"#pathLink\") \n    }\n  },\n\n  data: () => ({\n    forceLinks: [],\n    shiftKey: null,\n    filteredNodes: null,\n    colour: null,\n    groupPath: null,\n    simulation: null,\n    selectedTaggedStreams: [],\n    svgWidth: document.getElementById(\"appClientGraph\").offsetWidth,\n    context: this,\n\n\n    hullPadding: 11,\n\n    roundedHull: function(polyPoints) {\n      \n      // Returns the SVG path data string representing the polygon, expanded and rounded.\n\n      // Handle special cases\n      if (!polyPoints || polyPoints.length < 1) return \"\" \n      if (polyPoints.length === 1) return this.roundedHull1(polyPoints) \n      if (polyPoints.length === 2) return this.roundedHull2(polyPoints) \n\n      let segments = new Array(polyPoints.length) \n\n      // Calculate each offset (outwards) segment of the convex hull.\n      for (\n        let segmentIndex = 0;\n        segmentIndex < segments.length;\n        ++segmentIndex\n      ) {\n        let p0 =\n          segmentIndex === 0\n            ? polyPoints[polyPoints.length - 1]\n            : polyPoints[segmentIndex - 1]\n        let p1 = polyPoints[segmentIndex]\n\n        // Compute the offset vector for the line segment, with length = hullPadding.\n        let offset = vecScale(this.hullPadding, this.unitNormal(p0, p1))\n\n        segments[segmentIndex] = [this.vecSum(p0, offset), this.vecSum(p1, offset)] \n      }\n\n      let arcData = \"A \" + [this.hullPadding, this.hullPadding, \"0,0,0,\"].join(\",\") \n\n      segments = segments.map(function(segment, index) {\n        let pathFragment = \"\" \n        if (index === 0) {\n          let pathFragment = \"M \" + segments[segments.length - 1][1] + \" \" \n        }\n        pathFragment += arcData + segment[0] + \" L \" + segment[1] \n\n        return pathFragment \n      }) \n\n      return segments.join(\" \") \n    },\n    roundedHull1: function(polyPoints) {\n      // Returns the path for a rounded hull around a single point (a circle).\n      let p1 = [polyPoints[0][0], polyPoints[0][1] - this.hullPadding] \n      let p2 = [polyPoints[0][0], polyPoints[0][1] + this.hullPadding] \n      return (\n        \"M \" +\n        p1 +\n        \" A \" +\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p2].join(\",\") +\n        \" A \" +\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p1].join(\",\")\n      ) \n    },\n    roundedHull2: function(polyPoints) {\n      // Returns the path for a rounded hull around two points (a \"capsule\" shape).\n      let offsetVector = this.vecScale(\n        this.hullPadding,\n        this.unitNormal(polyPoints[0], polyPoints[1])\n      ) \n      let invOffsetVector = this.vecScale(-1, offsetVector) \n      let p0 = this.vecSum(polyPoints[0], offsetVector) \n      let p1 = this.vecSum(polyPoints[1], offsetVector) \n      let p2 = this.vecSum(polyPoints[1], invOffsetVector) \n      let p3 = this.vecSum(polyPoints[0], invOffsetVector) \n      return (\n        \"M \" +\n        p0 +\n        \" L \" +\n        p1 +\n        \" A \" +\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p2].join(\",\") +\n        \" L \" +\n        p3 +\n        \" A \" +\n        [this.hullPadding, this.hullPadding, \"0,0,0\", p0].join(\",\")\n      ) \n    },\n    vecScale: function(scale, v) {\n      // Returns the vector 'v' scaled by 'scale'.\n      return [scale * v[0], scale * v[1]] \n    },\n    vecSum: function(pv1, pv2) {\n      // Returns the sum of two vectors, or a combination of a point and a vector.\n      return [pv1[0] + pv2[0], pv1[1] + pv2[1]] \n    },\n    unitNormal: function(p0, p1) {\n      // Returns the unit normal to the line segment from p0 to p1.\n      let n = [p0[1] - p1[1], p1[0] - p0[0]] \n      let nLength = Math.sqrt(n[0] * n[0] + n[1] * n[1]) \n      return [n[0] / nLength, n[1] / nLength] \n    }\n  }),\n\n  methods: {\n\n    menuClient(){ \n      \n      return [\n        {\n          title: \"Client Info\",\n          action: function(d, i) {\n            let data = d3.select(d).datum() \n            window.alert(\n              d3.select(d).datum().documentType +\n                \": \" +\n                d3.select(d).datum().documentName +\n                \"\\n\" +\n                \"Created at\" +\n                \": \" +\n                d3.select(d).datum().createdAt +\n                \"\\n\" +\n                \"Updated at\" +\n                \": \" +\n                d3.select(d).datum().updatedAt +\n                \"\\n\" +\n                \"Owner is\" +\n                \": \" +\n                d3.select(d).datum().owner\n            ) \n          }\n        }\n      ]},\n      menuStream(){ \n            \n            let context = this\n            \n            return [\n            \n            {\n              title: \"View Stream in Viewer\",\n              action: function(d, i) {\n                let data = d3.select(d).datum()\n                let base = new URL(context.$store.state.server)\n                let viewerUrl = base.origin + `/#/view/${data.streamId}`\n                window.open(viewerUrl, \"_blank\").focus() \n              },\n              disabled: false // optional, defaults to false\n            },\n            {\n              title: \"View Stream in Admin\",\n              action: function(d, i) {\n                let data = d3.select(d).datum()\n                let base = new URL(context.$store.state.server)\n                let adminUrl = base.origin + `/#/streams/${data.streamId}`\n                window.open(adminUrl, \"_blank\").focus()\n              },\n              disabled: false // optional, defaults to false\n            },\n            {\n              title: \"View Stream Data\",\n              action: function(d, i) {\n                let data = d3.select(d).datum()\n                let base = new URL(context.$store.state.server)\n                let dataUrl = base + `/streams/${data.streamId}`\n                window.open(dataUrl, \"_blank\").focus()\n              }\n            },\n            {\n              title: \"View Connected Clients\",\n              action: function(d, i) {\n                let data = d3.select(d).datum()\n                let base = new URL(context.$store.state.server)\n                let dataUrlClients = base + `/streams/${data.streamId}/clients`\n                window.open(dataUrlClients, \"_blank\").focus() \n              }\n            }\n          ]},\n\n    zoom_actions() {\n      d3.select(\".everything\").attr(\"transform\", d3.event.transform) \n    },\n\n    findCommonElement(array1, array2) {\n      for (let i = 0; i < array1.length; i++) {\n        for (let j = 0; j < array2.length; j++) {\n          if (array1[i] === array2[j]) {\n            return true\n          }\n        }\n      }\n      return false\n    },\n\n    // Drag events for the whole d3 force simulation\n    drag() {\n      let parentContext = this \n      function dragstarted(d) {\n        if (!d3.event.active)\n          parentContext.simulation.alphaTarget(0.3).restart() \n        d.fx = d.x \n        d.fy = d.y \n      }\n\n      function dragged(d) {\n        d.fx = d3.event.x \n        d.fy = d3.event.y \n      }\n\n      function dragended(d) {\n        if (!d3.event.active) parentContext.simulation.alphaTarget(0) \n        d.fx = null \n        d.fy = null \n      }\n\n      return d3\n        .drag()\n        .on(\"start\", dragstarted)\n        .on(\"drag\", dragged)\n        .on(\"end\", dragended) \n    },\n\n    updateDisplayLinks(id) {\n\n      let context = this \n      Array.from(document.querySelector(id).children).forEach(function(node) {\n        let nodeTimeComparerSource =\n          new Date(node.getAttribute(\"source_timestamp\"))\n            .toISOString()\n            .split(\".\")[0] + \".000Z\" \n        let nodeTimeComparerTarget =\n          new Date(node.getAttribute(\"target_timestamp\"))\n            .toISOString()\n            .split(\".\")[0] + \".000Z\" \n\n        if (\n          nodeTimeComparerSource >= context.timeFilter[0] &&\n          nodeTimeComparerSource <= context.timeFilter[1] &&\n          (nodeTimeComparerTarget >= context.timeFilter[0] &&\n            nodeTimeComparerTarget <= context.timeFilter[1])\n        ) {\n          node.style.opacity = 1 \n          node.style.transition = \"visibility 0s, opacity 0.4s linear\" \n        } else {\n          node.style.opacity = 0.2 \n          node.style.transition = \"visibility 0s, opacity 0.4s linear\" \n        }\n      }) \n    },\n    updateDisplayNodes(id) {\n      let context = this \n\n      Array.from(document.querySelector(id).children).forEach(function(node) {\n        let nodeTimeComparer =\n          new Date(node.getAttribute(\"timestamp\")).toISOString().split(\".\")[0] +\n          \".000Z\" \n        if (\n          nodeTimeComparer >= context.timeFilter[0] &&\n          nodeTimeComparer <= context.timeFilter[1]\n        ) {\n          node.classList.remove(\"unselected\") \n          node.classList.add(\"selected\") \n          node.style.transition = \"visibility 0s, opacity 0.4s linear\" \n\n          node.style.opacity = 1 \n        } else {\n          //node.style.display = \"none\"\n          node.classList.remove(\"selected\") \n          node.classList.add(\"unselected\") \n          node.style.opacity = 0.2 \n          node.style.transition = \"visibility 0s, opacity 0.4s linear\" \n        }\n      }) \n\n      let selectedStreams = [] \n      Array.from(document.querySelector(\"#rectStream\").children).forEach(\n        function(d) {\n          if (d.classList.contains(\"selected\")) {\n            selectedStreams.push(d3.select(d).datum().streamId) \n          }\n        }\n      ) \n      context.$emit(\"triggeredTimeFrame\", selectedStreams) \n    },\n\n    contextMenu(type, menu, openCallback) {\n      // create the div element that will hold the context menu\n      d3.selectAll(\".d3-context-menu\")\n        .data([1])\n        .enter()\n        .append(\"div\")\n        .attr(\"class\", \"d3-context-menu\") \n\n      // close menu\n      d3.select(\".application--wrap\").on(\"click.d3-context-menu\", function() {\n        d3.select(\".d3-context-menu\").style(\"display\", \"none\") \n      }) \n\n      // this gets executed when a contextmenu event occurs\n      return function(data, index) {\n        let elm = this \n\n        d3.selectAll(\".d3-context-menu\").html(\"\") \n        let list = d3.selectAll(\".d3-context-menu\").append(\"ul\") \n        list\n          .selectAll(\"li\")\n          .data(menu)\n          .enter()\n          .append(\"li\")\n          .attr(\"class\", type)\n          .html(function(d) {\n            return d.title \n          })\n          .on(\"click\", function(d, i) {\n            d.action(elm, data, index) \n            d3.select(\".d3-context-menu\").style(\"display\", \"none\") \n          }) \n\n        // the openCallback allows an action to fire before the menu is displayed\n        // an example usage would be closing a tooltip\n        if (openCallback) openCallback(data, index) \n\n        // display context menu.\n        d3.select(\".d3-context-menu\")\n          .style(\"left\", d3.event.pageX - 2 + \"px\")\n          .style(\"top\", d3.event.pageY - 2 + \"px\")\n          .style(\"display\", \"block\") \n\n        d3.event.preventDefault() \n      } \n    },\n    groupBy(arr, property) {\n      return arr.reduce(function(memo, x) {\n        if (!memo[x[property]]) {\n          memo[x[property]] = [] \n        }\n        memo[x[property]].push(x) \n        return memo \n      }, {}) \n    },\n\n    drawGraph() {\n      let _nodes = this.clientdata[0] \n      let links = this.clientdata[1] \n\n      // Sorts all nodes by creation timestamps\n      _nodes.sort(function(a, b) {\n        return a.createdAt < b.createdAt\n          ? -1\n          : a.createdAt > b.createdAt\n          ? 1\n          : 0 \n      }) \n\n      let thisContext = this \n\n      for (let i = 0; i < links.length; i++) {\n        if (links[i].action === \"sending\") {\n          let source = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e._id \n              }\n            })\n            .indexOf(links[i].source) \n\n          // defines a source per client\n          let sourceClient = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e._id \n              }\n            })\n            .indexOf(links[i].sourceClient) \n\n          // defines a source per document\n          let sourceDoc = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e.documentGuid \n              }\n            })\n            .indexOf(links[i].sourceDoc) \n\n          let target = _nodes\n            .map(function(e) {\n              return e._id \n            })\n            .indexOf(links[i].target) \n\n          thisContext.forceLinks.push({\n            source,\n            sourceDoc,\n            sourceClient,\n            target,\n            type: `sending`,\n            display: true\n          }) \n        }\n        if (links[i].action === \"receiving\") {\n          let source = _nodes\n            .map(function(e) {\n              return e._id \n            })\n            .indexOf(links[i].source) \n\n          let target = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e._id \n              }\n            })\n            .indexOf(links[i].target) \n\n          // defines a target per document\n          let targetDoc = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e.documentGuid \n              }\n            })\n            .indexOf(links[i].targetDoc) \n\n          // defines a target per client\n          let targetClient = _nodes\n            .map(function(e) {\n              if (e.type === \"Client\") {\n                return e._id \n              }\n            })\n            .indexOf(links[i].targetClient) \n\n          thisContext.forceLinks.push({\n            source,\n            target,\n            targetDoc,\n            targetClient,\n            type: `receiving`,\n            display: true\n          }) \n        }\n      }\n\n      let clientNodes = _nodes.filter(data => data.type == \"Client\") \n      let parentGroups = this.groupBy(clientNodes, \"owner\") \n\n    \n    let circleOwnerData = []\n      for (let property in parentGroups) {\n        let parGroup = parentGroups[property] \n\n        // let sumX = 0\n        // let sumY = 0\n        // for (let i = 0; i < parGroup.length; i++) {\n        //   sumX += parGroup[i].x\n        //   sumY += parGroup[i].y\n        // }\n        // let avX = sumX / parGroup.length\n        // let avY = sumY / parGroup.length\n        let circCenterOwner = {\"radius\": 4, \"color\": \"#7ebff3\", userInfo: parGroup[0].userInfo}\n        circleOwnerData.push(circCenterOwner)\n      }\n\n\n      for (let property in parentGroups) {\n        let parGroup = parentGroups[property] \n        for (let i = 0; i < parGroup.length - 1; i++) {\n          for (let j = i + 1; j < parGroup.length; j++) {\n            thisContext.forceLinks.push({\n              source: parGroup[i],\n              target: parGroup[j],\n              type: \"ownerForceGroup\",\n              display: false\n            }) \n          }\n        }\n      }\n\n\n\n    let childGroups = this.groupBy(clientNodes, \"documentGuid\") \n\n    \n    let circleDocData = []\n      for (let property in childGroups) {\n        let childGroup = childGroups[property] \n        let infoDoc = \"\"\n\n        if(childGroup[0].documentType === \"Rhino\"){\n          infoDoc = `rhi`\n          circleDocData.push({\"radius\": 4, \"color\": \"hotpink\", \"infoDoc\": `rhi`})\n        }\n        else if(childGroup[0].documentType === \"Dynamo\"){\n          infoDoc = `dyn`\n          circleDocData.push({\"radius\": 4, \"color\": \"hotpink\", \"infoDoc\": `dyn`})\n        }\n        else if(childGroup[0].documentType === \"GSA\"){\n          infoDoc = `gsa`\n          circleDocData.push({\"radius\": 4, \"color\": \"hotpink\", \"infoDoc\": `gsa`})\n        }\n        else if(childGroup[0].documentType === \"Grasshopper\"){\n          infoDoc = `grasshopper`\n          circleDocData.push({\"radius\": 4, \"color\": \"hotpink\", \"infoDoc\": `grasshopper`})\n\n        }\n        // if(childGroup[0].documentType === \"Revit\"){\n        //   infoDoc = `Revit`\n        // }\n        // if(childGroup[0].documentType === \"Excel\"){\n        //   infoDoc = `📊`\n        // }\n        \n        \n        // let sumX = 0\n        // let sumY = 0\n        // for (let i = 0; i < childGroup.length; i++) {\n        //   sumX += childGroup[i].x\n        //   sumY += childGroup[i].y\n        // }\n        // let avX = sumX / childGroup.length\n        // let avY = sumY / childGroup.length\n\n        //let circCenterDoc = {\"radius\": 4, \"color\": \"hotpink\", \"infoDoc\": infoDoc}\n        \n      }\n\n      for (let property in childGroups) {\n        let childGroup = childGroups[property];\n        for (let i = 0; i < childGroup.length - 1; i++) {          \n          for (let j = i + 1; j < childGroup.length; j++) {\n            thisContext.forceLinks.push({\n              source: childGroup[i],\n              target: childGroup[j],\n              type: \"documentGuidForceGroup\",\n              display: false\n            });\n          }\n        }\n      }\n\n      // d3.select(\"#graphLayout\")\n      //   .call( d3.brush()                     // Add the brush feature using the d3.brush function\n      //     .extent( [ [0,0], [this.$data.svgWidth,this.$props.svgHeight] ] )       // initialise the brush area: start at 0,0 and finishes at width,height: it means I select the whole graph area\n      //   )\n\n      let svg = d3.select(\"#graphLayout\") \n\n      // let brush = svg.append(\"g\")\n      //   .attr(\"class\", \"brush\");\n\n      // if(this.$props.brush){\n      // brush.call(d3.brush()\n      //       .extent([[0, 0], [this.$data.svgWidth, this.$props.svgHeight]])\n      //       .on(\"start\", brushstarted)\n      //       .on(\"brush\", brushed)\n      //       .on(\"end\", brushended));\n      // }\n\n      this.$data.simulation = d3\n        .forceSimulation()\n        .nodes(d3.values(_nodes))\n        //.force(\"forceX\", d3.forceX(0).strength(0.08))\n        .force(\n          \"link\",\n          d3.forceLink(thisContext.forceLinks).distance(d => {\n            if (d.type == \"ownerForceGroup\") {\n              return this.documentLinksForce \n            } else if (d.type == \"documentGuidForceGroup\") {\n              return this.documentLinksForce \n            } else {\n              return 100 \n            }\n          })\n        )\n        .force(\n          \"center\",\n          d3.forceCenter(this.$data.svgWidth / 2, this.$props.svgHeight / 2)\n        )\n        .force(\n          \"charge\",\n          d3.forceManyBody().strength(function(d) {\n            if (d.type == \"ownerForceGroup\") {\n              return 200 \n            } else if (d.type == \"documentGuidForceGroup\") {\n              return 200 \n            } else {\n              return -700 \n            }\n          })\n        )\n        .on(\"tick\", tick) \n\n      if (this.selectedGraphLayout == \"Free\") {\n        this.$data.simulation\n          .force(\"forceX\", d3.forceX(0).strength(0))\n          .force(\"forceY\", d3.forceY(0).strength(0)) \n      }\n\n      if (this.selectedGraphLayout == \"Horizontal\") {\n        this.$data.simulation\n          .force(\"forceX\", d3.forceX(0).strength(0))\n          .force(\"forceY\", d3.forceY(0).strength(0.08)) \n      }\n\n      if (this.selectedGraphLayout == \"Vertical\") {\n        this.$data.simulation\n          .force(\"forceX\", d3.forceX(0).strength(0.08))\n          .force(\"forceY\", d3.forceY(0).strength(0)) \n      }\n\n      //add zoom capabilities\n      let zoom_handler = d3.zoom().on(\"zoom\", this.zoom_actions) \n\n      zoom_handler(svg) \n      // REMOVE ZOOM\n      svg.on(\"dblclick.zoom\", null) \n      this.$data.simulation.nodes().forEach(function(d) {\n        d.selected = false \n        d.previouslySelected = false \n      }) \n\n      if (this.switchForce) {\n        // docs\n        let filterLinks = this.forceLinks.filter(\n          d => d.type != \"documentGuidForceGroup\"\n        ) \n        this.$data.simulation.force(\"link\").links(filterLinks) \n        this.$data.simulation.alpha(1).restart() \n      } else {\n        let filterLinks = this.forceLinks.filter(\n          d => d.type != \"ownerForceGroup\"\n        ) \n        this.$data.simulation.force(\"link\").links(filterLinks) \n        this.$data.simulation.alpha(1).restart() \n      }\n\n      this.$data.colour = d3\n        .scaleLinear()\n        .domain([0, _nodes.length - 1])\n        .interpolate(d3.interpolateHcl)\n        .range([d3.rgb(\"lightgray\"), d3.rgb(\"blue\")]) \n\n      let xScale = d3\n        .scaleLinear()\n        .domain([0, this.svgWidth])\n        .range([0, this.svgWidth]) \n      let yScale = d3\n        .scaleLinear()\n        .domain([0, this.svgHeight])\n        .range([0, this.svgHeight]) \n\n      // Define the div for the tooltip\n      let divCircle = d3.select(\".tooltip\").style(\"opacity\", 0) \n      let divOwner = d3.select(\".tooltipOwner\").style(\"opacity\", 0) \n      let divDoc = d3.select(\".tooltipDoc\").style(\"opacity\", 0) \n      \n      svg\n        .select(\"#hullOwner\")\n        .selectAll(\"path\")\n        .data(Object.keys(parentGroups))\n        .enter()\n        .append(\"path\")\n\n        .attr(\"class\", \"subhullOwner\")\n\n        .on(\"mouseover\", function(d) {\n          \n          divOwner.style(\"opacity\", 0.8) \n          divOwner\n            .html(`Owner: ${d.values[0].owner}`)\n            .style(\"left\", d3.event.pageX + \"px\")\n            .style(\"top\", d3.event.pageY - 28 + \"px\") \n        })\n        .on(\"mouseout\", function(d) {\n          divOwner.style(\"opacity\", 0) \n        }) \n      svg.select(\"#hullOwner\").selectAll(\"path\") \n\n      // let childGroups = this.groupBy(clientNodes, \"documentGuid\");\n\n      svg\n        .select(\"#hullDoc\")\n        .selectAll(\"path\")\n        .data(Object.keys(childGroups))\n        .enter()\n        .append(\"path\")\n        .attr(\"class\", \"subhullDoc\")\n        .on(\"mouseover\", function(d) {\n          \n          divDoc.style(\"opacity\", 0.8) \n          divDoc\n            .html(\n              `DocumentGuid: ${d.values[0].documentGuid}<br/>\n            DocumentType: ${d.values[0].documentType}<br/>\n            DocumentName: ${d.values[0].documentName}`\n            )\n            .style(\"left\", d3.event.pageX + \"px\")\n            .style(\"top\", d3.event.pageY - 28 + \"px\") \n        })\n        .on(\"mouseout\", function(d) {\n          divDoc.style(\"opacity\", 0) \n        }) \n\n      let groupOwners = d3\n        .nest()\n        .key(function(d) {\n          return d.owner \n        })\n        .entries(this.simulation.nodes().filter(data => data.type == \"Client\")) \n      \n      let groupDocs = d3\n        .nest()\n        .key(function(d) {\n          return d.documentGuid \n        })\n        .entries(this.simulation.nodes().filter(data => data.type == \"Client\")) \n\n      let context = this\n      let groupPath = function(d) {\n        if(d.values.length >= 3){\n          return (\n            \"M\" +\n            d3\n              .polygonHull(\n                d.values.map(function(i) {\n                  return [i.x, i.y] \n                })\n              )\n              .join(\"L\") +\n            \"Z\"\n          )\n        }\n        else{\n         return (\n            context.$data.roundedHull(\n                d.values.map(function(i) {\n                  return [i.x, i.y] \n                })\n              )\n          )\n        }\n      } \n\n      //\n      svg\n        .select(\"#marker\")\n        .selectAll(\"marker\")\n        .data(\n          this.$data.simulation\n            .force(\"link\")\n            .links()\n            .filter(data => data.display)\n        )\n        .enter()\n        .append(\"svg:marker\")\n        .attr(\"source_timestamp\", data => data.source.createdAt)\n        .attr(\"target_timestamp\", data => data.target.createdAt)\n        .attr(\"id\", data => data.type)\n        .attr(\"viewBox\", \"0 -5 10 10\")\n        // handles the size difference between streams and client\n        .attr(\"refX\", data => {\n          if (data.type === \"sending\") {\n            return 21 \n          } else if (data.type === \"receiving\") {\n            return 15 \n          }\n        })\n        .attr(\"refY\", 0)\n        .attr(\"markerWidth\", 20)\n        .attr(\"markerHeight\", 12)\n        .attr(\"orient\", \"auto\")\n        .attr(\"fill-opacity\", 1)\n\n        //.attr(\"fill\", data => this.colour(data.target.index))\n        .attr(\"markerUnits\", \"userSpaceOnUse\")\n        .attr(\"stroke-linecap\", \"round\") \n      // .append(\"svg:path\")\n      // .attr(\"d\", \"M0,-5L10,0L0,5\") \n      let path = svg\n        .select(\"#pathLink\")\n        .selectAll(\"path\")\n        .data(\n          this.$data.simulation\n            .force(\"link\")\n            .links()\n            .filter(data => data.display)\n        )\n        .enter()\n        .append(\"svg:path\")\n        .attr(\"stroke-width\", 1.5)\n        .attr(\"stroke-width\", data => {\n          if (data.source.type === \"Stream\") {\n            if (data.source.objectsNumber > 15) {\n              return 8 \n            } else if (data.source.objectsNumber < 2) {\n              return 3 \n            } else {\n              return data.source.objectsNumber \n            }\n          }\n          if (data.target.type === \"Stream\") {\n            if (data.target.objectsNumber > 15) {\n              return 8 \n            } else if (data.target.objectsNumber < 2) {\n              return 3 \n            } else {\n              return data.target.objectsNumber \n            }\n          }\n        })\n        .attr(\"stroke-linecap\", \"round\")\n        .attr(\"source_timestamp\", data => data.source.createdAt)\n        .attr(\"target_timestamp\", data => data.target.createdAt)\n        .attr(\"class\", function(d) {\n          return \"link \" + d.type \n        })\n\n        .attr(\"marker-end\", function(d) {\n          return \"url(#\" + d.type + \")\" \n        }) \n      //\n      //\n      let circleSender = svg\n        .select(\"#circleSender\")\n        .selectAll(\"circle\")\n        .data(\n          this.$data.simulation.nodes().filter(data => data.role == \"Sender\" || data.role == \"sender\")\n        )\n        .enter()\n        .append(\"svg:circle\")\n        .attr(\"class\", \"sender\")\n        .attr(\"class\", \"node\")\n        .attr(\"r\", 6)\n        .attr(\"timestamp\", function(d) {\n          return d.createdAt \n        })\n        .on(\"dblclick\", dblclick)\n        .call(this.drag(this.$data.simulation))\n        // .on(\"mouseover\", function(d) {\n        //   divCircle.\n        //       style(\"opacity\", .8) \n        //       divCircle.html(`Owner: ${d.owner}<br/>\n        //       ${d.documentType}: ${d.documentName}<br/>\n        //       Created at: ${d.createdAt}<br/>\n        //       Updated at: ${d.updatedAt}`)\n        //       .style(\"left\", (d3.event.pageX) + \"px\")\n        //       .style(\"top\", (d3.event.pageY - 28) + \"px\") \n        //   })\n        // .on(\"mouseout\", function(d) {\n        //   divCircle.style(\"opacity\", 0) \n        // })\n        //\n        .on(\"contextmenu\", this.contextMenu(\"client\", this.menuClient)) \n      let circleReceiver = svg\n        .select(\"#circleReceiver\")\n        .selectAll(\"circle\")\n        .data(\n          this.$data.simulation.nodes().filter(data => data.role == \"Receiver\" || data.role == \"receiver\")\n        )\n        .enter()\n        .append(\"svg:circle\")\n        .attr(\"class\", \"receiver\")\n        .attr(\"class\", \"node\")\n        .attr(\"r\", 6)\n        .attr(\"timestamp\", function(d) {\n          return d.createdAt \n        })\n        .on(\"dblclick\", dblclick)\n        .call(this.drag(this.$data.simulation))\n        // .on(\"mouseover\", function(d) {\n        //   divCircle.\n        //       style(\"opacity\", .8) \n        //       divCircle.html(`Owner: ${d.owner}<br/>\n        //       ${d.documentType}: ${d.documentName}<br/>\n        //       Created at: ${d.createdAt}<br/>\n        //       Updated at: ${d.updatedAt}`)\n        //       .style(\"left\", (d3.event.pageX) + \"px\")\n        //       .style(\"top\", (d3.event.pageY - 28) + \"px\") \n        //   })\n        // .on(\"mouseout\", function(d) {\n        //   divCircle.style(\"opacity\", 0) \n        // })\n        //\n        .on(\"contextmenu\", this.contextMenu(\"client\", this.menuClient)) \n      const rectWidth = 24 \n      const rectHeight = 24 \n      \n\n      \n      // let rectParcoords = svg\n      //   .select(\"#rectParcoords\")\n      //   .selectAll(\"rect\")\n      //   .data(this.$data.simulation.nodes().filter(d => d.type == \"Stream\"))\n      //   .enter()\n      //   .append(\"svg:rect\")\n      //   .attr(\"class\", \"parcoordsSelection\")\n      //   //.attr(\"class\", \"parcoordsSelection\")\n      //   .attr(\"x\", -rectWidth*3 / 2)\n      //   .attr(\"y\", -rectHeight*3 / 2)\n      //   .attr(\"width\", rectWidth*3)\n      //   .attr(\"height\", rectHeight*3)\n      //   .attr(\"rx\", 3)\n      //   .attr(\"ry\", 3)\n      //   .attr(\"fill\", \"none\")\n      //   .attr(\"timestamp\", function(d) {\n      //     return d.createdAt \n      //   })\n\n      let rect = svg\n        .select(\"#rectStream\")\n        .selectAll(\"rect\")\n        .data(this.$data.simulation.nodes().filter(d => d.type == \"Stream\"))\n        .enter()\n        .append(\"svg:rect\")\n        .attr(\"class\", \"node\")\n        .attr(\"x\", -rectWidth / 2)\n        .attr(\"y\", -rectHeight / 2)\n        .attr(\"width\", rectWidth)\n        .attr(\"height\", rectHeight)\n        .attr(\"rx\", 3)\n        .attr(\"ry\", 3)\n        .attr(\"timestamp\", function(d) {\n          return d.createdAt \n        })\n        .on(\"dblclick\", dblclick)\n        .call(this.drag(this.$data.simulation))\n        .on(\"contextmenu\", this.contextMenu(\"stream\", this.menuStream)) \n\n      let text = svg\n        .select(\"#text\")\n        .selectAll(\"g\")\n        .data(this.$data.simulation.nodes())\n        .enter()\n        .append(\"svg:g\")\n        .attr(\"timestamp\", function(d) {\n          return d.createdAt \n        }) \n      text\n        .append(\"svg:text\")\n        .attr(\"x\", 8)\n        .attr(\"y\", \".31em\")\n        .attr(\"class\", \"shadow\")\n        //.style(\"transform\", \"rotate(-45deg)\")\n        .style(\"font-size\", function(d) {\n          if (d.type == \"Client\") {\n            return \"30px\"\n          } else {\n            return \"30px\" \n          }\n        })\n        .text(function(d) {\n          return d.name \n        }) \n      text\n        .append(\"svg:text\")\n        .attr(\"x\", 8)\n        .attr(\"y\", \".31em\")\n        //.style(\"transform\", \"rotate(-45deg)\")\n        .style(\"font-size\", function(d) {\n          if (d.type == \"Client\") {\n            return \"30px\"\n          } else {\n            return \"30px\" \n          }\n        })\n        .text(function(d) {\n          return d.name \n        }) \n\n\n\n\n    let circleOwner = svg\n        .select(\"#cenOwner\")\n        .selectAll(\"circle\")\n        // .data(circleOwnerData)\n        // .enter()\n        // .append(\"circle\")\n        // .attr(\"cx\", function (d) { return d.cx  })\n        // .attr(\"cy\", function (d) { return d.cy  })\n        // .attr(\"r\", function (d) { return d.radius  })\n        // .style(\"fill\", function (d) { return d.color  })\n\n      let textOwner = svg\n        .select(\"#textOwner\")\n        .selectAll(\"text\")\n        \n        .data(circleOwnerData)\n        .enter()\n        .append(\"svg:g\")\n        \n      textOwner\n        .append(\"svg:text\")\n        .attr(\"x\", 0)\n        .attr(\"y\", 0)\n        .style(\"font-size\", \"50px\")\n        .attr('x', 0)\n        .attr('y', 0)\n        .style(\"font-weight\", \"800\")\n        .text(function(d) { return `${d.userInfo.surname.charAt(0)}${d.userInfo.name.charAt(0)}`  })\n        .append('svg:tspan')\n        .attr('x', 90)\n        .attr('y', 0)\n        .style(\"font-size\", \"30px\")\n        .text(function(d) { return `(${d.userInfo.company})`  })\n        .append('svg:tspan')\n\n\n    let circleDoc = svg\n        .select(\"#cenDoc\")\n        .selectAll(\"circle\")\n        .data(circleDocData)\n        // .enter()\n        // .append(\"circle\")\n        // .attr(\"r\", function (d) { return d.radius  })\n        // .style(\"fill\", function (d) { return d.color  })\n        \n    let textDoc = svg\n        .select(\"#textDoc\")\n        .selectAll(\"text\")\n        .data(groupDocs)\n        .enter()      \n        .append(\"svg:g\")\n      textDoc\n        .append(\"svg:image\")\n        .attr(\"xlink:href\", function (d) { \n          let docType = d.values[0].documentType\n\n         if(docType === \"Rhino\"){\n            return Rhino3D\n          }\n          else if(docType === \"Dynamo\"){\n            return Dynamo\n          }\n          else if(docType === \"Excel\"){\n            return MicrosoftExcel\n          }\n          else if(docType === \"GSA\"){\n             return GSA\n          }\n          else if(docType === \"Grasshopper\"){\n            return Grasshopper3D\n          }\n          else if(docType === \"Revit\"){\n            return Revit\n          }else{\n            return \"404\"\n          }\n          \n          })\n        .attr(\"width\", 150)\n        .attr(\"height\", 150)\n        .attr(\"x\", -75)\n        .attr(\"y\", -75)\n        \n        // .style(\"font-size\", \"50px\")\n        // .text(function(d) {\n        //   let docType = d.values[0].documentType\n        //   if(docType === \"Rhino\"){\n        //     return `🦏`\n        //   }\n        //   else if(docType === \"Dynamo\"){\n        //     return `🔧`\n        //   }\n        //   else if(docType === \"Excel\"){\n        //     //return `📊`\n        //     return `<line></line>`\n\n        //   }\n        //   else if(docType === \"GSA\"){\n        //     return `💎`\n        //   }\n        //   else if(docType === \"Grasshopper\"){\n        //     return `🦗`\n        //   }else{\n        //     return docType\n        //   }\n        // })\n\n\n\n\n\n\n      let parentContext = this \n      function brushstarted() {\n        if (d3.event.sourceEvent.type !== \"end\") {\n          svg\n            .select(\"#rectStream\")\n            .selectAll(\"rect\")\n            .classed(\"selected\", function(d) {\n              return (d.selected = d.previouslySelected =\n                parentContext.$data.shiftKey && d.selected) \n            }) \n        }\n      }\n\n      function brushed() {\n        if (d3.event.sourceEvent.type !== \"end\") {\n          let selection = d3.event.selection \n          svg\n            .select(\"#rectStream\")\n            .selectAll(\"rect\")\n            .classed(\"selected\", function(d) {\n              return (d.selected =\n                d.previouslySelected ^\n                (selection != null &&\n                  selection[0][0] <= d.x &&\n                  d.x < selection[1][0] &&\n                  selection[0][1] <= d.y &&\n                  d.y < selection[1][1])) \n            }) \n        }\n      }\n\n      function brushended() {\n        if (d3.event.selection != null) {\n          d3.select(this).call(d3.event.target.move, null) \n        }\n      }\n\n      function dblclick(d) {\n        d3.select(this).classed(\"fixed\", (d.fixed = !d.fixed)) \n      }\n      function dragstart(d) {\n        if (this.toggleFix) {\n          d3.select(this).classed(\"fixed\", (d.fixed = true)) \n        } else {\n          d3.select(this).classed(\"fixed\", (d.fixed = false)) \n        }\n      }\n\n      //let parentContext = this \n      function tick() {\n        \n        svg\n          .selectAll(\".node\")\n          .attr(\"fill\", \n          data => parentContext.colour(data.index)\n          )\n          .attr(\"cx\", function(d) {\n            return d.x \n          })\n          .attr(\"cy\", function(d) {\n            return d.y \n          }) \n        \n\n        svg\n          .select(\"#hullOwner\")\n          .selectAll(\".subhullOwner\")\n          .each(function (d,i) {\n\n              let sumX = 0\n              let sumY = 0\n              for (let i = 0; i < Object.values(d)[1].length; i++) {\n                sumX += Object.values(d)[1][i].x\n                sumY += Object.values(d)[1][i].y\n              }\n              let avX = sumX / Object.values(d)[1].length\n              let avY = sumY / Object.values(d)[1].length\n\n              svg\n                .select(\"#cenOwner\")\n                .selectAll(\"circle\")\n                .each(function (d, j) {\n                  if (j === i && avX && avY) {\n                    d3.select(this)\n                      .attr(\"cx\", avX)\n                      .attr(\"cy\", avY)    \n                  }\n                })\n            \n              svg\n                .select(\"#textOwner\")\n                .selectAll(\"text\")\n                .each(function (d, j) {\n                  if (j === i && avX && avY) {\n                    d3.select(this)\n                    .attr(\"transform\", function(d) {\n                      return \"translate(\" + avX + \",\" + avY + \")\" \n                    })\n                  }\n                })\n        }) \n\n\n        svg\n          .select(\"#hullOwner\")\n          .selectAll(\".subhullOwner\")\n          .data(groupOwners)\n          .attr(\"d\", groupPath)\n          .enter()\n          .insert(\"path\")\n          .attr(\"d\", groupPath)\n        \n        \n        svg\n          .select(\"#hullDoc\")\n          .selectAll(\".subhullDoc\")\n          .each(function (d,i) {\n\n              let sumX = 0\n              let sumY = 0\n              for (let i = 0; i < Object.values(d)[1].length; i++) {\n                sumX += Object.values(d)[1][i].x\n                sumY += Object.values(d)[1][i].y\n              }\n              let avX = sumX / Object.values(d)[1].length\n              let avY = sumY / Object.values(d)[1].length\n\n              svg\n                .select(\"#cenDoc\")\n                .selectAll(\"circle\")\n                .each(function (d, j) {\n                  if (j == i && avX && avY) {\n                    d3.select(this)\n                      .attr(\"cx\", avX)\n                      .attr(\"cy\", avY)    \n                  }\n                })\n            \n              svg\n                .select(\"#textDoc\")\n                .selectAll(\"image\")\n                .each(function (d, j) {\n                  if (j == i && avX && avY) {\n                    d3.select(this)\n                    .attr(\"transform\", function(d) {\n                      return \"translate(\" + avX + \",\" + avY + \")\" \n                    })\n                  }\n                })\n        }) \n        \n                \n        svg\n          .select(\"#hullDoc\")\n          .selectAll(\".subhullDoc\")\n          .data(groupDocs)\n          .attr(\"d\", groupPath)\n          .enter()\n          .insert(\"path\")\n          .attr(\"d\", groupPath) \n        \n        path\n          .attr(\"d\", function(d) {\n            let dx = d.target.x - d.source.x,\n              dy = d.target.y - d.source.y,\n              dr = Math.sqrt(dx * dx + dy * dy) \n            let x0 = d.source.x \n            let y0 = d.source.y \n            let x1 = d.target.x \n            let y1 = d.target.y \n            let xcontrol = x1 * 0.5 + x0 * 0.5 \n            let ycontrol = y1 * 0.5 + y0 * 0.5 \n            let smartDiagonal \n            if (Math.abs(x0 - x1) > Math.abs(y0 - y1)) {\n              smartDiagonal = [\n                \"M\",\n                x0,\n                y0,\n                \"C\",\n                xcontrol,\n                y0,\n                xcontrol,\n                y1,\n                x1,\n                y1\n              ].join(\" \") \n            }\n            if (Math.abs(y0 - y1) > Math.abs(x0 - x1)) {\n              smartDiagonal = [\n                \"M\",\n                x1,\n                y1,\n                \"C\",\n                x1,\n                ycontrol,\n                x0,\n                ycontrol,\n                x0,\n                y0\n              ].join(\" \") \n            }\n\n            if (parentContext.selectedEdgesDisplay == \"Diagonal Horizontal\") {\n              return [\n                \"M\",\n                x0,\n                y0,\n                \"C\",\n                xcontrol,\n                y0,\n                xcontrol,\n                y1,\n                x1,\n                y1\n              ].join(\" \") \n            }\n            if (parentContext.selectedEdgesDisplay == \"Diagonal Vertical\") {\n              return [\n                \"M\",\n                x1,\n                y1,\n                \"C\",\n                x1,\n                ycontrol,\n                x0,\n                ycontrol,\n                x0,\n                y0\n              ].join(\" \") \n            }\n            if (parentContext.selectedEdgesDisplay == \"Diagonal Smart\") {\n              return smartDiagonal \n            }\n            if (parentContext.selectedEdgesDisplay == \"Line\") {\n              return [\"M\", x0, y0, \"L\", x1, y1].join(\" \") \n            }\n            if (parentContext.selectedEdgesDisplay == \"Arc\") {\n              return [\"M\", x0, y0, \"A\", dr, dr, \" 0 0,1 \", x1, y1].join(\" \") \n            }\n          })\n          .attr(\"stroke\", data => parentContext.colour(data.source.index)) \n        //\n        // svg.selectAll('marker')\n        // .attr('fill', data =>\n        //   colour(data.target.index)\n        // ) \n        // circleSender.attr(\"transform\", function(d) {\n        //   return \"translate(\" + d.x + \",\" + d.y + \")\" \n        // })\n        //  \n        // circleReceiver.attr(\"transform\", function(d) {\n        //   return \"translate(\" + d.x + \",\" + d.y + \")\" \n        // }) \n        rect.attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\" \n        }) \n        text.attr(\"transform\", function(d) {\n          return \"translate(\" + d.x + \",\" + d.y + \")\" \n        }) \n\n      }\n\n      this.drawGraph.tick = tick  // create a reference to the inner function\n\n      this.updateDisplayNodes(\"#circleSender\") \n      this.updateDisplayNodes(\"#circleReceiver\") \n      this.updateDisplayNodes(\"#rectStream\") \n      this.updateDisplayNodes(\"#text\") \n      this.updateDisplayLinks(\"#pathLink\") \n    }\n  },\n  mounted() {\n    this.svgWidth = document.getElementById(\"clientGraph\").offsetWidth \n    this.drawGraph() \n  },\n\n  computed: {\n    myserver: function () {\n      // `this` points to the vm instance\n      return this\n    }\n      \n  }\n} \n</script>\n\n<style>\n.bar-positive {\n  fill: steelblue;\n  transition: r 0.2s ease-in-out;\n}\n\n.svg-container {\n  display: inline-block;\n  position: relative;\n  width: 100%;\n  padding-bottom: 1%;\n  vertical-align: top;\n  overflow: hidden;\n}\n\n\n#graphLayout {\n  cursor: all-scroll;\n}\n\n#rectStream {\n  cursor: pointer;\n  stroke: lightgray;\n  stroke-width: 2px;\n}\n\n.parcoordsSelection {\n  stroke: black;\n  stroke-width: 4px;\n  stroke-dasharray: 20,5;\n  /* transition: \"visibility 0s, opacity 0.4s linear\" */\n}\n\n.tagSelected {\n  stroke: rgba(0, 255, 200, 0.4);\n  stroke-width: 5px;\n\n  fill: rgba(0, 255, 200, 0.4);\n}\n\ncircle {\n  cursor: pointer;\n  stroke: lightgray;\n  stroke-width: 2px;\n}\n\ntext {\n  font: 15px arial;\n  pointer-events: none;\n  opacity: 0.7;\n}\n\ntext.shadow {\n  stroke: #fff;\n  stroke-width: 3px;\n  stroke-opacity: 0.8;\n}\n\n\n\n\n.d3-context-menu {\n  position: absolute;\n  display: none;\n  background-color: rgb(240, 240, 240);\n  border-radius: 8px;\n  box-shadow: rgb(73, 73, 73) 3px 3px 7px;\n  font-family: Arial, sans-serif;\n  font-size: 10px;\n  min-width: 150px;\n  border: 0px solid #d4d4d4;\n  border: 0px solid #ffffff00;\n  z-index: 1200;\n  padding-top: 3px;\n  padding-bottom: 3px;\n}\n\n.d3-context-menu ul {\n  list-style-type: none;\n  margin: 4px 0px;\n  padding: 0px;\n  cursor: pointer;\n}\n\n.d3-context-menu ul li {\n  padding: 4px 16px;\n}\n\n.d3-context-menu ul li.stream:hover {\n  background-color: hotpink;\n  color: #fefefe;\n  transition: 700ms;\n}\n\n.d3-context-menu ul li.client:hover {\n  background-color: #0099ff;\n  color: #fefefe;\n  transition: 700ms;\n}\n\n.tooltip {\n  position: absolute;\n  text-align: center;\n  width: 250px;\n  height: 60px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: #94e1ff;\n  border: 2px;\n  border-color: black;\n  border-width: 2px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.tooltipOwner {\n  position: absolute;\n  text-align: center;\n  width: 250px;\n  height: 15px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: #50ccfd;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.tooltipDoc {\n  position: absolute;\n  text-align: center;\n  width: 350px;\n  height: 45px;\n  padding: 2px;\n  font: 12px sans-serif;\n  background: hotpink;\n  border: 0px;\n  border-radius: 8px;\n  pointer-events: none;\n}\n\n.hull {\n  fill: steelblue;\n  fill-opacity: 1;\n  stroke: steelblue;\n  stroke-width: 22px;\n  stroke-opacity: 1;\n  stroke-linejoin: round;\n}\n\n.subhullOwner {\n  fill: rgb(126, 191, 243);\n  stroke: rgb(126, 191, 243);\n  stroke-width: 40;\n  opacity: 0.5;\n  stroke-linejoin: round;\n}\n\n.subhullDoc {\n  fill: hotpink;\n  stroke: hotpink;\n  stroke-width: 40;\n  opacity: 0.5;\n  stroke-linejoin: round;\n}\n\npath.link {\n  fill: none;\n}\n\nmarker {\n  stroke-width: 1000 !important;\n}\n.brush {\n  stroke: #222;\n  fill-opacity: 0.125;\n  shape-rendering: crispEdges;\n}\n</style>\n"]}]}